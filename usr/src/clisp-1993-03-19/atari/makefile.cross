# Makefile for the CLISP binaries
# DO NOT EDIT! GENERATED AUTOMATICALLY!

# -------------- Start of configurable section --------------------

# Directories used by "make install":
prefix = /usr/local
exec_prefix = $(prefix)
bindir = $(exec_prefix)/bin
mandir = $(exec_prefix)/man
libdir = $(exec_prefix)/lib
lisplibdir = $(libdir)/lisp

# Programs used by "make":
CC = gcc
CFLAGS = -O
CPP = gcc -E
XCC = gcc-atari
XCFLAGS = -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -fomit-frame-pointer -ffixed-a4 -fno-strength-reduce -O2
XCPP = gcc-atari -E
XLIBS = 
CHARSETCONVERT = ./cv_lt_at

RM = rm -f
CP = cp -p
LN = ln -s
MV = mv
CAT = cat
RANLIB = ranlib

# Programs used by "make install":
INSTALL = cp -p
INSTALL_PROGRAM = $(INSTALL)
INSTALL_DATA = $(INSTALL)

# Programs used by "make distrib":

# formatter for manual page
ROFF_MAN = nroff -man # try "groff -Tascii -mandoc" or "nroff -man"
ROFF_DVI =  # try "groff -Tdvi -mandoc"

# -------------- End of configurable section --------------------

COMMENT5 = ./comment5
ANSIDECL = ./ansidecl
TXT2C = ./txt2c

DFILES = \
spvw.d \
spvwtabf.d \
spvwtabs.d \
spvwtabo.d \
eval.d \
control.d \
pathname.d \
stream.d \
io.d \
array.d \
hashtabl.d \
list.d \
package.d \
record.d \
sequence.d \
charstrg.d \
debug.d \
misc.d \
predtype.d \
symbol.d \
lisparit0.d \
alglobal.d \
lispbibl.d \
fsubr.d \
subr.d \
pseudofun.d \
constsym.d \
constobj.d \
atari.d \
avl.d \
sort.d \
aridecl.d \
arilev0.d \
arilev1c.d \
arilev1e.d \
arilev1i.d \
noreadline.d \
main.d \
ari68000.mot.d \
ari68000.mit.d \
ari68000.atari.d \
ari68020.mot.d \
ari68020.mit.d

CFILES = \
spvw.c \
spvwtabf.c \
spvwtabs.c \
spvwtabo.c \
eval.c \
control.c \
pathname.c \
stream.c \
io.c \
array.c \
hashtabl.c \
list.c \
package.c \
record.c \
sequence.c \
charstrg.c \
debug.c \
misc.c \
predtype.c \
symbol.c \
lisparit0.c \
alglobal.c \
lispbibl.c \
fsubr.c \
subr.c \
pseudofun.c \
constsym.c \
constobj.c \
atari.c \
avl.c \
sort.c \
aridecl.c \
arilev0.c \
arilev1c.c \
arilev1e.c \
arilev1i.c \
noreadline.c \
main.c \
ari68000.mot.c \
ari68000.mit.c \
ari68000.atari.c \
ari68020.mot.c \
ari68020.mit.c \
ari68000.c

OBJECTS = \
spvw.o \
spvwtabf.o \
spvwtabs.o \
spvwtabo.o \
eval.o \
control.o \
pathname.o \
stream.o \
io.o \
array.o \
hashtabl.o \
list.o \
package.o \
record.o \
sequence.o \
charstrg.o \
debug.o \
misc.o \
predtype.o \
symbol.o \
lisparit0.o \
alglobal.o \
ari68000.o

LSPFILES = \
init.lsp \
defseq.lsp \
backquot.lsp \
defmacro.lsp \
macros1.lsp \
macros2.lsp \
defs1.lsp \
places.lsp \
floatpri.lsp \
type.lsp \
defstruc.lsp \
format.lsp \
user1.lsp \
user2.lsp \
trace.lsp \
macros3.lsp \
config.lsp \
compiler.lsp \
rexx.lsp \
editor.lsp

FASFILES = \
init.fas \
defseq.fas \
backquot.fas \
defmacro.fas \
macros1.fas \
macros2.fas \
defs1.fas \
places.fas \
floatpri.fas \
type.fas \
defstruc.fas \
format.fas \
user1.fas \
user2.fas \
trace.fas \
macros3.fas \
config.fas \
compiler.fas \
rexx.fas \
editor.fas

TESTLSPFILES = \
stage/init.lsp \
stage/defseq.lsp \
stage/backquot.lsp \
stage/defmacro.lsp \
stage/macros1.lsp \
stage/macros2.lsp \
stage/defs1.lsp \
stage/places.lsp \
stage/floatpri.lsp \
stage/type.lsp \
stage/defstruc.lsp \
stage/format.lsp \
stage/user1.lsp \
stage/user2.lsp \
stage/trace.lsp \
stage/macros3.lsp \
stage/config.lsp \
stage/compiler.lsp \
stage/rexx.lsp \
stage/editor.lsp

TESTFASFILES = \
stage/init.fas \
stage/defseq.fas \
stage/backquot.fas \
stage/defmacro.fas \
stage/macros1.fas \
stage/macros2.fas \
stage/defs1.fas \
stage/places.fas \
stage/floatpri.fas \
stage/type.fas \
stage/defstruc.fas \
stage/format.fas \
stage/user1.fas \
stage/user2.fas \
stage/trace.fas \
stage/macros3.fas \
stage/config.fas \
stage/compiler.fas \
stage/rexx.fas \
stage/editor.fas


all : init allc allo lisp.prg interpreted.mem compiled.mem manual


init : unixconf.h comment5 ansidecl txt2c cv_lt_at $(DFILES)

unixconf.h :
	if [ ! -f unixconf.h ] ; then touch unixconf.h ; fi

comment5 : ../utils/comment5.c
	$(CC) $(CFLAGS) ../utils/comment5.c -o comment5

ansidecl : ../utils/ansidecl.d comment5
	$(LN) ../utils/ansidecl.d ansidecl.d
	$(COMMENT5) ansidecl.d ansidecl.c
	$(RM) ansidecl.d
	$(CC) $(CFLAGS) ansidecl.c -o ansidecl
	$(RM) ansidecl.c

txt2c : ../utils/txt2c.c
	$(CC) $(CFLAGS) -DCROSS ../utils/txt2c.c -o txt2c

cv_lt_at : ../atari/cv_lt_at.c
	$(CC) $(CFLAGS) ../atari/cv_lt_at.c -o cv_lt_at


../src/lisparit0.d : ../src/lisparit.d ../src/aridecl.d ../src/arilev0.d ../src/arilev1.d ../src/intelem.d ../src/intlog.d ../src/intplus.d ../src/intcomp.d ../src/intbyte.d ../src/intmal.d ../src/intdiv.d ../src/intgcd.d ../src/int2adic.d ../src/intsqrt.d ../src/intprint.d ../src/intread.d ../src/rational.d ../src/sfloat.d ../src/ffloat.d ../src/dfloat.d ../src/lfloat.d ../src/flo_konv.d ../src/flo_rest.d ../src/realelem.d ../src/realrand.d ../src/realtran.d ../src/compelem.d ../src/comptran.d
	$(RM) ../src/lisparit0.d ../src/lisparit0.tmp
	head -19 ../src/lisparit.d > ../src/lisparit0.tmp
	$(CAT) ../src/aridecl.d >> ../src/lisparit0.tmp
	$(CAT) ../src/arilev0.d >> ../src/lisparit0.tmp
	$(CAT) ../src/arilev1.d >> ../src/lisparit0.tmp
	$(CAT) ../src/intelem.d >> ../src/lisparit0.tmp
	$(CAT) ../src/intlog.d >> ../src/lisparit0.tmp
	$(CAT) ../src/intplus.d >> ../src/lisparit0.tmp
	$(CAT) ../src/intcomp.d >> ../src/lisparit0.tmp
	$(CAT) ../src/intbyte.d >> ../src/lisparit0.tmp
	$(CAT) ../src/intmal.d >> ../src/lisparit0.tmp
	$(CAT) ../src/intdiv.d >> ../src/lisparit0.tmp
	$(CAT) ../src/intgcd.d >> ../src/lisparit0.tmp
	$(CAT) ../src/int2adic.d >> ../src/lisparit0.tmp
	$(CAT) ../src/intsqrt.d >> ../src/lisparit0.tmp
	$(CAT) ../src/intprint.d >> ../src/lisparit0.tmp
	$(CAT) ../src/intread.d >> ../src/lisparit0.tmp
	$(CAT) ../src/rational.d >> ../src/lisparit0.tmp
	$(CAT) ../src/sfloat.d >> ../src/lisparit0.tmp
	$(CAT) ../src/ffloat.d >> ../src/lisparit0.tmp
	$(CAT) ../src/dfloat.d >> ../src/lisparit0.tmp
	$(CAT) ../src/lfloat.d >> ../src/lisparit0.tmp
	$(CAT) ../src/flo_konv.d >> ../src/lisparit0.tmp
	$(CAT) ../src/flo_rest.d >> ../src/lisparit0.tmp
	$(CAT) ../src/realelem.d >> ../src/lisparit0.tmp
	$(CAT) ../src/realrand.d >> ../src/lisparit0.tmp
	$(CAT) ../src/realtran.d >> ../src/lisparit0.tmp
	$(CAT) ../src/compelem.d >> ../src/lisparit0.tmp
	$(CAT) ../src/comptran.d >> ../src/lisparit0.tmp
	tail +53 ../src/lisparit.d >> ../src/lisparit0.tmp
	$(MV) ../src/lisparit0.tmp ../src/lisparit0.d

spvw.d : ../src/spvw.d
	-$(LN) ../src/spvw.d spvw.d

spvwtabf.d : ../src/spvwtabf.d
	-$(LN) ../src/spvwtabf.d spvwtabf.d

spvwtabs.d : ../src/spvwtabs.d
	-$(LN) ../src/spvwtabs.d spvwtabs.d

spvwtabo.d : ../src/spvwtabo.d
	-$(LN) ../src/spvwtabo.d spvwtabo.d

eval.d : ../src/eval.d
	-$(LN) ../src/eval.d eval.d

control.d : ../src/control.d
	-$(LN) ../src/control.d control.d

pathname.d : ../src/pathname.d
	-$(LN) ../src/pathname.d pathname.d

stream.d : ../src/stream.d
	-$(LN) ../src/stream.d stream.d

io.d : ../src/io.d
	-$(LN) ../src/io.d io.d

array.d : ../src/array.d
	-$(LN) ../src/array.d array.d

hashtabl.d : ../src/hashtabl.d
	-$(LN) ../src/hashtabl.d hashtabl.d

list.d : ../src/list.d
	-$(LN) ../src/list.d list.d

package.d : ../src/package.d
	-$(LN) ../src/package.d package.d

record.d : ../src/record.d
	-$(LN) ../src/record.d record.d

sequence.d : ../src/sequence.d
	-$(LN) ../src/sequence.d sequence.d

charstrg.d : ../src/charstrg.d
	-$(LN) ../src/charstrg.d charstrg.d

debug.d : ../src/debug.d
	-$(LN) ../src/debug.d debug.d

misc.d : ../src/misc.d
	-$(LN) ../src/misc.d misc.d

predtype.d : ../src/predtype.d
	-$(LN) ../src/predtype.d predtype.d

symbol.d : ../src/symbol.d
	-$(LN) ../src/symbol.d symbol.d

lisparit0.d : ../src/lisparit0.d
	-$(LN) ../src/lisparit0.d lisparit0.d

alglobal.d : ../src/alglobal.d
	-$(LN) ../src/alglobal.d alglobal.d

lispbibl.d : ../src/lispbibl.d
	-$(LN) ../src/lispbibl.d lispbibl.d

fsubr.d : ../src/fsubr.d
	-$(LN) ../src/fsubr.d fsubr.d

subr.d : ../src/subr.d
	-$(LN) ../src/subr.d subr.d

pseudofun.d : ../src/pseudofun.d
	-$(LN) ../src/pseudofun.d pseudofun.d

constsym.d : ../src/constsym.d
	-$(LN) ../src/constsym.d constsym.d

constobj.d : ../src/constobj.d
	-$(LN) ../src/constobj.d constobj.d

atari.d : ../src/atari.d
	-$(LN) ../src/atari.d atari.d

avl.d : ../src/avl.d
	-$(LN) ../src/avl.d avl.d

sort.d : ../src/sort.d
	-$(LN) ../src/sort.d sort.d

aridecl.d : ../src/aridecl.d
	-$(LN) ../src/aridecl.d aridecl.d

arilev0.d : ../src/arilev0.d
	-$(LN) ../src/arilev0.d arilev0.d

arilev1c.d : ../src/arilev1c.d
	-$(LN) ../src/arilev1c.d arilev1c.d

arilev1e.d : ../src/arilev1e.d
	-$(LN) ../src/arilev1e.d arilev1e.d

arilev1i.d : ../src/arilev1i.d
	-$(LN) ../src/arilev1i.d arilev1i.d

noreadline.d : ../src/noreadline.d
	-$(LN) ../src/noreadline.d noreadline.d

main.d : ../src/main.d
	-$(LN) ../src/main.d main.d

ari68000.mot.d : ../src/ari68000.mot.d
	-$(LN) ../src/ari68000.mot.d ari68000.mot.d

ari68000.mit.d : ../src/ari68000.mit.d
	-$(LN) ../src/ari68000.mit.d ari68000.mit.d

ari68000.atari.d : ../src/ari68000.atari.d
	-$(LN) ../src/ari68000.atari.d ari68000.atari.d

ari68020.mot.d : ../src/ari68020.mot.d
	-$(LN) ../src/ari68020.mot.d ari68020.mot.d

ari68020.mit.d : ../src/ari68020.mit.d
	-$(LN) ../src/ari68020.mit.d ari68020.mit.d


allc : init $(CFILES)

spvw.c : spvw.d
	$(COMMENT5) spvw.d | $(CHARSETCONVERT) | $(ANSIDECL) > spvw.c

spvwtabf.c : spvwtabf.d
	$(COMMENT5) spvwtabf.d | $(CHARSETCONVERT) | $(ANSIDECL) > spvwtabf.c

spvwtabs.c : spvwtabs.d
	$(COMMENT5) spvwtabs.d | $(CHARSETCONVERT) | $(ANSIDECL) > spvwtabs.c

spvwtabo.c : spvwtabo.d
	$(COMMENT5) spvwtabo.d | $(CHARSETCONVERT) | $(ANSIDECL) > spvwtabo.c

eval.c : eval.d
	$(COMMENT5) eval.d | $(CHARSETCONVERT) | $(ANSIDECL) > eval.c

control.c : control.d
	$(COMMENT5) control.d | $(CHARSETCONVERT) | $(ANSIDECL) > control.c

pathname.c : pathname.d
	$(COMMENT5) pathname.d | $(CHARSETCONVERT) | $(ANSIDECL) > pathname.c

stream.c : stream.d
	$(COMMENT5) stream.d | $(CHARSETCONVERT) | $(ANSIDECL) > stream.c

io.c : io.d
	$(COMMENT5) io.d | $(CHARSETCONVERT) | $(ANSIDECL) > io.c

array.c : array.d
	$(COMMENT5) array.d | $(CHARSETCONVERT) | $(ANSIDECL) > array.c

hashtabl.c : hashtabl.d
	$(COMMENT5) hashtabl.d | $(CHARSETCONVERT) | $(ANSIDECL) > hashtabl.c

list.c : list.d
	$(COMMENT5) list.d | $(CHARSETCONVERT) | $(ANSIDECL) > list.c

package.c : package.d
	$(COMMENT5) package.d | $(CHARSETCONVERT) | $(ANSIDECL) > package.c

record.c : record.d
	$(COMMENT5) record.d | $(CHARSETCONVERT) | $(ANSIDECL) > record.c

sequence.c : sequence.d
	$(COMMENT5) sequence.d | $(CHARSETCONVERT) | $(ANSIDECL) > sequence.c

charstrg.c : charstrg.d
	$(COMMENT5) charstrg.d | $(CHARSETCONVERT) | $(ANSIDECL) > charstrg.c

debug.c : debug.d
	$(COMMENT5) debug.d | $(CHARSETCONVERT) | $(ANSIDECL) > debug.c

misc.c : misc.d
	$(COMMENT5) misc.d | $(CHARSETCONVERT) | $(ANSIDECL) > misc.c

predtype.c : predtype.d
	$(COMMENT5) predtype.d | $(CHARSETCONVERT) | $(ANSIDECL) > predtype.c

symbol.c : symbol.d
	$(COMMENT5) symbol.d | $(CHARSETCONVERT) | $(ANSIDECL) > symbol.c

lisparit0.c : lisparit0.d
	$(COMMENT5) lisparit0.d | $(CHARSETCONVERT) | $(ANSIDECL) > lisparit0.c

alglobal.c : alglobal.d
	$(COMMENT5) alglobal.d | $(CHARSETCONVERT) | $(ANSIDECL) > alglobal.c

lispbibl.c : lispbibl.d
	$(COMMENT5) lispbibl.d | $(CHARSETCONVERT) | $(ANSIDECL) > lispbibl.c

fsubr.c : fsubr.d
	$(COMMENT5) fsubr.d | $(CHARSETCONVERT) | $(ANSIDECL) > fsubr.c

subr.c : subr.d
	$(COMMENT5) subr.d | $(CHARSETCONVERT) | $(ANSIDECL) > subr.c

pseudofun.c : pseudofun.d
	$(COMMENT5) pseudofun.d | $(CHARSETCONVERT) | $(ANSIDECL) > pseudofun.c

constsym.c : constsym.d
	$(COMMENT5) constsym.d | $(CHARSETCONVERT) | $(ANSIDECL) > constsym.c

constobj.c : constobj.d
	$(COMMENT5) constobj.d | $(CHARSETCONVERT) | $(ANSIDECL) > constobj.c

atari.c : atari.d
	$(COMMENT5) atari.d | $(CHARSETCONVERT) | $(ANSIDECL) > atari.c

avl.c : avl.d
	$(COMMENT5) avl.d | $(CHARSETCONVERT) | $(ANSIDECL) > avl.c

sort.c : sort.d
	$(COMMENT5) sort.d | $(CHARSETCONVERT) | $(ANSIDECL) > sort.c

aridecl.c : aridecl.d
	$(COMMENT5) aridecl.d | $(CHARSETCONVERT) | $(ANSIDECL) > aridecl.c

arilev0.c : arilev0.d
	$(COMMENT5) arilev0.d | $(CHARSETCONVERT) | $(ANSIDECL) > arilev0.c

arilev1c.c : arilev1c.d
	$(COMMENT5) arilev1c.d | $(CHARSETCONVERT) | $(ANSIDECL) > arilev1c.c

arilev1e.c : arilev1e.d
	$(COMMENT5) arilev1e.d | $(CHARSETCONVERT) | $(ANSIDECL) > arilev1e.c

arilev1i.c : arilev1i.d
	$(COMMENT5) arilev1i.d | $(CHARSETCONVERT) | $(ANSIDECL) > arilev1i.c

noreadline.c : noreadline.d
	$(COMMENT5) noreadline.d | $(CHARSETCONVERT) | $(ANSIDECL) > noreadline.c

main.c : main.d
	$(COMMENT5) main.d | $(CHARSETCONVERT) | $(ANSIDECL) > main.c

ari68000.mot.c : ari68000.mot.d
	$(COMMENT5) ari68000.mot.d > ari68000.mot.c

ari68000.mit.c : ari68000.mit.d
	$(COMMENT5) ari68000.mit.d > ari68000.mit.c

ari68000.atari.c : ari68000.atari.d
	$(COMMENT5) ari68000.atari.d > ari68000.atari.c

ari68020.mot.c : ari68020.mot.d
	$(COMMENT5) ari68020.mot.d > ari68020.mot.c

ari68020.mit.c : ari68020.mit.d
	$(COMMENT5) ari68020.mit.d > ari68020.mit.c

# Change "ari68000.mit" to "ari68000.atari" when using "gcc-atari -mshort"
ari68000.c : ari68000.mit.c
	$(LN) ari68000.mit.c ari68000.c

ari68000.s : ari68000.c
	$(XCPP) -DUNDERSCORE ari68000.c > ari68000.s

allo : allc spvw.o spvwtabf.o spvwtabs.o spvwtabo.o eval.o control.o pathname.o stream.o io.o array.o hashtabl.o list.o package.o record.o sequence.o charstrg.o debug.o misc.o predtype.o symbol.o lisparit0.o alglobal.o

alls : allc spvw.s spvwtabf.s spvwtabs.s spvwtabo.s eval.s control.s pathname.s stream.s io.s array.s hashtabl.s list.s package.s record.s sequence.s charstrg.s debug.s misc.s predtype.s symbol.s lisparit0.s alglobal.s

spvw.i : spvw.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c avl.c sort.c
	$(XCPP) $(XCFLAGS) -USINGLE_PASS_COMPILER spvw.c > spvw.i

spvw.s : spvw.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c avl.c sort.c
	$(XCC) $(XCFLAGS) -S spvw.c

spvw.o : spvw.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c avl.c sort.c
	$(XCC) $(XCFLAGS) -c spvw.c

spvwtabf.i : spvwtabf.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCPP) $(XCFLAGS) -USINGLE_PASS_COMPILER spvwtabf.c > spvwtabf.i

spvwtabf.s : spvwtabf.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCC) $(XCFLAGS) -S spvwtabf.c

spvwtabf.o : spvwtabf.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCC) $(XCFLAGS) -c spvwtabf.c

spvwtabs.i : spvwtabs.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCPP) $(XCFLAGS) -USINGLE_PASS_COMPILER spvwtabs.c > spvwtabs.i

spvwtabs.s : spvwtabs.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCC) $(XCFLAGS) -S spvwtabs.c

spvwtabs.o : spvwtabs.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCC) $(XCFLAGS) -c spvwtabs.c

spvwtabo.i : spvwtabo.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCPP) $(XCFLAGS) -USINGLE_PASS_COMPILER spvwtabo.c > spvwtabo.i

spvwtabo.s : spvwtabo.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCC) $(XCFLAGS) -S spvwtabo.c

spvwtabo.o : spvwtabo.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCC) $(XCFLAGS) -c spvwtabo.c

eval.i : eval.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCPP) $(XCFLAGS) -USINGLE_PASS_COMPILER eval.c > eval.i

eval.s : eval.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCC) $(XCFLAGS) -S eval.c

eval.o : eval.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCC) $(XCFLAGS) -c eval.c

control.i : control.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCPP) $(XCFLAGS) -USINGLE_PASS_COMPILER control.c > control.i

control.s : control.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCC) $(XCFLAGS) -S control.c

control.o : control.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCC) $(XCFLAGS) -c control.c

pathname.i : pathname.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCPP) $(XCFLAGS) -USINGLE_PASS_COMPILER pathname.c > pathname.i

pathname.s : pathname.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCC) $(XCFLAGS) -S pathname.c

pathname.o : pathname.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCC) $(XCFLAGS) -c pathname.c

stream.i : stream.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCPP) $(XCFLAGS) -USINGLE_PASS_COMPILER stream.c > stream.i

stream.s : stream.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCC) $(XCFLAGS) -S stream.c

stream.o : stream.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCC) $(XCFLAGS) -c stream.c

io.i : io.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c arilev0.c
	$(XCPP) $(XCFLAGS) -USINGLE_PASS_COMPILER io.c > io.i

io.s : io.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c arilev0.c
	$(XCC) $(XCFLAGS) -S io.c

io.o : io.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c arilev0.c
	$(XCC) $(XCFLAGS) -c io.c

array.i : array.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c arilev0.c
	$(XCPP) $(XCFLAGS) -USINGLE_PASS_COMPILER array.c > array.i

array.s : array.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c arilev0.c
	$(XCC) $(XCFLAGS) -S array.c

array.o : array.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c arilev0.c
	$(XCC) $(XCFLAGS) -c array.c

hashtabl.i : hashtabl.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c arilev0.c aridecl.c
	$(XCPP) $(XCFLAGS) -USINGLE_PASS_COMPILER hashtabl.c > hashtabl.i

hashtabl.s : hashtabl.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c arilev0.c aridecl.c
	$(XCC) $(XCFLAGS) -S hashtabl.c

hashtabl.o : hashtabl.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c arilev0.c aridecl.c
	$(XCC) $(XCFLAGS) -c hashtabl.c

list.i : list.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCPP) $(XCFLAGS) -USINGLE_PASS_COMPILER list.c > list.i

list.s : list.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCC) $(XCFLAGS) -S list.c

list.o : list.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCC) $(XCFLAGS) -c list.c

package.i : package.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c arilev0.c
	$(XCPP) $(XCFLAGS) -USINGLE_PASS_COMPILER package.c > package.i

package.s : package.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c arilev0.c
	$(XCC) $(XCFLAGS) -S package.c

package.o : package.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c arilev0.c
	$(XCC) $(XCFLAGS) -c package.c

record.i : record.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCPP) $(XCFLAGS) -USINGLE_PASS_COMPILER record.c > record.i

record.s : record.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCC) $(XCFLAGS) -S record.c

record.o : record.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCC) $(XCFLAGS) -c record.c

sequence.i : sequence.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCPP) $(XCFLAGS) -USINGLE_PASS_COMPILER sequence.c > sequence.i

sequence.s : sequence.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCC) $(XCFLAGS) -S sequence.c

sequence.o : sequence.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCC) $(XCFLAGS) -c sequence.c

charstrg.i : charstrg.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCPP) $(XCFLAGS) -USINGLE_PASS_COMPILER charstrg.c > charstrg.i

charstrg.s : charstrg.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCC) $(XCFLAGS) -S charstrg.c

charstrg.o : charstrg.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCC) $(XCFLAGS) -c charstrg.c

debug.i : debug.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCPP) $(XCFLAGS) -USINGLE_PASS_COMPILER debug.c > debug.i

debug.s : debug.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCC) $(XCFLAGS) -S debug.c

debug.o : debug.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCC) $(XCFLAGS) -c debug.c

misc.i : misc.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c arilev0.c 
	$(XCPP) $(XCFLAGS) -USINGLE_PASS_COMPILER misc.c > misc.i

misc.s : misc.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c arilev0.c 
	$(XCC) $(XCFLAGS) -S misc.c

misc.o : misc.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c arilev0.c 
	$(XCC) $(XCFLAGS) -c misc.c

predtype.i : predtype.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCPP) $(XCFLAGS) -USINGLE_PASS_COMPILER predtype.c > predtype.i

predtype.s : predtype.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCC) $(XCFLAGS) -S predtype.c

predtype.o : predtype.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCC) $(XCFLAGS) -c predtype.c

symbol.i : symbol.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCPP) $(XCFLAGS) -USINGLE_PASS_COMPILER symbol.c > symbol.i

symbol.s : symbol.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCC) $(XCFLAGS) -S symbol.c

symbol.o : symbol.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCC) $(XCFLAGS) -c symbol.c

lisparit0.i : lisparit0.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c arilev1c.c arilev1e.c arilev1i.c
	$(XCPP) $(XCFLAGS) -USINGLE_PASS_COMPILER lisparit0.c > lisparit0.i

lisparit0.s : lisparit0.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c arilev1c.c arilev1e.c arilev1i.c
	$(XCC) $(XCFLAGS) -S lisparit0.c

lisparit0.o : lisparit0.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c arilev1c.c arilev1e.c arilev1i.c
	$(XCC) $(XCFLAGS) -c lisparit0.c

alglobal.i : alglobal.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCPP) $(XCFLAGS) -USINGLE_PASS_COMPILER alglobal.c > alglobal.i

alglobal.s : alglobal.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCC) $(XCFLAGS) -S alglobal.c

alglobal.o : alglobal.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCC) $(XCFLAGS) -c alglobal.c

noreadline.i : noreadline.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCPP) $(XCFLAGS) -USINGLE_PASS_COMPILER noreadline.c > noreadline.i

noreadline.s : noreadline.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCC) $(XCFLAGS) -S noreadline.c

noreadline.o : noreadline.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCC) $(XCFLAGS) -c noreadline.c

main.i : main.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCPP) $(XCFLAGS) -USINGLE_PASS_COMPILER main.c > main.i

main.s : main.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCC) $(XCFLAGS) -S main.c

main.o : main.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	$(XCC) $(XCFLAGS) -c main.c

ari68000.o : ari68000.s
	$(XCC) $(XCFLAGS) -c ari68000.s

lisp.o : $(OBJECTS)
	ld -r -o lisp.o $(OBJECTS)
	chmod a-x lisp.o

lisp.a : lisp.o main.o
	ar rcv lisp.a lisp.o main.o
	$(RANLIB) lisp.a

libnoreadline.a : noreadline.o
	ar rcv libnoreadline.a noreadline.o
	$(RANLIB) libnoreadline.a

lisp.prg : $(OBJECTS) 
	$(XCC) $(XCFLAGS)  $(OBJECTS) $(XLIBS) -o lisp.prg


alllsp : $(LSPFILES)

init.lsp : ../src/init.lsp
	-$(LN) ../src/init.lsp init.lsp

defseq.lsp : ../src/defseq.lsp
	-$(LN) ../src/defseq.lsp defseq.lsp

backquot.lsp : ../src/backquot.lsp
	-$(LN) ../src/backquot.lsp backquot.lsp

defmacro.lsp : ../src/defmacro.lsp
	-$(LN) ../src/defmacro.lsp defmacro.lsp

macros1.lsp : ../src/macros1.lsp
	-$(LN) ../src/macros1.lsp macros1.lsp

macros2.lsp : ../src/macros2.lsp
	-$(LN) ../src/macros2.lsp macros2.lsp

defs1.lsp : ../src/defs1.lsp
	-$(LN) ../src/defs1.lsp defs1.lsp

places.lsp : ../src/places.lsp
	-$(LN) ../src/places.lsp places.lsp

floatpri.lsp : ../src/floatpri.lsp
	-$(LN) ../src/floatpri.lsp floatpri.lsp

type.lsp : ../src/type.lsp
	-$(LN) ../src/type.lsp type.lsp

defstruc.lsp : ../src/defstruc.lsp
	-$(LN) ../src/defstruc.lsp defstruc.lsp

format.lsp : ../src/format.lsp
	-$(LN) ../src/format.lsp format.lsp

user1.lsp : ../src/user1.lsp
	-$(LN) ../src/user1.lsp user1.lsp

user2.lsp : ../src/user2.lsp
	-$(LN) ../src/user2.lsp user2.lsp

trace.lsp : ../src/trace.lsp
	-$(LN) ../src/trace.lsp trace.lsp

macros3.lsp : ../src/macros3.lsp
	-$(LN) ../src/macros3.lsp macros3.lsp

config.lsp : ../src/cfgathd.lsp
	$(CP) ../src/cfgathd.lsp config.lsp

compiler.lsp : ../src/compiler.lsp
	-$(LN) ../src/compiler.lsp compiler.lsp

rexx.lsp : ../src/rexx.lsp
	-$(LN) ../src/rexx.lsp rexx.lsp

editor.lsp : ../src/editor.lsp
	-$(LN) ../src/editor.lsp editor.lsp

init.fas : init.lsp
	clisp -M cross.mem -q -x "(cross:compile-file \"init.lsp\")"

defseq.fas : defseq.lsp
	clisp -M cross.mem -q -x "(cross:compile-file \"defseq.lsp\")"

backquot.fas : backquot.lsp
	clisp -M cross.mem -q -x "(cross:compile-file \"backquot.lsp\")"

defmacro.fas : defmacro.lsp
	clisp -M cross.mem -q -x "(cross:compile-file \"defmacro.lsp\")"

macros1.fas : macros1.lsp
	clisp -M cross.mem -q -x "(cross:compile-file \"macros1.lsp\")"

macros2.fas : macros2.lsp
	clisp -M cross.mem -q -x "(cross:compile-file \"macros2.lsp\")"

defs1.fas : defs1.lsp
	clisp -M cross.mem -q -x "(cross:compile-file \"defs1.lsp\")"

places.fas : places.lsp
	clisp -M cross.mem -q -x "(cross:compile-file \"places.lsp\")"

floatpri.fas : floatpri.lsp
	clisp -M cross.mem -q -x "(cross:compile-file \"floatpri.lsp\")"

type.fas : type.lsp
	clisp -M cross.mem -q -x "(cross:compile-file \"type.lsp\")"

defstruc.fas : defstruc.lsp
	clisp -M cross.mem -q -x "(cross:compile-file \"defstruc.lsp\")"

format.fas : format.lsp
	clisp -M cross.mem -q -x "(cross:compile-file \"format.lsp\")"

user1.fas : user1.lsp
	clisp -M cross.mem -q -x "(cross:compile-file \"user1.lsp\")"

user2.fas : user2.lsp
	clisp -M cross.mem -q -x "(cross:compile-file \"user2.lsp\")"

trace.fas : trace.lsp
	clisp -M cross.mem -q -x "(cross:compile-file \"trace.lsp\")"

macros3.fas : macros3.lsp
	clisp -M cross.mem -q -x "(cross:compile-file \"macros3.lsp\")"

config.fas : config.lsp
	clisp -M cross.mem -q -x "(cross:compile-file \"config.lsp\")"

compiler.fas : compiler.lsp
	clisp -M cross.mem -q -x "(cross:compile-file \"compiler.lsp\")"

rexx.fas : rexx.lsp
	clisp -M cross.mem -q -x "(cross:compile-file \"rexx.lsp\")"

editor.fas : editor.lsp
	clisp -M cross.mem -q -x "(cross:compile-file \"editor.lsp\")"


clisp.h : lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c atari.c
	(($(XCPP) $(XCFLAGS) -P lispbibl.c | grep -v "^ *$$") ; ($(XCPP) $(XCFLAGS) -P -dM lispbibl.c | sort) ) > clisp.h


manual : ANNOUNCE COPYRIGHT GNU-GPL SUMMARY README clisp.1 impnotes.txt

manualx : manual clisp.man

ANNOUNCE : ../ANNOUNCE
	-$(LN) ../ANNOUNCE ANNOUNCE

COPYRIGHT : ../COPYRIGHT
	-$(LN) ../COPYRIGHT COPYRIGHT

GNU-GPL : ../GNU-GPL
	-$(LN) ../GNU-GPL GNU-GPL

SUMMARY : ../SUMMARY
	-$(LN) ../SUMMARY SUMMARY

README : ../src/_README clisp.h
	$(TXT2C) < ../src/_README > txt.c
	$(CC) $(CFLAGS) txt.c -o txt
	./txt > README
	$(RM) txt.c
	$(RM) txt.i
	$(RM) txt

clisp.1 : ../src/_clisp.1 clisp.h
	$(TXT2C) < ../src/_clisp.1 > txt.c
	$(CC) $(CFLAGS) txt.c -o txt
	./txt | grep -v '^ *$$' > clisp.1
	$(RM) txt.c
	$(RM) txt.i
	$(RM) txt

impnotes.txt : ../src/_impnotes.txt clisp.h
	$(TXT2C) < ../src/_impnotes.txt > txt.c
	$(CC) $(CFLAGS) txt.c -o txt
	./txt > impnotes.txt
	$(RM) txt.c
	$(RM) txt.i
	$(RM) txt

clisp.man : clisp.1
	$(ROFF_MAN) clisp.1 > clisp.man

clisp.dvi : clisp.1
	$(ROFF_DVI) clisp.1 > clisp.dvi


# Choose one of the packers:

# Standard Unix packer. Requires GNU tar.
PACK = tar
PACKOPT = cvfhz
PACKEXT = .tar.Z

# The one with the best performance.
#PACK = lha
#PACKOPT = a
#PACKEXT = .lzh

# Popular DOS packer.
#PACK = zip
#PACKOPT = -r
#PACKEXT = .zip

# Popular Atari packer.
#PACK = zoo
#PACKOPT = -add
#PACKEXT = .zoo

distrib : force all lisp.a manualx libnoreadline.a libreadline.a
	$(RM) /tmp/clisp$(PACKEXT)
	ln compiled.mem lispinit.mem
	$(PACK) $(PACKOPT) /tmp/clisp$(PACKEXT) ANNOUNCE COPYRIGHT GNU-GPL SUMMARY README clisp.1 clisp.man impnotes.txt lisp.a $(LSPFILES) $(FASFILES) lispinit.mem libnoreadline.a libreadline.a
	$(RM) lispinit.mem


# clean0 is harmless: removes only superfluous things: temporary files.
clean0 : force
	-$(RM) core ansidecl.c ../src/lisparit0.tmp txt.c txt.i txt lispinit.mem

# clean1 removes everything that becomes obsolete once lisp.run is recompiled
# without changing the bytecode format and the tables in
# constobj.d, constsym.d, subr.d, fsubr.d, pseudofun.d.
clean1 : clean0
	-$(RM) clisp.h *.i *.s *.o *.a lisp.prg stage/* suite/*
	-rmdir stage
	-rmdir suite
	-$(RM) README clisp.1 impnotes.txt

# clean2 removes everything that becomes obsolete once lisp.run is recompiled
# without changing the bytecode format.
clean2 : clean1
	-$(RM) interpreted.mem compiled.mem compiled2.mem

# clean3 removes everything that becomes obsolete once lisp.run is recompiled.
# It leaves everything generated by "make allc".
clean3 : clean2
	-$(RM) $(FASFILES) *.lib

# clean4 removes everything that becomes obsolete
# when switching to a new version of the C compiler.
# It leaves everything generated by "make init".
clean4 : clean3
	-$(RM) $(CFILES)

# clean5 even undoes "make init".
clean5 : clean4
	-$(RM) $(DFILES) $(LSPFILES) COPYRIGHT
	-$(RM) comment5 ansidecl ccpaux deelif deerror traddecl mergestrings txt2c
	-$(RM) generrors errors.c

# clean6 lets us go back to "makemake > makefile".
clean6 : clean5
	-$(RM) makefile

# clean7 lets us go back to "target".
clean7 : clean6
	-$(RM) config.status machine.h unixconf.h makemake
	-$(RM) readline.tar.Z
	cd readline ; make clean

# clean8 moreover cleans up the SRCDIR.
clean8 : clean7
	-$(RM) ../src/lisparit0.d

# The normal "start over" command:
clean : clean4

# Make "clear for distribution":
distclean : clean7

# Remove everything that can be generated otherwise:
realclean : clean8


force:

