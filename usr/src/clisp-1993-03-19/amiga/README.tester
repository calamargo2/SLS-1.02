Thanks for becoming an beta tester of CLISP!

This archive contains the Amiga version of CLISP, as of beginning of
March 1993. Please see files clisp.man and README too.

This version of lisp.run has been compiled with a 68000 in mind,
meaning that:

o It assumes a 16MB address space.

o It doesn't optimize or use 68020 or higher instructions.

o But it clears the upper 8 bits of a 32bit address before putting
them on the address bus, thus not causing MMU equipped Amigas running
Enforcer etc. to complain.

o It uses the MEMF_24BITDMA flag to AllocMem() to ensure that it does
not get memory outside the 16MB address range. DMA-able memory is a bit
too hard a requirement, but there are no other flags.

These issues will hopefully be addressed in a later version.  We
hope to expand the possible address space to 0x07FFFFFF which should
satisfy A3000 and A4000 users (if they do not run GigaMem which is
told to use addresses between 0x20000000 and 0x60000000. No solution
for that).

Thus this version of CLISP should run on an A3000/A4000 only with
NoFastMem on (sorry for that), but as soon as it has been started
you can kill NoFastMem. You can also patch the executable to load CODE,
DATA and BSS hunks into CHIP memory.

; Note: CLISP allocates one big memory chunk at startup and then
; never again, so after CLISP is running, you may safely turn fast
; memory on again for other programs.
Obsolete! Now CLISP dynamically allocates small memory chunks as needed.

Further notes:

; o If you intend to run MungWall for testing, use the option -s 0 and
; set a big stack size (see clisp.man), because of a known bug where
; CLISP frees the memory in which sp still resides and then exists. This
; will be fixed in the next version.
This bug is fixed. The -s 0 option is no longer available. CLISP now always
allocates its own stack and should not cause MungWall or Enforcer hits.

o (SETQ *PRINT-PRETTY* T) is set for faster output, otherwise most screen
output will be one character at a time, causing a lot of DOS packets
traffic to the console and making it really slow.

o Workbench support code seems to be somewhat broken.

o I'd like reports on bugs of any kind that you might find.

Further notes on ARexx:

o I'm wondering if I should rename REXX-DO-COMMAND and others to shorter
names like REXX-DO because they also allow to call ARexx functions.
(Pack the function and arguments into a simple-vector.)

o I'm wondering if it would be useful to use the :HOST keyword to be
able to send an ARexx message to an arbitrary host. Currently REXX is
used when :HOST is NIL, AREXX otherwise. Your suggestions?
:HOST has been renamed to :ASYNC now.

; o When you call an ARexx function, the argument (an array) supplied is
; modified! To be more precise, a zero is added at the end of each of
; the strings in the array.
Obsolete! This bug has gone.

o If you start (REXX-LOOP), the only exit is the exit-loop.cl script.

Enjoy and send me all sorts of comments, bug reports and suggestions.

 	Joerg.
hoehle@inf-wiss.ivp.uni-konstanz.de
