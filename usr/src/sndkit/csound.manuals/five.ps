%!PS-Adobe-2.1
%%Creator: groff version 0.3.1
%%DocumentFonts: NewCenturySchlbk-Italic NewCenturySchlbk-Bold
%%+ NewCenturySchlbk-Roman
%%DocumentSuppliedFonts:
%%DocumentNeededFonts: NewCenturySchlbk-Italic NewCenturySchlbk-Bold
%%+ NewCenturySchlbk-Roman
%%Pages: 7
%%EndComments
/grops 90 dict def grops begin
/SC 32 def

/A /show load def
/B { 0 SC 3 -1 roll widthshow } bind def
/C { 0 exch ashow } bind def
/D { 0 exch 0 SC 5 2 roll awidthshow } bind def
/E { 0 rmoveto show } bind def
/F { 0 rmoveto 0 SC 3 -1 roll widthshow } bind def
/G { 0 rmoveto 0 exch ashow } bind def
/H { 0 rmoveto 0 exch 0 SC 5 2 roll awidthshow } bind def
/I { 0 exch rmoveto show } bind def
/J { 0 exch rmoveto 0 SC 3 -1 roll widthshow } bind def
/K { 0 exch rmoveto 0 exch ashow } bind def
/L { 0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow } bind def
/M { rmoveto show } bind def
/N { rmoveto 0 SC 3 -1 roll widthshow } bind def
/O { rmoveto 0 exch ashow } bind def
/P { rmoveto 0 exch 0 SC 5 2 roll awidthshow } bind def
/Q { moveto show } bind def 
/R { moveto 0 SC 3 -1 roll widthshow } bind def
/S { moveto 0 exch ashow } bind def
/T { moveto 0 exch 0 SC 5 2 roll awidthshow } bind def

% name size font SF -

/SF {
	findfont exch
	[ exch dup 0 exch 0 exch neg 0 0 ] makefont
	dup setfont
	[ exch /setfont load ] cvx def
} bind def

% name a c d font MF

/MF {
	findfont
	[ 5 2 roll
	0 3 1 roll % b
	neg 0 0 ] makefont
	dup setfont
	[ exch /setfont load ] cvx def
} bind def

	
% BP -

/BP {
	/level0 save def
	1 setlinecap
	1 setlinejoin
	72 RES div dup scale
	LS {
		90 rotate
	} {
		0 PL translate
	} ifelse
	1 -1 scale
} bind def

/EP {
	level0 restore
	showpage
} bind def


% centerx centery radius startangle endangle DA -

/DA {
	newpath arcn stroke
} bind def

% endx endy startx starty DL -
% we round the endpoints of the line, so that parallel horizontal
% and vertical lines will appear even

/DL {
	transform round exch round exch itransform
	moveto
	transform round exch round exch itransform
	lineto stroke
} bind def

% centerx centery radius DC -

/DC {
	newpath 0 360 arc closepath
} bind def


/TM matrix def

%  width height centerx centery DE -

/DE {
	TM currentmatrix pop
	translate scale newpath 0 0 .5 0 360 arc closepath
	TM setmatrix
} bind def

% these are for splines

/RC /rcurveto load def
/RL /rlineto load def
/ST /stroke load def
/MT /moveto load def
/CL /closepath load def

% fill the last path

% amount FL -

/FL {
	setgray fill 0 setgray
} bind def

% equivalent to 0.0 FL

/BL /fill load def

/LW /setlinewidth load def
% new_font_name encoding_vector old_font_name RE -

/RE {
	findfont
	dup maxlength dict begin
	{
		1 index /FID ne { def } { pop pop } ifelse
	} forall
	/Encoding exch def
	dup /FontName exch def
	currentdict end definefont pop
} bind def

/BUF 256 string def

% scale hpos vpos EXEC -
% this reads the next line and executes it in a safe environment

/EXEC {
	gsave moveto dup scale
	currentfile BUF readline {
		dup /STR exch def
		cvx stopped {
			clear
			initgraphics
			72 20 moveto	
			/Times-Roman findfont 8 scalefont setfont
			(Execution of `) show
			STR show
			(' failed.) show
		} {
			clear
		} ifelse
	} if
	grestore
} bind def

% llx lly newwid wid newht ht newllx newlly -

/PICTURE {
	translate
	div 3 1 roll div exch scale
	neg exch neg exch translate
} bind def
end
%%EndProlog
%%BeginSetup
grops begin/#copies 1 def/RES 72 def/PL 792 def/LS false def
%%IncludeFont: NewCenturySchlbk-Italic
%%IncludeFont: NewCenturySchlbk-Bold
%%IncludeFont: NewCenturySchlbk-Roman
/ENC0[/asciicircum/asciitilde/Scaron/Zcaron/scaron/zcaron/Ydieresis/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/space/exclam/quotedbl
/numbersign/dollar/percent/ampersand/quoteright/parenleft/parenright/asterisk
/plus/comma/hyphen/period/slash/zero/one/two/three/four/five/six/seven/eight
/nine/colon/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M
/N/O/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z
/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl/endash
/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut/dotaccent/breve
/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash/quotedblbase/OE/Lslash
/.notdef/exclamdown/cent/sterling/currency/yen/brokenbar/section/dieresis
/copyright/ordfeminine/guilsinglleft/logicalnot/minus/registered/macron/degree
/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth
/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash/Ugrave
/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave/aacute/acircumflex
/atilde/adieresis/aring/ae/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave
/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute/ocircumflex/otilde
/odieresis/divide/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn
/ydieresis]def/NewCenturySchlbk-Italic@0 ENC0/NewCenturySchlbk-Italic RE
/NewCenturySchlbk-Bold@0 ENC0/NewCenturySchlbk-Bold RE/NewCenturySchlbk-Roman@0
ENC0/NewCenturySchlbk-Roman RE
%%EndSetup
%%Page: 63 1
BP/F0 10/NewCenturySchlbk-Roman@0 SF 531.1(-- --)0 4 R 2.78(-6)294.33 52 S 2.78
(3-)306 52 S/F1 12/NewCenturySchlbk-Bold@0 SF(5. CSCORE)271.386 123 Q/F2 10
/NewCenturySchlbk-Bold@0 SF(Cscore)97 195.6 Q F0 .212
(is a program for generating and manipulating numeric score \214les.)2.993 F
.212(It comprises a num-)5.772 F 1.497(ber of)72 207.6 R/F3 10
/NewCenturySchlbk-Italic@0 SF(function)4.277 E F0 1.498
(subprograms, called into operation by a user)4.277 F(-written)-.18 E F3(main)
4.278 E F0 4.278(program. The)4.278 F F3(function)4.278 E F0 2.009
(programs augment the)72 219.6 R F2(C)4.789 E F0 2.008
(language library functions; they can optionally read)4.789 F F3 2.008
(standard numeric)4.788 F F0 .193(score \214les, can massage and expand the da\
ta in various ways, then write the data out as a new score)72 231.6 R
(\214le to be read by a)72 243.6 Q F2(Csound)2.78 E F0(orchestra.)2.78 E .379
(The user)97 259.2 R(-written)-.18 E F3(main)3.159 E F0 .379
(program is also in)3.159 F F2(C)3.158 E F0 5.938(.I)C 3.158(ti)313.94 259.2 S
3.158(sn)324.138 259.2 S .378(ot essential to know the)338.036 259.2 R F2(C)
3.158 E F0 .378(language well to)3.158 F .555(write a main program, since the \
function calls have a simple syntax, and are powerful enough to do)72 271.2 R
(most of the complicated work.)72 283.2 Q(Additional power can come from)5.56 E
F2(C)2.78 E F0(later as the need arises.)2.78 E F2
(Events, Lists, and Operations)72 307.2 Q F0(An)97 322.8 Q F3(event)2.946 E F0
(in)2.946 E F2(Cscore)2.946 E F0 .165(is equivalent to one statement of a)2.946
F F3 .165(standard numeric score)2.945 F F0 5.725(.I)C 2.945(ti)474.695 322.8 S
2.945(se)484.68 322.8 S .165(ither cre-)497.255 322.8 R .334
(ated or read in from an existing score \214le.)72 334.8 R .335
(An event is comprised of an)5.894 F F3(opcode)3.115 E F0 .335(and an array of)
3.115 F F3(p\214eld)3.115 E F0(values stored somewhere in memory)72 346.8 Q
5.56(.S)-1.11 G(torage is organized by the following structure:)253.87 346.8 Q
(struct event {)132 364.8 Q(char op;)175.2 376.8 Q(/* opcode */)304.8 376.8 Q
(char tnum;)175.2 388.8 Q(short pcnt;)175.2 400.8 Q(\215oat p[PMAX+1];)175.2
412.8 Q(/* p\214elds */)304.8 412.8 Q(};)132 424.8 Q .361(Any function subprog\
ram that creates, reads, or copies an event function will return a)72 442.8 R
F3(pointer)3.14 E F0 .36(to the)3.14 F .475
(storage structure holding the event data.)72 454.8 R .475
(The event pointer can be used to access any component of)6.035 F .076
(the structure, in the form of)72 466.8 R F3(e->op)2.855 E F0(or)2.855 E F3
(e->p[n])2.855 E F0 5.635(.E)C .075
(ach newly stored event will give rise to a new pointer)291.81 466.8 R(,)-.74 E
.624(and a sequence of new events will generate a sequence of distinct pointer\
s that must themselves be)72 478.8 R(stored away)72 490.8 Q 5.56(.G)-1.11 G
(roups of event pointers are stored in a)142.76 490.8 Q F3(list)2.78 E F0 2.78
(,w)C(hich has its own structure:)349.06 490.8 Q(struct evlist {)132 508.8 Q
(int nslots;)175.2 520.8 Q(/* size of this list */)304.8 520.8 Q
(struct event *e[1];)175.2 532.8 Q(/* list of event pointers */)304.8 532.8 Q
(};)132 544.8 Q .381(Any function that creates or modi\214es a)72 562.8 R F3
(list)3.161 E F0 .381(will return a)3.161 F F3(pointer)3.16 E F0 .38
(to the new list.)3.16 F .38(The list pointer can)5.94 F .282
(be used to access any of its component event pointers, in the form of)72 574.8
R F3(a->e[n])3.062 E F0 5.842(.E)C .282(vent pointers and list)440.254 574.8 R
(pointers are thus primary tools for manipulating the data of a score \214le.)
72 586.8 Q F3(Pointers)97 602.4 Q F0(and)4.12 E F3 1.34(lists of pointers)4.12
F F0 1.339(can be copied and reordered without modifying the data values)4.119
F .142(they refer to.)72 614.4 R .143(This means that notes and phrases can be\
 copied and manipulated from a high level of)5.702 F 3.274
(control. Alternatively)72 626.4 R 3.274(,t)-1.11 G .494(he data within an)
182.998 626.4 R F3(event)3.274 E F0(or)3.274 E F3 .494(group of events)3.274 F
F0 .494(can be modi\214ed without changing)3.274 F 1.245
(the event or list pointers.)72 638.4 R F2(Cscore)6.806 E F0 1.246
(provides a library of programming)4.026 F F3(methods)4.026 E F0(or)4.026 E F3
1.246(function subpro-)4.026 F(grams)72 650.4 Q F0
(by which scores can be created and manipulated in this way)2.78 E(.)-1.11 E
(In the following summary of)97 666 Q F2(Cscore)2.78 E F0
(function calls, some simple naming conventions are used:)2.78 E(the symbols)
132 684 Q F3(e, f)2.78 E F0(are pointers to events \(notes\);)2.78 E
(the symbols)132 696 Q F3(a, b)2.78 E F0
(are pointers to lists\(arrays\) of such events;)2.78 E(the letters)132 708 Q
F3(ev)2.78 E F0(at the end of a function name signify operation on an)2.78 E F3
(event)2.78 E F0(;)A(the letter)132 720 Q F3(l)2.78 E F0
(at the start of a function name signi\214es operation on a)2.78 E F3(list)2.78
E F0(.)A EP
%%Page: 64 2
BP/F0 10/NewCenturySchlbk-Roman@0 SF 531.1(-- --)0 4 R 2.78(-6)294.33 52 S 2.78
(4-)306 52 S(calling syntax)140.34 84 Q(description)269.94 84 Q 2.78(e=c)132
108 S 60.95(reatev\(n\); create)153.06 108 R 2.78(ab)2.78 G
(lank event with n p\214elds)306.61 108 Q 2.78(e=d)132 120 S 60.2
(efev\("..."\); de\214nes)154.36 120 R
(an event as per the character string ...)2.78 E 2.78(e=c)132 132 S 66.51
(opyev\(f\); make)153.06 132 R 2.78(an)2.78 G(ew copy of event f)304.21 132 Q
2.78(e=g)132 144 S 76.13(etev\(\); read)153.99 144 R
(the next event in the score input \214le)2.78 E 86.27(putev\(e\); write)132
156 R(event e to the score output \214le)2.78 E 72.56(putstr\("..."\); write)
132 168 R(the character string ... to score output)2.78 E 2.78(a=l)132 192 S
67.61(creat\(n\); create)152.33 192 R(an empty event list with n slots)2.78 E
2.78(a=l)132 204 S 56.3(appev\(a,e\); append)152.33 204 R(event e to list a)
2.78 E 2.78(n=l)132 216 S 65.39(count\(a\); count)152.88 216 R
(the events now in list a)2.78 E 2.78(a=l)132 228 S 70.94(copy\(b\); copy)
152.33 228 R(the list b \(but not the events\))2.78 E 2.78(a=l)132 240 S 60.57
(copyev\(b\); copy)152.33 240 R(the events of b, making a new list)2.78 E 2.78
(a=l)132 252 S 82.79(get\(\); read)152.33 252 R
(events from score input \(to next s or e\))2.78 E 92.93(lput\(a\); write)132
264 R(the events of list a to score output)2.78 E 2.78(a=l)132 276 S 72.79
(sepf\(b\); separate)152.33 276 R(the f statements from list b into list a)2.78
E 2.78(a=l)132 288 S 69.26(cat\(a,b\); concatenate)152.33 288 R
(\(append\) the list b onto the list a)2.78 E 90.71(lsort\(a\); sort)132 300 R
(the list a into chronological order by p[2])2.78 E 2.78(a=l)132 312 S 53.33
(xins\(b,"..."\); extract)152.33 312 R
(notes of instruments ... \(no new events\))2.78 E 2.78(a=l)132 324 S 23.71
(xtimev\(b,from,to\); extract)152.33 324 R
(notes of time-span, creating new events)2.78 E 89.42(relev\(e\); release)132
348 R(the space of event e)2.78 E 96.08(lrel\(a\); release)132 360 R
(the space of list a \(but not events\))2.78 E 85.71(lrelev\(a\); release)132
372 R(the events of list a, and the list space)2.78 E/F1 10
/NewCenturySchlbk-Bold@0 SF -.55(Wr)72 402 S(iting a Main program.).55 E F0
(The general format for a main program is:)97 417.6 Q
(#include <csound/cscore.h>)132 435.6 Q(main\(\))132 447.6 Q({)132 459.6 Q
(/* V)175.2 471.6 Q(ARIABLE DECLARA)-1.11 E(TIONS */)-.55 E(/* PROGRAM BODY */)
175.2 495.6 Q(})132 507.6 Q(The)72 525.6 Q/F2 10/NewCenturySchlbk-Italic@0 SF
(include)2.863 E F0 .083
(statement will de\214ne the event and list structures for the program.)2.863 F
.082(The following C pro-)5.642 F .957(gram will read from a standard numeric \
score, up to \(but not including\) the \214rst)72 537.6 R F1(s)3.738 E F0(or)
3.738 E F1(e)3.738 E F0(statement,)3.738 E
(then write that data \(unaltered\) as output.)72 549.6 Q
(#include <csound/cscore.h>)132 567.6 Q(main\(\))132 579.6 Q({)132 591.6 Q
(struct evlist *a;)175.2 603.6 Q(/* a is allowed to point to an event)304.8
603.6 Q F2(list)2.78 E F0(*/)2.78 E 2.78(a=l)175.2 627.6 S 82.79(get\(\); /*)
195.53 627.6 R(read events in, return the list pointer */)2.78 E 92.93
(lput\(a\); /*)175.2 639.6 R(write these events out \(unchanged\) */)2.78 E
75.9(putstr\("e"\); /*)175.2 651.6 R(write the string e to output */)2.78 E(})
132 663.6 Q .47(After execution of)97 685.2 R F2(lget\(\))3.249 E F0 3.249(,t)C
.469(he variable)216.267 685.2 R F2(a)3.249 E F0 .469
(points to a list of event addresses, each of which points)4.915 F .03
(to a stored event.)72 697.2 R 1.13 -.55(We h)5.59 H .03
(ave used that same pointer to enable another list function \().55 F F2(lput)A
F0 2.81(\)t)C 2.81(oa)483.27 697.2 S .03(ccess and)496.64 697.2 R .398
(write out all of the events that were read.)72 709.2 R .397
(If we now de\214ne another symbol)5.957 F F2(e)3.177 E F0 .397(to be an)4.843
F F2(event)3.177 E F0(pointer)3.177 E(,)-.74 E(then the statement)72 721.2 Q EP
%%Page: 65 3
BP/F0 10/NewCenturySchlbk-Roman@0 SF 531.1(-- --)0 4 R 2.78(-6)294.33 52 S 2.78
(5-)306 52 S 2.78(e=a)132 84 S(->e[4];)154.18 84 Q .219(will set it to the)72
102 R/F1 10/NewCenturySchlbk-Italic@0 SF(contents)2.999 E F0 .219
(of the 4th slot in the evlist structure.)2.999 F .22
(The contents is a pointer to an event,)5.78 F .395
(which is itself comprised of an array of parameter \214eld values.)72 114 R
.394(Thus the term e->p[5] will mean the)5.955 F .358
(value of parameter \214eld 5 of the 4th event in the evlist denoted by)72 126
R F1(a.)3.139 E F0 .359(The program below will multi-)4.805 F
(ply the value of that p\214eld by 2 before writing it out.)72 138 Q
(#include <csound/cscore.h>)132 156 Q(main\(\))132 168 Q({)132 180 Q
(struct event)175.2 192 Q 52.93(*e; /*)5.56 F 2.78(ap)2.78 G
(ointer to an event */)329.44 192 Q(struct evlist *a;)175.2 204 Q 2.78(a=l)
175.2 228 S 82.79(get\(\); /*)195.53 228 R(read a score as a list of events)
2.78 E(*/)477.6 228 Q 2.78(e=a)175.2 240 S 75.25(->e[4]; /*)197.38 240 R
(point to event 4 in event list)2.78 E F1(a)2.78 E F0(*/)464.84 240 Q
(e->p[5] *= 2;)175.2 252 Q(/* \214nd p\214eld 5 and multiply its value by 2 */)
304.8 252 Q 92.93(lput\(a\); /*)175.2 264 R(write out the list of events)2.78 E
(*/)520.8 264 Q 75.9(putstr\("e"\); /*)175.2 276 R(add a "score end" statement)
2.78 E(*/)520.8 276 Q(})132 288 Q
(Now consider the following score, in which p[5] contains frequency in cps.)72
306 Q 2.78(f102)132 324 S(57 10 1)160.35 324 Q 2.78(f202)132 336 S
(57 7 0 300 1 212 .8)160.35 336 Q 2.78(i11304)132 348 S(40 10000)176.85 348 Q
2.78(i14302)132 360 S(56 10000)176.85 360 Q 2.78(i17308)132 372 S(80 10000)
176.85 372 Q(e)132 384 Q(If this score were given to the preceding main progra\
m, the resulting output would look like this:)72 402 Q 2.78(f102)132 420 S
(57 10 1)160.35 420 Q 2.78(f202)132 432 S(57 7 0 300 1 212 .8)160.35 432 Q 2.78
(i11304)132 444 S(40 10000)176.85 444 Q 2.78(i14305)132 456 S(12 10000)176.85
456 Q 2.78(;p)304.8 456 S([5] has become 512 instead of 256.)316.1 456 Q 2.78
(i17308)132 468 S(80 10000)176.85 468 Q(e)132 480 Q 1.471
(Note that the 4th event is in fact the second note of the score.)72 498 R
1.471(So far we have not distinguished)7.031 F .227
(between notes and function table setup in a numeric score.)72 510 R .228
(Both can be classed as events.)5.788 F .228(Also note)5.788 F 1.25(that our)72
522 R F1(4th)4.03 E F0 1.249(event has been stored in e[4] of the structure.)
4.03 F 1.249(For compatibility with)6.809 F/F2 10/NewCenturySchlbk-Bold@0 SF
(Csound)4.029 E F0(p\214eld)4.029 E .876(notation, we will ignore p[0] and e[0\
] of the event and list structures, storing p1 in p[1], event 1 in)72 534 R
(e[1], etc.)72 546 Q(The)5.56 E F2(Cscore)2.78 E F0
(functions all adopt this convention.)2.78 E .648
(As an extension to the above, we could decide to use)97 561.6 R F1(a)3.427 E
F0(and)5.093 E F1(e)3.427 E F0 .647(to examine each of the events in)5.093 F
.359(the list.)72 573.6 R .359(Note that)5.919 F F1(e)3.139 E F0 .359
(has not preserved the numeral 4, but the contents of that slot.)4.805 F 2.2
-.92(To i)5.92 H .36(nspect p5 of).92 F
(the previous listed event we need only rede\214ne)72 585.6 Q F1(e)2.78 E F0
(with the assignment)4.446 E 2.78(e=a)132 603.6 S(->e[3];)154.18 603.6 Q
(More generally)72 621.6 Q 2.78(,i)-1.11 G 2.78(fw)149.41 621.6 S 2.78(ed)163.3
621.6 S(eclare a new variable)176.82 621.6 Q F1(f)2.78 E F0(to be a)4.446 E F1
(pointer to a pointer)2.78 E F0(to an event, the statement)2.78 E 2.78(f=&)132
639.6 S(a->e[4];)155.1 639.6 Q .346(will set)72 657.6 R F1(f)3.126 E F0 .345
(to the address of the fourth event in the event list)4.791 F F1(a,)3.125 E F0
(and)4.791 E F1(*f)3.125 E F0 .345(will signify the)4.791 F F1(contents)3.125 E
F0 .345(of the)3.125 F(slot, namely the event pointer itself.)72 669.6 Q
(The expression)5.56 E(\(*f\)->p[5],)132 687.6 Q .493
(like e->p[5], signi\214es the \214fth p\214eld of the selected event.)72 705.6
R(However)6.053 E 3.273(,w)-.74 G 3.273(ec)400.542 705.6 S .493
(an advance to the next slot)413.255 705.6 R
(in the evlist by advancing the pointer)72 717.6 Q F1(f)2.78 E F0 5.56(.I)C
2.78(nCt)263.32 717.6 S(his is denoted by)286.1 717.6 Q F1(f++.)2.78 E EP
%%Page: 66 4
BP/F0 10/NewCenturySchlbk-Roman@0 SF 531.1(-- --)0 4 R 2.78(-6)294.33 52 S 2.78
(6-)306 52 S .009(In the following program we will use the same input score. T\
his time we will separate the ftable)97 84 R .82
(statements from the note statements.)72 96 R 1.92 -.55(We w)6.38 H .821
(ill next write the three note-events stored in the list).55 F/F1 10
/NewCenturySchlbk-Italic@0 SF(a)3.601 E F0(,)A 1.471(then create a second scor\
e section consisting of the original pitch set and a transposed version of)72
108 R 2.78(itself. This)72 120 R(will bring about an octave doubling.)2.78 E
.011(By pointing the variable)97 135.6 R F1(f)2.791 E F0 .012
(to the \214rst note-event and incrementing)4.458 F F1(f)2.792 E F0 .012
(inside a)4.458 F/F2 10/NewCenturySchlbk-Bold@0 SF(while)2.792 E F0 .012
(block which)2.792 F .544(iterates n times \(the number of events in the list\
\), one statement can be made to act upon the same)72 147.6 R
(p\214eld of each successive event.)72 159.6 Q(#include <csound/cscore.h>)132
177.6 Q(main\(\))132 189.6 Q({)132 201.6 Q(struct event *e,**f;)175.2 213.6 Q
(/* declarations. see pp.8-9 in the */)304.8 213.6 Q(struct evlist *a,*b;)175.2
225.6 Q(/* C language programming manual */)304.8 225.6 Q(int n;)175.2 237.6 Q
2.78(a=l)175.2 261.6 S 82.79(get\(\); /*)195.53 261.6 R
(read score into event list "a" */)2.78 E 2.78(b=l)175.2 273.6 S 72.79
(sepf\(a\); /*)195.53 273.6 R(separate f statements */)2.78 E 92.93
(lput\(b\); /*)175.2 285.6 R(write f statements out to score */)2.78 E 85.71
(lrelev\(b\); /*)175.2 297.6 R(and release the spaces used */)2.78 E 2.78(e=d)
175.2 309.6 S(efev\("t 0 120"\);)197.56 309.6 Q
(/* de\214ne event for tempo statement */)304.8 309.6 Q 86.27(putev\(e\); /*)
175.2 321.6 R(write tempo statement to score */)2.78 E 92.93(lput\(a\); /*)
175.2 333.6 R(write the notes */)2.78 E 76.27(putstr\("s"\); /*)175.2 345.6 R
(section end */)2.78 E 86.27(putev\(e\); /*)175.2 357.6 R
(write tempo statement again */)2.78 E 2.78(b=l)175.2 369.6 S 60.57
(copyev\(a\); /*)195.53 369.6 R(make a copy of the notes in "a" */)2.78 E 2.78
(n=l)175.2 381.6 S 65.39(count\(b\); /*)196.08 381.6 R
(and count the number copied */)2.78 E 2.78(f=&)175.2 393.6 S(a->e[1];)198.3
393.6 Q(while \(n--\))175.2 405.6 Q(/* iterate the following line n times: */)
304.8 405.6 Q(\(*f++\)->p[5] *= .5;)183.54 417.6 Q 5.56(/* transpose)304.8
417.6 R(pitch down one octave */)2.78 E 2.78(a=l)175.2 429.6 S 69.26
(cat\(b,a\); /*)195.53 429.6 R(now add these notes to original pitches */)2.78
E(lput\(a\);)175.2 441.6 Q(putstr\("e"\);)175.2 453.6 Q(})132 465.6 Q
(The output of this program is:)72 483.6 Q 2.78(f102)132 501.6 S(57 10 1)160.35
501.6 Q 2.78(f202)132 513.6 S(57 7 0 300 1 212 .8)160.35 513.6 Q 2.78(t01)132
525.6 S(20)152.57 525.6 Q 2.78(i11304)132 537.6 S(40 10000)176.85 537.6 Q 2.78
(i14302)132 549.6 S(56 10000)176.85 549.6 Q 2.78(i17308)132 561.6 S(80 10000)
176.85 561.6 Q(s)132 573.6 Q 2.78(t01)132 585.6 S(20)152.57 585.6 Q 2.78
(i11304)132 597.6 S(40 10000)176.85 597.6 Q 2.78(i14302)132 609.6 S(56 10000)
176.85 609.6 Q 2.78(i17308)132 621.6 S(80 10000)176.85 621.6 Q 2.78(i11302)132
633.6 S(20 10000)176.85 633.6 Q 2.78(i14301)132 645.6 S(28 10000)176.85 645.6 Q
2.78(i17304)132 657.6 S(40 10000)176.85 657.6 Q(e)132 669.6 Q .728
(Next we extend the above program by using the)97 691.2 R F2(while)3.508 E F0
.728(statement to look at p[5] and p[6].)3.508 F(In)9.069 E .604
(the original score p[6] denotes amplitude.)72 703.2 R 2.444 -.92(To c)6.164 H
.604(reate a diminuendo in the added lower octave, which).92 F
(is independent from the original set of notes, a variable called)72 715.2 Q F1
(dim)2.78 E F0(will be used.)2.78 E(#include <csound/cscore.h>)132 733.2 Q EP
%%Page: 67 5
BP/F0 10/NewCenturySchlbk-Roman@0 SF 531.1(-- --)0 4 R 2.78(-6)294.33 52 S 2.78
(7-)306 52 S(main\(\))132 84 Q({)132 96 Q(struct event *e,**f;)175.2 108 Q
(struct evlist *a,*b;)175.2 120 Q(int n, dim;)175.2 132 Q
(/* declare new variable as integer */)304.8 132 Q 2.78(a=l)175.2 156 S
(get\(\);)195.53 156 Q 2.78(b=l)175.2 168 S(sepf\(a\);)195.53 168 Q(lput\(b\);)
175.2 180 Q(lrelev\(b\);)175.2 192 Q 2.78(e=d)175.2 204 S(efev\("t 0 120"\);)
197.56 204 Q(putev\(e\);)175.2 216 Q(lput\(a\);)175.2 228 Q(putstr\("s"\);)
175.2 240 Q 86.27(putev\(e\); /*)175.2 252 R
(write out another tempo statement */)2.78 E 2.78(b=l)175.2 264 S(copyev\(a\);)
195.53 264 Q 2.78(n=l)175.2 276 S(count\(b\);)196.08 276 Q(dim = 0;)175.2 288 Q
(/* initialize dim to 0 */)304.8 288 Q 2.78(f=&)175.2 300 S(a->e[1];)198.3 300
Q(while \(n--\){)175.2 312 Q(\(*f\)->p[6] -= dim;)189.1 324 Q
(/* subtract current value of dim */)304.8 324 Q(\(*f++\)->p[5] *= .5;)189.1
336 Q(/* transpose, move f to next event */)304.8 336 Q(dim += 2000;)189.1 348
Q(/* increase dim for each note */)304.8 348 Q(})175.2 360 Q 2.78(a=l)175.2 372
S(cat\(b,a\);)195.53 372 Q(lput\(a\);)175.2 384 Q(putstr\("e"\);)175.2 396 Q(})
132 408 Q 2.076(The increment of)97 429.6 R/F1 10/NewCenturySchlbk-Italic@0 SF
(f)4.856 E F0 2.076
(in the above programs has depended on certain precedence rules of)6.522 F/F2
10/NewCenturySchlbk-Bold@0 SF(C.)4.857 E F0 .663(Although this keeps the code \
tight, the practice can be dangerous for beginners.)72 441.6 R .662
(Incrementing may)6.222 F
(alternately be written as a separate statement to make it more clear)72 453.6
Q(.)-.74 E(while \(n--\){)175.2 471.6 Q(\(*f\)->p[6] -= dim;)186.32 483.6 Q
(\(*f\)->p[5] *= .5;)186.32 495.6 Q(dim += 2000;)186.32 507.6 Q(f++;)186.32
519.6 Q(})175.2 531.6 Q
(Using the same input score again, the output from this program is:)72 549.6 Q
2.78(f102)132 567.6 S(57 10 1)160.35 567.6 Q 2.78(f202)132 579.6 S
(57 7 0 300 1 212 .8)160.35 579.6 Q 2.78(t01)132 591.6 S(20)152.57 591.6 Q 2.78
(i11304)132 603.6 S(40 10000)176.85 603.6 Q 2.78(i14302)132 615.6 S(56 10000)
176.85 615.6 Q 2.78(i17308)132 627.6 S(80 10000)176.85 627.6 Q(s)132 639.6 Q
2.78(t01)132 651.6 S(20)152.57 651.6 Q 2.78(i11304)132 663.6 S(40 10000)176.85
663.6 Q 2.78(;T)304.8 663.6 S(hree original notes at)317.03 663.6 Q 2.78
(i14302)132 675.6 S(56 10000)176.85 675.6 Q 2.78(;b)304.8 675.6 S
(eats 1,4 and 7 with no dim.)315.92 675.6 Q 2.78(i17308)132 687.6 S(80 10000)
176.85 687.6 Q 2.78(i11302)132 699.6 S(20 10000)176.85 699.6 Q 2.78(;t)304.8
699.6 S(hree notes transposed down one octave)314.25 699.6 Q 2.78(i14301)132
711.6 S(28 8000)176.85 711.6 Q 2.78(;a)304.8 711.6 S
(lso at beats 1,4 and 7 with dim.)315.92 711.6 Q 2.78(i17304)132 723.6 S
(40 6000)176.85 723.6 Q(e)132 735.6 Q EP
%%Page: 68 6
BP/F0 10/NewCenturySchlbk-Roman@0 SF 531.1(-- --)0 4 R 2.78(-6)294.33 52 S 2.78
(8-)306 52 S .727(In the following program the same three-note sequence will b\
e repeated at various time inter)97 84 R(-)-.18 E 3.87(vals. The)72 96 R 1.09
(starting time of each group is determined by the values of the array)3.87 F/F1
10/NewCenturySchlbk-Italic@0 SF(cue)3.869 E F0 6.649(.T)C 1.089(his time the)
482.442 96 R 1.373
(dim. will occur for each group of notes rather than each note.)72 108 R 1.373
(Note the position of the statement)6.933 F(which increments the variable)72
120 Q F1(dim)2.78 E F0(outside the inner)2.78 E/F2 10/NewCenturySchlbk-Bold@0
SF(while)2.78 E F0(block.)2.78 E(#include <csound/cscore.h>)132 138 Q
(int cue[3]={0,10,17};)132 162 Q(/* declare array of 3 integers */)304.8 162 Q
(main\(\))132 186 Q({)132 198 Q(struct event *e, **f;)175.2 210 Q
(struct evlist *a, *b;)175.2 222 Q(int n, dim, cuecount, holdn;)175.2 234 Q
(/* declare new variables */)3.11 E 2.78(a=l)175.2 258 S(get\(\);)195.53 258 Q
2.78(b=l)175.2 270 S(sepf\(a\);)195.53 270 Q(lput\(b\);)175.2 282 Q
(lrelev\(b\);)175.2 294 Q 2.78(e=d)175.2 306 S(efev\("t 0 120"\);)197.56 306 Q
(putev\(e\);)175.2 318 Q 2.78(n=l)175.2 330 S(count\(a\);)196.08 330 Q
(holdn = n;)175.2 342 Q(/* hold the value of "n" to reset below */)304.8 342 Q
(cuecount = 0;)175.2 354 Q(/* initilize cuecount to "0" */)304.8 354 Q
(dim = 0;)175.2 366 Q(while \(cuecount <= 2\) {)175.2 378 Q
(/* count 3 iterations of inner "while" */)304.8 378 Q 2.78(f=&)186.32 390 S
57.65(a->e[1]; /*)209.42 390 R(reset pointer to \214rst event of list "a" */)
2.78 E 2.78(n=h)186.32 402 S 69.08(oldn; /*)210.16 402 R
(reset value of "n" to original note count */)2.78 E(while \(n--\) {)186.32 414
Q(\(*f\)->p[6] -= dim;)218.4 426 Q(\(*f\)->p[2] += cue[cuecount];)218.4 438 Q
(/* add values of cue */)391.2 438 Q(f++;)218.4 450 Q(})186.32 462 Q
(printf\("%s %d0, "; diagnostic:)186.32 474 Q(cue=", cue[cuecount]\);)5.56 E
(cuecount++;)186.32 486 Q(dim += 2000;)186.32 498 Q(lput\(a\);)186.32 510 Q(})
175.2 522 Q(putstr\("e"\);)175.2 534 Q(})132 546 Q .721(Here the inner)97 579.6
R F2(while)3.501 E F0 .72(block looks at the events of list)3.501 F F1(a)3.5 E
F0 .72(\(the notes\) and the outer)5.166 F F2(while)3.5 E F0(block)3.5 E 2.152
(looks at each repetition of the events of list)72 591.6 R F1(a)4.933 E F0
2.153(\(the pitch group repetitions\).)6.599 F 2.153(This program also)7.713 F
.212(demonstrates a useful trouble-shooting device with the)72 603.6 R F2
(printf)2.992 E F0 .212(function. The semi-colon is \214rst in the)2.992 F .219
(character string to produce a comment statement in the resulting score \214le\
.)72 615.6 R .219(In this case the value of)5.779 F F1(cue)72 627.6 Q F0 .72(i\
s being printed in the output to insure that the program is taking the proper \
array member at)3.5 F .496(the proper time. When output data is wrong or error\
 messages are encountered, the)72 639.6 R F2(printf)3.276 E F0(function)3.276 E
(can help to pinpoint the problem.)72 651.6 Q
(Using the identical input \214le, the C program above will generate:)72 675.6
Q 2.78(f102)132 705.6 S(57 10 1)160.35 705.6 Q 2.78(f202)132 717.6 S
(57 7 0 300 1 212 .8)160.35 717.6 Q 2.78(t01)132 729.6 S(20)152.57 729.6 Q EP
%%Page: 69 7
BP/F0 10/NewCenturySchlbk-Roman@0 SF 531.1(-- --)0 4 R 2.78(-6)294.33 52 S 2.78
(9-)306 52 S 2.78(;d)132 84 S 2.78(iagnostic: cue=)143.3 84 R(0)2.78 E 2.78
(i11304)132 96 S(40 10000)176.85 96 Q 2.78(i14302)132 108 S(56 10000)176.85 108
Q 2.78(i17308)132 120 S(80 10000)176.85 120 Q 2.78(;d)132 144 S 2.78
(iagnostic: cue=)143.3 144 R(10)2.78 E 2.78(i11)132 156 S 2.78(1304)151.28 156
S(40 8000)181.86 156 Q 2.78(i11)132 168 S 2.78(4302)151.83 168 S(56 8000)182.41
168 Q 2.78(i11)132 180 S 2.78(7308)151.83 180 S(80 8000)182.41 180 Q 2.78(;d)
132 204 S 2.78(iagnostic: cue=)143.3 204 R(17)2.78 E 2.78(i12)132 216 S 2.78
(8304)151.83 216 S(40 4000)182.41 216 Q 2.78(i13)132 228 S 2.78(1302)151.83 228
S(56 4000)182.41 228 Q 2.78(i13)132 240 S 2.78(4308)151.83 240 S(80 4000)182.41
240 Q(e)132 252 Q .172(Further development of these scores will lead the compo\
ser to techniques of score manipulation)97 285.6 R .009
(which are similar to serial techniques of composition.)72 297.6 R .01
(Pitch sets may be altered with regard to any of)5.569 F 1.583
(the parameter \214elds.)72 309.6 R 1.583
(The programing allows for transpositions, time warping, pitch retrograding)
7.143 F(and dynamic controls, to name a few)72 321.6 Q(.)-.92 E/F1 10
/NewCenturySchlbk-Bold@0 SF(Compiling a Cscore program)72 357.6 Q F0(A)97 373.2
Q F1(Cscore)2.791 E F0 .011(program named)2.791 F/F2 10
/NewCenturySchlbk-Italic@0 SF(example.c)2.791 E F0 .011
(can be compiled and linked with its library modules by the)2.791 F(command:)72
385.2 Q 2.78($c)132 403.2 S 2.78(ce)144.78 403.2 S(xample.c -lcscore)157 403.2
Q(The resulting executable \214le is called "a.out".)72 421.2 Q
(It is run by typing:)5.56 E 2.78($a)132 439.2 S 138.34(.out \(no)145.9 439.2 R
(input, output printed on the screen\))2.78 E 2.78($a)132 463.2 S
(.out < scorin)145.9 463.2 Q(\(input score named)304.8 463.2 Q F2(scorin)2.78 E
F0 2.78(,o)C(utput on screen\))434.6 463.2 Q 2.78($a)132 487.2 S
(.out < scorin > scorout)145.9 487.2 Q
(\(input as above, output into a \214le\))304.8 487.2 Q 531.1(-- --)0 795 R EP
%%Trailer
end
