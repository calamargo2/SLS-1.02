

VALUE CONVERTERS:

.nf
			\fBftlen\fR(x)	     (init-rate args only)

			\fBint\fR(x)	     (init- or control-rate args only)
			\fBfrac\fR(x)		"		"
			\fBdbamp\fR(x)	"		"
			                                                  
			\fBi\fR(x)	     (control-rate args only)
	
			\fBabs\fR(x)	     (no rate restriction)
			\fBexp\fR(x)		"		"
			\fBlog\fR(x)		"		"
			\fBsqrt\fR(x)		"		"
			\fBsin\fR(x)		"		"
			\fBcos\fR(x)		"		"
			\fBampdb\fR(x)	"		"
.fi
.sp .5
where the argument within the parentheses may be an expression.

Value converters perform arithmetic translation from units of one kind to
units of another.  The result can then be a term in a further expression.

.vs 9
\fBftlen\fR(x)		returns the size (no. of points) of stored function table no. \fIx\fR.

\fBint\fR(x)  		"	"  integer part of \fIx\fR.

\fBfrac\fR(x)		"	"  fractional part of \fIx\fR.

\fBdbamp\fR(x)	"	"  decibel equivalent of the raw amplitude \fIx\fR.

\fBi\fR(x)		"	an Init-type equivalent of the argument, thus
permitting a K-time value
.vs 12
.br
			to be accessed in at init-time or reinit-time, whenever valid.
.vs 9

\fBabs\fR(x)		"	the absolute value of \fIx\fR.

\fBexp\fR(x)		"	\fIe\fR  raised to the \fIx\fRth power.

\fBlog\fR(x)		"	the natural log of \fIx\fR (\fIx\fR positive only).

\fBsqrt\fR(x)		"	"  square root of \fIx\fR  (\fIx\fR non-negative).

\fBsin\fR(x)		"	"  sine of \fIx\fR (\fIx\fR in radians).

\fBcos\fR(x)		"	"  cosine of \fIx\fR (\fIx\fR in radians).

\fBampdb\fR(x)	"	"  amplitude equivalent of the decibel value \fIx\fR.
.vs 12
.br
			Thus 60 db gives 1000, 66 db gives 2000, 72 db gives 4000,
.br
			78 db gives 8000, 84 db gives 16000 and 90 db gives 32000.


Note that for \fBlog\fR, \fBsqrt\fR, and \fBftlen\fR the argument value is
restricted.

Note also that \fBftlen\fR will always return a power-of-2 value, i.e. the
function table guard point (see F statement) is not included.
.bp
