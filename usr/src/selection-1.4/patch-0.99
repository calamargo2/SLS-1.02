*** kernel/chr_drv/Makefile.d	Sun Dec 13 15:54:13 1992
--- kernel/chr_drv/Makefile	Mon Dec 14 21:26:01 1992
***************
*** 10,13 ****
--- 10,16 ----
  #
  
+ # comment out next line to disable selection mechanism
+ SELECTION = -DSELECTION
+ 
  .c.s:
  	$(CC) $(CFLAGS) -S $<
***************
*** 30,37 ****
  
  console.o: console.c
! 	$(CC) $(CFLAGS) -c -o console.o console.c
  
  keyboard.o: keyboard.c
  	$(CC) $(CFLAGS) $(KEYBOARD) -c -o keyboard.o keyboard.c
  
  subdirs: dummy
--- 33,43 ----
  
  console.o: console.c
! 	$(CC) $(CFLAGS) $(SELECTION) -c -o console.o console.c
  
  keyboard.o: keyboard.c
  	$(CC) $(CFLAGS) $(KEYBOARD) -c -o keyboard.o keyboard.c
+ 
+ tty_ioctl.o: tty_ioctl.c
+ 	$(CC) $(CFLAGS) $(SELECTION) -c -o tty_ioctl.o tty_ioctl.c
  
  subdirs: dummy
*** kernel/chr_drv/tty_ioctl.c.d	Tue Dec  1 00:38:36 1992
--- kernel/chr_drv/tty_ioctl.c	Mon Dec 14 21:26:01 1992
***************
*** 21,24 ****
--- 21,29 ----
  extern int kill_pg(int pgrp, int sig, int priv);
  
+ #ifdef SELECTION
+ extern int set_selection(const int arg);
+ extern int paste_selection(struct tty_struct *tty);
+ #endif /* SELECTION */
+ 
  static void flush(struct tty_queue * queue)
  {
***************
*** 383,386 ****
--- 388,397 ----
  				case 1: 
  					return do_get_ps_info(arg);
+ #ifdef SELECTION
+ 				case 2:
+ 					return set_selection(arg);
+ 				case 3:
+ 					return paste_selection(tty);
+ #endif /* SELECTION */
  				default: 
  					return -EINVAL;
*** kernel/chr_drv/console.c.d	Thu Dec  3 23:32:41 1992
--- kernel/chr_drv/console.c	Mon Dec 14 21:26:02 1992
***************
*** 52,55 ****
--- 52,71 ----
  #include "vt_kern.h"
  
+ #ifdef SELECTION
+ #include <linux/ctype.h>
+ 
+ /* Routines for selection control. */
+ int set_selection(const int arg);
+ int paste_selection(struct tty_struct *tty);
+ static void clear_selection(void);
+ 
+ /* Variables for selection control. */
+ #define SEL_BUFFER_SIZE 2048
+ static int sel_cons;
+ static int sel_start = -1;
+ static int sel_end;
+ static char sel_buffer[SEL_BUFFER_SIZE] = { '\0' };
+ #endif /* SELECTION */
+ 
  #define NPAR 16
  
***************
*** 898,901 ****
--- 914,923 ----
  		return;
  	}
+ #ifdef SELECTION
+ 	/* clear the selection as soon as any characters are to be written
+ 	   out on the console holding the selection. */
+ 	if (!EMPTY(&tty->write_q) && currcons == sel_cons)
+ 		clear_selection();
+ #endif /* SELECTION */
  	while (!tty->stopped &&	(c = get_tty_queue(&tty->write_q)) >= 0) {
  		if (state == ESnormal && translate[c]) {
***************
*** 1486,1487 ****
--- 1508,1704 ----
  	return 0;
  }
+ 
+ #ifdef SELECTION
+ /* set reverse video on characters s-e of console with selection. */
+ static void highlight(const int currcons, const int s, const int e)
+ {
+ 	unsigned char *p, *p1, *p2;
+ 
+ 	p1 = (unsigned char *)origin + s + 1;
+ 	p2 = (unsigned char *)origin + e + 1;
+ 	if (p1 > p2)
+ 	{
+ 		p = p1;
+ 		p1 = p2;
+ 		p2 = p;
+ 	}
+ 	for (p = p1; p <= p2; p += 2)
+ 		*p = (*p & 0x88) | ((*p << 4) & 0x70) | ((*p >> 4) & 0x07);
+ }
+ 
+ /* is c in range [a-zA-Z0-9_]? */
+ static inline int inword(const char c) { return (isalnum(c) || c == '_'); }
+ 
+ /* does screen address p correspond to character at LH/RH edge of screen? */
+ static inline int atedge(const int p)
+ {
+ 	return (!(p % video_size_row) || !((p + 2) % video_size_row));
+ }
+ 
+ /* constrain v such that l <= v <= u */
+ static inline short limit(const int v, const int l, const int u)
+ {
+ 	return (v < l) ? l : ((v > u) ? u : v);
+ }
+ 
+ /* set the current selection. Invoked by ioctl(). */
+ int set_selection(const int arg)
+ {
+ 	unsigned short *args, xs, ys, xe, ye;
+ 	int currcons = fg_console;
+ 	int sel_mode, new_sel_start, new_sel_end, spc;
+ 	char *bp, *obp, *spos;
+ 	int i, ps, pe;
+ 	char *off = (char *)origin;
+ 
+ 	args = (unsigned short *)(arg + 1);
+ 	xs = get_fs_word(args++) - 1;
+ 	ys = get_fs_word(args++) - 1;
+ 	xe = get_fs_word(args++) - 1;
+ 	ye = get_fs_word(args++) - 1;
+ 	sel_mode = get_fs_word(args);
+ 
+ 	xs = limit(xs, 0, video_num_columns - 1);
+ 	ys = limit(ys, 0, video_num_lines - 1);
+ 	xe = limit(xe, 0, video_num_columns - 1);
+ 	ye = limit(ye, 0, video_num_lines - 1);
+ 	ps = ys * video_size_row + (xs << 1);
+ 	pe = ye * video_size_row + (xe << 1);
+ 
+ 	if (ps > pe)	/* make sel_start <= sel_end */
+ 	{
+ 		int tmp = ps;
+ 		ps = pe;
+ 		pe = tmp;
+ 	}
+ 
+ 	switch (sel_mode)
+ 	{
+ 		case 0:	/* character-by-character selection */
+ 		default:
+ 			new_sel_start = ps;
+ 			new_sel_end = pe;
+ 			break;
+ 		case 1:	/* word-by-word selection */
+ 			spc = isspace(*(off + ps));
+ 			for (new_sel_start = ps; ; ps -= 2)
+ 			{
+ 				if ((spc && !isspace(*(off + ps))) ||
+ 				    (!spc && !inword(*(off + ps))))
+ 					break;
+ 				new_sel_start = ps;
+ 				if (!(ps % video_size_row))
+ 					break;
+ 			}
+ 			spc = isspace(*(off + pe));
+ 			for (new_sel_end = pe; ; pe += 2)
+ 			{
+ 				if ((spc && !isspace(*(off + pe))) ||
+ 				    (!spc && !inword(*(off + pe))))
+ 					break;
+ 				new_sel_end = pe;
+ 				if (!((pe + 2) % video_size_row))
+ 					break;
+ 			}
+ 			break;
+ 		case 2:	/* line-by-line selection */
+ 			new_sel_start = ps - ps % video_size_row;
+ 			new_sel_end = pe + video_size_row
+ 				    - pe % video_size_row - 2;
+ 			break;
+ 	}
+ 	/* select to end of line if on trailing space */
+ 	if (new_sel_end > new_sel_start &&
+ 		!atedge(new_sel_end) && isspace(*(off + new_sel_end)))
+ 	{
+ 		for (pe = new_sel_end + 2; ; pe += 2)
+ 		{
+ 			if (!isspace(*(off + pe)) || atedge(pe))
+ 				break;
+ 		}
+ 		if (isspace(*(off + pe)))
+ 			new_sel_end = pe;
+ 	}
+ 	if (sel_cons != currcons)
+ 	{
+ 		clear_selection();
+ 		sel_cons = currcons;
+ 	}
+ 	if (sel_start == -1)	/* no current selection */
+ 		highlight(sel_cons, new_sel_start, new_sel_end);
+ 	else if (new_sel_start == sel_start)
+ 	{
+ 		if (new_sel_end == sel_end)	/* no action required */
+ 			return 0;
+ 		else if (new_sel_end > sel_end)	/* extend to right */
+ 			highlight(sel_cons, sel_end + 2, new_sel_end);
+ 		else				/* contract from right */
+ 			highlight(sel_cons, new_sel_end + 2, sel_end);
+ 	}
+ 	else if (new_sel_end == sel_end)
+ 	{
+ 		if (new_sel_start < sel_start)	/* extend to left */
+ 			highlight(sel_cons, new_sel_start, sel_start - 2);
+ 		else				/* contract from left */
+ 			highlight(sel_cons, sel_start, new_sel_start - 2);
+ 	}
+ 	else	/* some other case; start selection from scratch */
+ 	{
+ 		clear_selection();
+ 		highlight(sel_cons, new_sel_start, new_sel_end);
+ 	}
+ 	sel_start = new_sel_start;
+ 	sel_end = new_sel_end;
+ 	obp = bp = sel_buffer;
+ 	for (i = sel_start; i <= sel_end; i += 2)
+ 	{
+ 		spos = (char *)origin + i;
+ 		*bp++ = *spos;
+ 		if (!isspace(*spos))
+ 			obp = bp;
+ 		if (! ((i + 2) % video_size_row))
+ 		{
+ 			/* strip trailing blanks from line and add newline,
+ 			   unless non-space at end of line. */
+ 			if (obp != bp)
+ 			{
+ 				bp = obp;
+ 				*bp++ = '\n';
+ 			}
+ 			obp = bp;
+ 		}
+ 		/* check for space, leaving room for next character, possible
+ 		   newline, and null at end. */
+ 		if (bp - sel_buffer > SEL_BUFFER_SIZE - 3)
+ 			break;
+ 	}
+ 	*bp = '\0';
+ 	return 0;
+ }
+ 
+ /* insert the contents of the selection buffer into the queue of the
+    tty associated with the current console. Invoked by ioctl(). */
+ int paste_selection(struct tty_struct *tty)
+ {
+ 	char *bp = sel_buffer;
+ 
+ 	while (*bp)
+ 	{
+ 		put_tty_queue(*bp, &tty->read_q);
+ 		bp++;
+ 	}
+ 	TTY_READ_FLUSH(tty);
+ 	return 0;
+ }
+ 
+ /* remove the current selection highlight, if any, from the console holding
+    the selection. */
+ static void clear_selection()
+ {
+ 	if (sel_start != -1)
+ 	{
+ 		highlight(sel_cons, sel_start, sel_end);
+ 		sel_start = -1;
+ 	}
+ }
+ #endif /* SELECTION */
