%!PS-ADOBE-
%%BoundingBox: (atend)
%%Pages: (atend)
%%DocumentFonts: (atend)
%%EndComments
%
% FrameMaker PostScript Prolog 3.0, for use with FrameMaker 3.0
% Copyright (c) 1986,87,89,90,91 by Frame Technology Corporation.
% All rights reserved.
%
% Known Problems:
%	Due to bugs in Transcript, the 'PS-Adobe-' is omitted from line 1
/FMversion (3.0) def 
% Set up Color vs. Black-and-White
	/FMPrintInColor systemdict /colorimage known
		systemdict /currentcolortransfer known or def
% Uncomment this line to force b&w on color printer
%   /FMPrintInColor false def
/FrameDict 195 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} def
	} if
/FMVERSION {
	FMversion ne {
		/Times-Roman findfont 18 scalefont setfont
		100 100 moveto
		(FrameMaker version does not match postscript_prolog!)
		dup =
		show showpage
		} if
	} def 
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/organgle FMLOCAL
	/orgfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne dup {setmanualfeed} if
	/manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	/yscale exch def
	/xscale exch def
	currenttransfer cvlit /orgxfer exch def
	currentscreen cvlit /orgproc exch def
	/organgle exch def /orgfreq exch def
	setpapername 
	manualfeed {true} {papersize} ifelse 
	{manualpapersize} {false} ifelse 
	{desperatepapersize} if
	end 
	} def 
	/pagesave FMLOCAL
	/orgmatrix FMLOCAL
	/landscape FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch neg translate pop 
		}
		{pop pop}
		ifelse
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
	} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin
	array /fillvals exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fy translate 
	rotate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	} bind def
/FMENDEPSF {
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	/FMdicttop countdictstack 1 add def 
	statusdict begin stopped end 
	countdictstack -1 FMdicttop {pop end} for 
	} def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped pop 
		end
		} if
	} def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
/freq dpi 18.75 div 8 div round dup 0 eq {pop 1} if 8 mul dpi exch div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setpattern {
	 /bwidth  exch def
	 /bpside  exch def
	 /bstring exch def
	 /onbits 0 def  /offbits 0 def
	 freq sangle landscape {90 add} if 
		{/y exch def
		 /x exch def
		 /xindex x 1 add 2 div bpside mul cvi def
		 /yindex y 1 add 2 div bpside mul cvi def
		 bstring yindex bwidth mul xindex 8 idiv add get
		 1 7 xindex 8 mod sub bitshift and 0 ne
		 {/onbits  onbits  1 add def 1}
		 {/offbits offbits 1 add def 0}
		 ifelse
		}
		setscreen
	 {} settransfer
	 offbits offbits onbits add div FMsetgray
	/graymode false def
	} bind def
/grayness {
	FMsetgray
	graymode not {
		/graymode true def
		orgxfer cvx settransfer
		orgfreq organgle orgproc cvx setscreen
		} if
	} bind def
	/HUE FMLOCAL
	/SAT FMLOCAL
	/BRIGHT FMLOCAL
	/Colors FMLOCAL
FMPrintInColor 
	
	{
	/HUE 0 def
	/SAT 0 def
	/BRIGHT 0 def
	% array of arrays Hue and Sat values for the separations [HUE BRIGHT]
	/Colors   
	[[0    0  ]    % black
	 [0    0  ]    % white
	 [0.00 1.0]    % red
	 [0.37 1.0]    % green
	 [0.60 1.0]    % blue
	 [0.50 1.0]    % cyan
	 [0.83 1.0]    % magenta
	 [0.16 1.0]    % comment / yellow
	 ] def
      
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPCOLORc { 
		BITMAPTRUECOLORc } def
	/K { 
		Colors exch get dup
		0 get /HUE exch store 
		1 get /BRIGHT exch store
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} def
	/FMsetgray { 
		/SAT exch 1.0 exch sub store 
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} bind def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/FMsetgray {setgray} bind def
	/K { 
		pop
		} def
	}
ifelse
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setpattern} 
	{grayness}
	ifelse
	} bind def
/V { 
	gsave eofill grestore
	} bind def
/N { 
	stroke
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
	/rad FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	newpath
	x1 y1 rad add moveto
	x1 y2 x2 y2 rad arcto
	x2 y2 x2 y1 rad arcto
	x2 y1 x1 y1 rad arcto
	x1 y1 x1 y2 rad arcto
	closepath
	16 {pop} repeat
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath fill
	grestore
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	stroke
	grestore
	} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 4 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
	dup 
	8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
	/proc1 FMLOCAL
	/proc2 FMLOCAL
	/newproc FMLOCAL
/Fmcc {
    /proc2 exch cvlit def
    /proc1 exch cvlit def
    /newproc proc1 length proc2 length add array def
    newproc 0 proc1 putinterval
    newproc proc1 length proc2 putinterval
    newproc cvx
} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch Fmcc settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	colorsetup
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} {is} {is} true 3 colorimage 
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	colorsetup
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} {is} {is} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip} {gip} {bip} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip gip bip w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
%%EndProlog
%%BeginSetup
(3.0) FMVERSION
1 1 612 792 0 1 30 FMDOCUMENT
0 0 /Helvetica FMFONTDEFINE
1 0 /Helvetica-Bold FMFONTDEFINE
2 0 /Times-Roman FMFONTDEFINE
3 0 /Helvetica-Narrow-Bold FMFONTDEFINE
4 0 /Times-Italic FMFONTDEFINE
5 0 /Courier-Bold FMFONTDEFINE
6 0 /Times-Bold FMFONTDEFINE
7 1 /Symbol FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 .1 FMFILL
2 .3 FMFILL
3 .5 FMFILL
4 .7 FMFILL
5 .9 FMFILL
6 .97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 .9 FMFILL
18 .7 FMFILL
19 .5 FMFILL
20 .3 FMFILL
21 .1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "174" 174
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(Standard IDL T) 108 736.18 T
(ypes) 168.45 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(174) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
0 X
(ParameterDescription) 114 621.02 T
(RepositoryDescription) 114 606.02 T
(ModuleDescription) 114 591.02 T
(ConstDescription) 114 576.02 T
(ExceptionDescription) 114 561.02 T
(T) 114 546.02 T
(ypeDescription) 119 546.02 T
(FullInterfaceDescription) 114 531.02 T
(sequences of the above) 114 516.02 T
54 672.98 540 686.02 C
108 680.04 540 680.04 2 L
0.25 H
2 Z
0 X
0 K
N
54 680.04 99 680.04 2 L
0 Z
N
0 0 612 792 C
54 649.02 540 662.98 C
54 654.99 540 654.99 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
(TBL. 20) 54 666.32 T
0 F
(Minimal T) 108 666.32 T
(ypes for Any  \050Continued\051) 150.76 666.32 T
108 631.02 261 631.02 2 L
V
0.5 H
0 Z
N
108 511.02 261 511.02 2 L
V
N
34 618.02 36 627.02 R
V
34 603.02 36 612.02 R
V
34 588.02 36 597.02 R
V
34 573.02 36 582.02 R
V
34 558.02 36 567.02 R
V
34 543.02 36 552.02 R
V
34 528.02 36 537.02 R
V
34 513.02 36 522.02 R
V
FMENDPAGE
%%EndPage: "174" 173
%%Page: "173" 173
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
72 726.98 558 726.98 2 L
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 9 Q
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(173) 541.33 60.29 T
72 87.98 558 686.02 R
7 X
V
2 12 Q
0 X
(The) 126 326.02 T
3 F
(any) 147.65 326.02 T
2 F
( type can be used to represent a variety of types of values. All ORB implementa-) 164.6 326.02 T
-0.21 (tions must support at least the types listed in TBL. 20 on page 173 as) 126 312.02 P
3 F
-0.19 (any) 456.64 312.02 P
2 F
-0.21 (. ORB implemen-) 472.8 312.02 P
(tations may de\336ne more values for) 126 298.02 T
3 F
(any) 295.21 298.02 T
2 F
(.) 311.38 298.02 T
0 9 Q
(OperationDescription) 132 621.02 T
(struct) 240 621.02 T
(\2447.5.6 on page 135) 294 621.02 T
(AttributeDescription) 132 606.02 T
(struct) 240 606.02 T
(\2447.5.5 on page 135) 294 606.02 T
(ParameterDescription) 132 591.02 T
(struct) 240 591.02 T
(\2447.5.7 on page 136) 294 591.02 T
(RepositoryDescription) 132 576.02 T
(struct) 240 576.02 T
(\2447.5.2 on page 132) 294 576.02 T
(ModuleDescription) 132 561.02 T
(struct) 240 561.02 T
(\2447.5.3 on page 133) 294 561.02 T
(ConstDescription) 132 546.02 T
(struct) 240 546.02 T
(\2447.5.9 on page 137) 294 546.02 T
(ExceptionDescription) 132 531.02 T
(struct) 240 531.02 T
(\2447.5.10 on page 138) 294 531.02 T
(T) 132 516.02 T
(ypeDescription) 137 516.02 T
(struct) 240 516.02 T
(\2447.5.8 on page 137) 294 516.02 T
(FullInterfaceDescription) 132 501.02 T
(struct) 240 501.02 T
(\2447.5.4 on page 134) 294 501.02 T
(InterfaceDef) 132 486.02 T
(interface) 240 486.02 T
(\2447.5.4 on page 134) 294 486.02 T
(OperationDef) 132 471.02 T
(interface) 240 471.02 T
(\2447.5.6 on page 135) 294 471.02 T
(AttributeDef) 132 456.02 T
(interface) 240 456.02 T
(\2447.5.5 on page 135) 294 456.02 T
(ParameterDef) 132 441.02 T
(interface) 240 441.02 T
(\2447.5.7 on page 136) 294 441.02 T
(RepositoryDef) 132 426.02 T
(interface) 240 426.02 T
(\2447.5.2 on page 132) 294 426.02 T
(ModuleDef) 132 411.02 T
(interface) 240 411.02 T
(\2447.5.3 on page 133) 294 411.02 T
(T) 132 396.02 T
(ypeDef) 137 396.02 T
(interface) 240 396.02 T
(\2447.5.8 on page 137) 294 396.02 T
(ConstDef) 132 381.02 T
(interface) 240 381.02 T
(\2447.5.9 on page 137) 294 381.02 T
(ExceptionDef) 132 366.02 T
(interface) 240 366.02 T
(\2447.5.10 on page 138) 294 366.02 T
(ImplementationDef) 132 351.02 T
(interface) 240 351.02 T
(\2449.2.1 on page 151) 294 351.02 T
72 268.98 558 282.02 C
126 276.04 558 276.04 2 L
0.25 H
2 Z
0 X
0 K
N
72 276.04 117 276.04 2 L
0 Z
N
0 0 612 792 C
72 245.02 558 258.98 C
72 250.99 558 250.99 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
(TBL. 20) 72 262.32 T
0 F
(Minimal T) 126 262.32 T
(ypes for Any) 168.76 262.32 T
0 9 Q
(IDL Basic T) 132 217.02 T
(ypes) 177.95 217.02 T
(Object) 132 202.02 T
(Any) 132 187.02 T
(T) 132 172.02 T
(ypeCode) 137 172.02 T
(NamedV) 132 157.02 T
(alue) 166.3 157.02 T
(user-de\336ned interfaces) 132 142.02 T
(InterfaceDescription) 132 127.02 T
(OperationDescription) 132 112.02 T
(AttributeDescription) 132 97.02 T
72 672.98 558 686.02 C
126 680.04 558 680.04 2 L
0.25 H
2 Z
0 X
0 K
N
72 680.04 117 680.04 2 L
0 Z
N
0 0 612 792 C
72 649.02 558 662.98 C
72 654.99 558 654.99 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
(TBL. 19) 72 666.32 T
0 F
(Interface Repository T) 126 666.32 T
(ypes  \050Continued\051) 223.77 666.32 T
1 9 Q
(Name) 132 636.02 T
(T) 240 636.02 T
(ype) 244.83 636.02 T
(Described In) 294 636.02 T
126 631.02 387 631.02 2 L
V
0.5 H
0 Z
N
126 346.02 387 346.02 2 L
V
N
126 227.02 279 227.02 2 L
V
N
126 92.02 279 92.02 2 L
V
N
52 294.02 54 320.02 R
V
52 618.02 54 627.02 R
V
52 618.02 54 627.02 R
V
52 618.02 54 627.02 R
V
52 603.02 54 612.02 R
V
52 603.02 54 612.02 R
V
52 603.02 54 612.02 R
V
52 588.02 54 597.02 R
V
52 588.02 54 597.02 R
V
52 588.02 54 597.02 R
V
52 573.02 54 582.02 R
V
52 573.02 54 582.02 R
V
52 573.02 54 582.02 R
V
52 558.02 54 567.02 R
V
52 558.02 54 567.02 R
V
52 558.02 54 567.02 R
V
52 543.02 54 552.02 R
V
52 543.02 54 552.02 R
V
52 543.02 54 552.02 R
V
52 528.02 54 537.02 R
V
52 528.02 54 537.02 R
V
52 528.02 54 537.02 R
V
52 513.02 54 522.02 R
V
52 513.02 54 522.02 R
V
52 513.02 54 522.02 R
V
52 498.02 54 507.02 R
V
52 498.02 54 507.02 R
V
52 498.02 54 507.02 R
V
52 483.02 54 492.02 R
V
52 483.02 54 492.02 R
V
52 483.02 54 492.02 R
V
52 468.02 54 477.02 R
V
52 468.02 54 477.02 R
V
52 468.02 54 477.02 R
V
52 453.02 54 462.02 R
V
52 453.02 54 462.02 R
V
52 453.02 54 462.02 R
V
52 438.02 54 447.02 R
V
52 438.02 54 447.02 R
V
52 438.02 54 447.02 R
V
52 423.02 54 432.02 R
V
52 423.02 54 432.02 R
V
52 423.02 54 432.02 R
V
52 408.02 54 417.02 R
V
52 408.02 54 417.02 R
V
52 408.02 54 417.02 R
V
52 393.02 54 402.02 R
V
52 393.02 54 402.02 R
V
52 393.02 54 402.02 R
V
52 378.02 54 387.02 R
V
52 378.02 54 387.02 R
V
52 378.02 54 387.02 R
V
52 363.02 54 372.02 R
V
52 363.02 54 372.02 R
V
52 363.02 54 372.02 R
V
52 348.02 54 357.02 R
V
52 348.02 54 357.02 R
V
52 348.02 54 357.02 R
V
52 258.98 54 268.98 R
V
52 214.02 54 223.02 R
V
52 199.02 54 208.02 R
V
52 184.02 54 193.02 R
V
52 169.02 54 178.02 R
V
52 154.02 54 163.02 R
V
52 139.02 54 148.02 R
V
52 124.02 54 133.02 R
V
52 109.02 54 118.02 R
V
52 94.02 54 103.02 R
V
FMENDPAGE
%%EndPage: "173" 172
%%Page: "172" 172
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(Standard IDL T) 108 736.18 T
(ypes) 168.45 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(172) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
2 12 Q
0 X
(TBL. 18 on page 172 lists the ORB pseudo-objects that should be available in any lan-) 108 581.02 T
-0.24 (guage mapping; in the C mapping, these de\336nitions are contained in the \336le orb.h. Pseudo-) 108 567.02 P
(objects cannot be invoked with the dynamic interface, and do not have object references.) 108 553.02 T
(Those pseudo-objects that cannot be used as general ar) 108 539.02 T
(guments \050passed as ar) 370.91 539.02 T
(guments in) 475.61 539.02 T
(requests on real objects\051 are identi\336ed in the table. The de\336nitions of pseudo-objects that) 108 525.02 T
(can be used as general ar) 108 511.02 T
(guments are contained in the \336le orb.idl, and can be) 227.33 511.02 T
3 F
(#included) 478.49 511.02 T
2 F
(into IDL speci\336cations.) 108 497.02 T
(T) 108 269.02 T
(ypes used with the Interface Repository are shown in TBL. 18 on page 172. They are) 114.49 269.02 T
(contained in orb.idl.) 108 255.02 T
0 9 Q
(any) 114 621.02 T
(\2444.7.1.6 on page 68) 186 621.02 T
(Object) 114 606.02 T
(\2448.2 on page 145) 186 606.02 T
54 467.98 540 481.02 C
108 475.04 540 475.04 2 L
0.25 H
2 Z
0 X
0 K
N
54 475.04 99 475.04 2 L
0 Z
N
0 0 612 792 C
54 444.02 540 457.98 C
54 449.99 540 449.99 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
(TBL. 18) 54 461.32 T
0 F
(Pseudo-objects) 108 461.32 T
1 9 Q
(Name) 114 431.02 T
(General Argument?) 186 431.02 T
(In orb.idl?) 285 431.02 T
(Described In) 348 431.02 T
0 F
(Environment) 114 416.02 T
(No) 186 416.02 T
(No) 285 416.02 T
(\2445.19 on page 99) 348 416.02 T
(Request) 114 401.02 T
(No) 186 401.02 T
(No) 285 401.02 T
(\2446.2 on page 108) 348 401.02 T
(Context) 114 386.02 T
(No) 186 386.02 T
(No) 285 386.02 T
(\2446.5 on page 1) 348 386.02 T
(16) 407.3 386.02 T
(ORB) 114 371.02 T
(No) 186 371.02 T
(No) 285 371.02 T
(\2448.1 on page 143) 348 371.02 T
(BOA) 114 356.02 T
(No) 186 356.02 T
(No) 285 356.02 T
(\2449.2 on page 149) 348 356.02 T
(T) 114 341.02 T
(ypeCode) 119 341.02 T
(Y) 186 341.02 T
(es) 191.17 341.02 T
(Y) 285 341.02 T
(es) 290.17 341.02 T
(\2447.6 on page 138) 348 341.02 T
(Principal) 114 326.02 T
(Y) 186 326.02 T
(es) 191.17 326.02 T
(Y) 285 326.02 T
(es) 290.17 326.02 T
(\2449.2.4 on page 155) 348 326.02 T
(NamedV) 114 311.02 T
(alue) 148.3 311.02 T
(Y) 186 311.02 T
(es) 191.17 311.02 T
(Y) 285 311.02 T
(es) 290.17 311.02 T
(\2446.1.1 on page 106) 348 311.02 T
(NVList) 114 296.02 T
(No) 186 296.02 T
(No) 285 296.02 T
(\2446.1.1 on page 106) 348 296.02 T
54 225.98 540 239.02 C
108 233.04 540 233.04 2 L
0.25 H
2 Z
0 X
0 K
N
54 233.04 99 233.04 2 L
0 Z
N
0 0 612 792 C
54 202.02 540 215.98 C
54 207.99 540 207.99 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
(TBL. 19) 54 219.32 T
0 F
(Interface Repository T) 108 219.32 T
(ypes) 205.77 219.32 T
1 9 Q
(Name) 114 189.02 T
(T) 222 189.02 T
(ype) 226.83 189.02 T
(Described In) 276 189.02 T
0 F
(Identi\336er) 114 174.02 T
(string) 222 174.02 T
(\2447.5.1 on page 129) 276 174.02 T
(RepositoryId) 114 159.02 T
(string) 222 159.02 T
(\2447.5.1 on page 129) 276 159.02 T
(OperationMode) 114 144.02 T
(enum) 222 144.02 T
(\2447.5.6 on page 135) 276 144.02 T
(ParameterMode) 114 129.02 T
(enum) 222 129.02 T
(\2447.5.7 on page 136) 276 129.02 T
(AttributeMode) 114 114.02 T
(enum) 222 114.02 T
(\2447.5.5 on page 135) 276 114.02 T
(InterfaceDescription) 114 99.02 T
(struct) 222 99.02 T
(\2447.5.4 on page 134) 276 99.02 T
54 672.98 540 686.02 C
108 680.04 540 680.04 2 L
0.25 H
2 Z
0 X
0 K
N
54 680.04 99 680.04 2 L
0 Z
N
0 0 612 792 C
54 649.02 540 662.98 C
54 654.99 540 654.99 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
(TBL. 17) 54 666.32 T
0 F
(T) 108 666.32 T
(ypes De\336ned by IDL  \050Continued\051) 113.56 666.32 T
0 9 Q
(T) 114 639.02 T
(ype) 119 639.02 T
1 F
(Described In) 202.53 636.02 T
108 631.02 279 631.02 2 L
V
0.5 H
0 Z
N
108 601.02 279 601.02 2 L
V
N
108 426.02 441 426.02 2 L
V
N
108 291.02 441 291.02 2 L
V
N
108 184.02 369 184.02 2 L
V
N
108 94.02 369 94.02 2 L
V
N
34 251.02 36 589.02 R
V
34 618.02 36 627.02 R
V
34 618.02 36 627.02 R
V
34 603.02 36 612.02 R
V
34 603.02 36 612.02 R
V
34 457.98 36 467.98 R
V
34 428.02 36 437.02 R
V
34 428.02 36 437.02 R
V
34 428.02 36 437.02 R
V
34 428.02 36 437.02 R
V
34 413.02 36 422.02 R
V
34 413.02 36 422.02 R
V
34 413.02 36 422.02 R
V
34 413.02 36 422.02 R
V
34 398.02 36 407.02 R
V
34 398.02 36 407.02 R
V
34 398.02 36 407.02 R
V
34 398.02 36 407.02 R
V
34 383.02 36 392.02 R
V
34 383.02 36 392.02 R
V
34 383.02 36 392.02 R
V
34 383.02 36 392.02 R
V
34 368.02 36 377.02 R
V
34 368.02 36 377.02 R
V
34 368.02 36 377.02 R
V
34 368.02 36 377.02 R
V
34 353.02 36 362.02 R
V
34 353.02 36 362.02 R
V
34 353.02 36 362.02 R
V
34 353.02 36 362.02 R
V
34 338.02 36 347.02 R
V
34 338.02 36 347.02 R
V
34 338.02 36 347.02 R
V
34 338.02 36 347.02 R
V
34 323.02 36 332.02 R
V
34 323.02 36 332.02 R
V
34 323.02 36 332.02 R
V
34 323.02 36 332.02 R
V
34 308.02 36 317.02 R
V
34 308.02 36 317.02 R
V
34 308.02 36 317.02 R
V
34 308.02 36 317.02 R
V
34 293.02 36 302.02 R
V
34 293.02 36 302.02 R
V
34 293.02 36 302.02 R
V
34 293.02 36 302.02 R
V
34 215.98 36 225.98 R
V
34 186.02 36 195.02 R
V
34 186.02 36 195.02 R
V
34 186.02 36 195.02 R
V
34 171.02 36 180.02 R
V
34 171.02 36 180.02 R
V
34 171.02 36 180.02 R
V
34 156.02 36 165.02 R
V
34 156.02 36 165.02 R
V
34 156.02 36 165.02 R
V
34 141.02 36 150.02 R
V
34 141.02 36 150.02 R
V
34 141.02 36 150.02 R
V
34 126.02 36 135.02 R
V
34 126.02 36 135.02 R
V
34 126.02 36 135.02 R
V
34 111.02 36 120.02 R
V
34 111.02 36 120.02 R
V
34 111.02 36 120.02 R
V
34 96.02 36 105.02 R
V
34 96.02 36 105.02 R
V
34 96.02 36 105.02 R
V
FMENDPAGE
%%EndPage: "172" 171
%%Page: "171" 171
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 378 558 378 2 L
7 X
V
2 Z
0 X
N
72 74.02 558 74.02 2 L
7 X
V
0.25 H
0 X
N
72 55.01 558 66.96 R
7 X
V
0 9 Q
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
-2.78 (171) 541.33 60.29 P
72 468 558 693 R
7 X
V
0 24 Q
0 X
-0.48 (A) 72 677 S
-0.48 (Standard IDL T) 126 677 S
-0.48 (ypes) 280.62 677 S
52 669 54 693 R
V
72 87.98 558 432 R
7 X
V
2 12 Q
0 X
-0.19 (The IDL types listed in this appendix are available in all ORB implementations. IDL spec-) 126 424 P
-0.21 (i\336cations that incorporate these types are therefore portable across ORB implementations.) 126 410 P
(The types shown in TBL. 17 on page 171 are de\336ned by the IDL language.) 126 396 T
72 366.97 558 380 C
126 374.02 558 374.02 2 L
0.25 H
2 Z
0 X
0 K
N
72 374.02 117 374.02 2 L
0 Z
N
0 0 612 792 C
72 343 558 356.97 C
72 348.98 558 348.98 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
(TBL. 17) 72 360.3 T
0 F
(T) 126 360.3 T
(ypes De\336ned by IDL) 131.56 360.3 T
0 9 Q
(T) 132 333 T
(ype) 137 333 T
1 F
(Described In) 220.53 330 T
0 F
(short) 132 315 T
(\2444.7.1.1 on page 67) 204 315 T
(long) 132 300 T
(\2444.7.1.1 on page 67) 204 300 T
(unsigned short) 132 285 T
(\2444.7.1.1 on page 67) 204 285 T
(unsigned long) 132 270 T
(\2444.7.1.1 on page 67) 204 270 T
(\337oat) 132 255 T
(\2444.7.1.2 on page 67) 204 255 T
(double) 132 240 T
(\2444.7.1.2 on page 67) 204 240 T
(char) 132 225 T
(\2444.7.1.3 on page 67) 204 225 T
(boolean) 132 210 T
(\2444.7.1.4 on page 67) 204 210 T
(octet) 132 195 T
(\2444.7.1.5 on page 67) 204 195 T
(struct) 132 180 T
(\2444.7.2.1 on page 68) 204 180 T
(union) 132 165 T
(\2444.7.2.2 on page 68) 204 165 T
(enum) 132 150 T
(\2444.7.2.3 on page 70) 204 150 T
(sequence) 132 135 T
(\2444.7.3.1 on page 70) 204 135 T
(string) 132 120 T
(\2444.7.3.2 on page 71) 204 120 T
(array) 132 105 T
(\2444.7.4.1 on page 71) 204 105 T
126 325 297 325 2 L
V
0.5 H
0 Z
N
126 100 297 100 2 L
V
N
52 392 54 432 R
V
52 356.97 54 366.97 R
V
52 330 54 339 R
V
52 312 54 321 R
V
52 312 54 321 R
V
52 297 54 306 R
V
52 297 54 306 R
V
52 282 54 291 R
V
52 282 54 291 R
V
52 267 54 276 R
V
52 267 54 276 R
V
52 252 54 261 R
V
52 252 54 261 R
V
52 237 54 246 R
V
52 237 54 246 R
V
52 222 54 231 R
V
52 222 54 231 R
V
52 207 54 216 R
V
52 207 54 216 R
V
52 192 54 201 R
V
52 192 54 201 R
V
52 177 54 186 R
V
52 177 54 186 R
V
52 162 54 171 R
V
52 162 54 171 R
V
52 147 54 156 R
V
52 147 54 156 R
V
52 132 54 141 R
V
52 132 54 141 R
V
52 117 54 126 R
V
52 117 54 126 R
V
52 102 54 111 R
V
FMENDPAGE
%%EndPage: "171" 170
%%Page: "170" 170
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(Glossary) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(170) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
1 12 Q
0 X
(synchronous request) 54 678.02 T
2 F
(A request where the client pauses to wait for completion of the) 234 678.02 T
(request. Contrast with deferred synchronous request and one-) 234 664.02 T
(way request.) 234 650.02 T
1 F
(transient object) 54 624.02 T
2 F
(An object whose existence is limited by the lifetime of the pro-) 234 624.02 T
(cess or thread that created it.) 234 610.02 T
1 F
(type) 54 584.02 T
2 F
(See data type and interface.) 234 584.02 T
1 F
(value) 54 558.02 T
2 F
-0.12 (Any entity that may be a possible actual parameter in a request.) 234 558.02 P
-0.47 (V) 234 544.02 P
-0.47 (alues that serve to identify objects are called object references.) 241.33 544.02 P
34 540.02 36 686.02 R
V
FMENDPAGE
%%EndPage: "170" 169
%%Page: "169" 169
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
72 726.98 558 726.98 2 L
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 9 Q
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(169) 541.33 60.29 T
72 87.98 558 686.02 R
7 X
V
1 12 Q
0 X
(persistent object) 72 678.02 T
2 F
(An object that can survive the process or thread that created it.) 252 678.02 T
(A persistent object exists until it is explicitly deleted.) 252 664.02 T
1 F
(referential integrity) 72 638.02 T
2 F
-0.01 (The property ensuring that an object reference that exists in the) 252 638.02 P
-0.12 (state associated with an object reliably identi\336es a single object.) 252 624.02 P
1 F
(repository) 72 598.02 T
2 F
(See interface repository and implementation repository) 252 598.02 T
(.) 515.36 598.02 T
1 F
(request) 72 572.02 T
2 F
(A client issues a request to cause a service to be performed. A) 252 572.02 T
(request consists of an operation and zero or more actual param-) 252 558.02 T
(eters.) 252 544.02 T
1 F
(results) 72 518.02 T
2 F
(The information returned to the client, which may include val-) 252 518.02 T
(ues as well as status information indicating that exceptional) 252 504.02 T
(conditions were raised in attempting to perform the requested) 252 490.02 T
(service.) 252 476.02 T
1 F
(server) 72 450.02 T
2 F
-0.37 (A process implementing one or more operations on one or more) 252 450.02 P
(objects.) 252 436.02 T
1 F
(server object) 72 410.02 T
2 F
-0.29 (An object providing response to a request for a service. A given) 252 410.02 P
(object may be a client for some requests and a server for other) 252 396.02 T
(requests.) 252 382.02 T
1 F
(signature) 72 356.02 T
2 F
(De\336nes the parameters of a given operation including their) 252 356.02 T
(number) 252 342.02 T
( order) 288.64 342.02 T
(, data types, and passing mode; the results if any;) 316.46 342.02 T
(and the possible outcomes \050normal vs. exceptional\051 that might) 252 328.02 T
(occur) 252 314.02 T
1 F
(single inheritance) 72 288.02 T
2 F
(The construction of a de\336nition by incremental modi\336cation of) 252 288.02 T
(one de\336nition. Contrast with multiple inheritance.) 252 274.02 T
1 F
(skeleton) 72 248.02 T
2 F
(The object-interface-speci\336c ORB component which assists an) 252 248.02 T
(object adapter in passing requests to particular methods.) 252 234.02 T
1 F
(state) 72 208.02 T
2 F
-0.23 (The time varying properties of an object that af) 252 208.02 P
-0.23 (fect that object\325) 476.42 208.02 P
-0.23 (s) 550.57 208.02 P
(behavior) 252 194.02 T
(.) 293.3 194.02 T
1 F
(static invocation) 72 168.02 T
2 F
-0.41 (Constructing a request at compile time. Calling an operation via) 252 168.02 P
(a stub procedure.) 252 154.02 T
1 F
(stub) 72 128.02 T
2 F
(A local procedure corresponding to a single operation that) 252 128.02 T
(invokes that operation when called.) 252 114.02 T
52 110.02 54 686.02 R
V
FMENDPAGE
%%EndPage: "169" 168
%%Page: "168" 168
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(Glossary) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(168) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
1 12 Q
0 X
(object) 54 678.02 T
2 F
(A combination of state and a set of methods that explicitly) 234 678.02 T
(embodies an abstraction characterized by the behavior of rele-) 234 664.02 T
(vant requests. An object is an instance of an implementation) 234 650.02 T
(and an interface. An object models a real-world entity) 234 636.02 T
(, and it is) 492.01 636.02 T
(implemented as a computational entity that encapsulates state) 234 622.02 T
(and operations \050internally implemented as data and methods\051) 234 608.02 T
(and responds to request) 234 594.02 T
(or services.) 346.92 594.02 T
1 F
(object adapter) 54 568.02 T
2 F
(The ORB component which provides object reference, activa-) 234 568.02 T
(tion, and state related services to an object implementation.) 234 554.02 T
(There may be dif) 234 540.02 T
(ferent adapters provided for dif) 316.05 540.02 T
(ferent kinds of) 465.7 540.02 T
(implementations.) 234 526.02 T
1 F
(object creation) 54 500.02 T
2 F
(An event that causes the existence of an object that is distinct) 234 500.02 T
(from any other object.) 234 486.02 T
1 F
(object destruction) 54 460.02 T
2 F
(An event that causes an object to cease to exist.) 234 460.02 T
1 F
(object implementation) 54 434.02 T
2 F
(Same as implementation.) 234 434.02 T
1 F
(object reference) 54 408.02 T
2 F
(A value that unambiguously identi\336es an object. Object refer-) 234 408.02 T
(ences are never reused to identify another object.) 234 394.02 T
1 F
(objref) 54 368.02 T
2 F
(An abbreviation for object reference.) 234 368.02 T
1 F
(one-way request) 54 342.02 T
2 F
(A request where the client does not wait for completion of the) 234 342.02 T
(request, nor does it intend to accept results. Contrast with) 234 328.02 T
(deferred synchronous request and synchronous request.) 234 314.02 T
1 F
(operation) 54 288.02 T
2 F
-0.1 (A service that can be requested. An operation has an associated) 234 288.02 P
-0.05 (signature, which may restrict which actual parameters are valid.) 234 274.02 P
1 F
(operation name) 54 248.02 T
2 F
(A name used in a request to identify an operation.) 234 248.02 T
1 F
(ORB) 54 222.02 T
2 F
(Object Request Broker) 234 222.02 T
(. Provides the means by which clients) 343.26 222.02 T
(make and receive requests and responses.) 234 208.02 T
1 F
(ORB core) 54 182.02 T
2 F
(The ORB component which moves a request from a client to) 234 182.02 T
(the appropriate adapter for the tar) 234 168.02 T
(get object.) 394.64 168.02 T
1 F
(parameter passing mode) 54 142.02 T
2 F
(Describes the direction of information \337ow for a operation) 234 142.02 T
(parameter) 234 128.02 T
(. The parameter passing modes are) 281.29 128.02 T
3 F
(IN) 450.82 128.02 T
2 F
(,) 460.65 128.02 T
3 F
(OUT) 466.65 128.02 T
2 F
(, and) 486.52 128.02 T
3 F
(INOUT) 234 114.02 T
2 F
(.) 263.71 114.02 T
34 110.02 36 686.02 R
V
FMENDPAGE
%%EndPage: "168" 167
%%Page: "167" 167
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
72 726.98 558 726.98 2 L
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 9 Q
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(167) 541.33 60.29 T
72 87.98 558 686.02 R
7 X
V
1 12 Q
0 X
(implementation repository) 72 678.02 T
2 F
(A storage place for object implementation information.) 252 678.02 T
1 F
(inheritance) 72 652.02 T
2 F
(The construction of a de\336nition by incremental modi\336cation of) 252 652.02 T
(other de\336nitions. See interface and implementation inheritance.) 252 638.02 T
1 F
(instance) 72 612.02 T
2 F
(An object is an instance of an interface if it provides the opera-) 252 612.02 T
(tions signatures, semantics\051 speci\336ed by that interface. An) 252 598.02 T
-0.01 (object is an instance of an implementation if its behavior is pro-) 252 584.02 P
(vided by that implementation.) 252 570.02 T
1 F
(interface) 72 544.02 T
2 F
-0.47 (A listing of the operations and attributes that an object provides.) 252 544.02 P
(This includes the signatures of the operations, and the types of) 252 530.02 T
(the attributes. An interface de\336nition ideally includes the) 252 516.02 T
(semantics as well. An object) 252 502.02 T
4 F
(satis\336es) 391.9 502.02 T
2 F
( an interface if it can be) 429.89 502.02 T
-0.16 (speci\336ed as the tar) 252 488.02 P
-0.16 (get object in each potential request described) 340.25 488.02 P
(by the interface.) 252 474.02 T
1 F
(interface inheritance) 72 448.02 T
2 F
-0.16 (The construction of an interface by incremental modi\336cation of) 252 448.02 P
(other interfaces. The IDL language provides interface inherit-) 252 434.02 T
(ance.) 252 420.02 T
1 F
(interface object) 72 394.02 T
2 F
(An object that serves to describe an interface. Interface objects) 252 394.02 T
(reside in an interface repository) 252 380.02 T
(.) 403.09 380.02 T
1 F
(interface repository) 72 354.02 T
2 F
(A storage place for interface information.) 252 354.02 T
1 F
(interface type) 72 328.02 T
2 F
(A type satis\336ed by any object that satis\336es a particular inter-) 252 328.02 T
(face.) 252 314.02 T
1 F
(interoperability) 72 288.02 T
2 F
(The ability for two or more ORBs to cooperate to deliver) 252 288.02 T
(requests to the proper object. Interoperating ORBs appear to a) 252 274.02 T
(client to be a single ORB.) 252 260.02 T
1 F
(language binding) 72 234.02 T
2 F
( or) 171.29 234.02 T
1 F
(mapping) 187.28 234.02 T
2 F
(The means and conventions by which a programmer writing in) 252 234.02 T
(a speci\336c programming language accesses ORB capabilities.) 252 220.02 T
1 F
(method) 72 194.02 T
2 F
-0.14 (An implementation of an operation. Code that may be executed) 252 194.02 P
(to perform a requested service. Methods associated with an) 252 180.02 T
(object may be structured into one or more programs.) 252 166.02 T
1 F
(method resolution) 72 140.02 T
2 F
(The selection of the method to perform a requested operation.) 252 140.02 T
1 F
(multiple inheritance) 72 114.02 T
2 F
(The construction of a de\336nition by incremental modi\336cation of) 252 114.02 T
(more than one other de\336nition.) 252 100.02 T
52 96.02 54 686.02 R
V
FMENDPAGE
%%EndPage: "167" 166
%%Page: "166" 166
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(Glossary) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(166) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
1 12 Q
0 X
(client) 54 678.02 T
2 F
(The code or process that invokes an operation on an object.) 234 678.02 T
1 F
(context object) 54 652.02 T
2 F
-0.53 (A collection of name-value pairs that provides environmental or) 234 652.02 P
(user) 234 638.02 T
(-preference information. See Chapter 6.) 253.74 638.02 T
1 F
(CORBA) 54 612.02 T
2 F
(Common Object Request Broker Architecture.) 234 612.02 T
1 F
(data type) 54 586.02 T
2 F
(A categorization of values operation ar) 234 586.02 T
(guments\051, typically cov-) 420.63 586.02 T
(ering both) 234 572.02 T
(behavior and representation. I.e., the traditional non-) 285.97 572.02 T
(OO\051 programming language notion of type.) 234 558.02 T
1 F
(deactivation) 54 532.02 T
2 F
(The opposite of activation.) 234 532.02 T
1 F
(deferred synchronous request) 54 506.02 T
2 F
(A request where the client does not wait for completion of the) 234 506.02 T
(request, but does intend to accept results later) 234 492.02 T
(. Contrast with) 451.85 492.02 T
(synchronous request and one-way request.) 234 478.02 T
1 F
(dynamic invocation) 54 452.02 T
2 F
(Constructing and issuing a request whose signature is possibly) 234 452.02 T
(not known until runtime.) 234 438.02 T
1 F
(externalized object reference) 54 412.02 T
2 F
(An object reference expressed as an ORB-speci\336c string. Suit-) 234 412.02 T
(able for storage in \336les or other external media.) 234 398.02 T
1 F
(implementation) 54 372.02 T
2 F
(A de\336nition that provides the information needed to create an) 234 372.02 T
(object and allow the object to participate in providing an appro-) 234 358.02 T
(priate set of services. An implementation typically includes a) 234 344.02 T
(description of the data structure used to represent the core state) 234 330.02 T
(associated with an object, as well as de\336nitions of the methods) 234 316.02 T
(that access that data structure. It will also typically include) 234 302.02 T
(information about the intended interface of the object.) 234 288.02 T
1 F
(implementation de\336nition language) 54 262.02 T
2 F
-0.55 (A notation for describing implementations. The implementation) 234 248.02 P
(de\336nition language is currently beyond the scope of the ORB) 234 234.02 T
(standard. It may contain vendor) 234 220.02 T
(-speci\336c and adapter) 385.98 220.02 T
(-speci\336c) 484.99 220.02 T
(notations.) 234 206.02 T
1 F
(implementation inheritance) 54 180.02 T
2 F
(The construction of an implementation by incremental modi\336-) 234 180.02 T
(cation of other implementations. The ORB does not provide) 234 166.02 T
(implementation inheritance. Implementation inheritance may) 234 152.02 T
(be provided by higher level tools.) 234 138.02 T
1 F
(implementation object) 54 112.02 T
2 F
(An object that serves as an implementation de\336nition. Imple-) 234 112.02 T
(mentation objects reside in an implementation repository) 234 98.02 T
(.) 506.38 98.02 T
34 94.02 36 686.02 R
V
FMENDPAGE
%%EndPage: "166" 165
%%Page: "165" 165
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 378 558 378 2 L
7 X
V
2 Z
0 X
N
72 74.02 558 74.02 2 L
7 X
V
0.25 H
0 X
N
72 55.01 558 66.96 R
7 X
V
0 9 Q
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
-2.78 (165) 541.33 60.29 P
72 396 558 693 R
7 X
V
0 24 Q
0 X
-0.48 (1) 72 677 S
-0.48 (1) 83.08 677 S
-0.48 (Glossary) 126 677 S
72 87.98 558 360 R
7 X
V
1 12 Q
0 X
(activation) 72 352 T
2 F
-0.16 (Preparing an object to execute an operation. For example, copy-) 252 352 P
(ing the persistent form of methods and stored data into an exe-) 252 338 T
(cutable address space to allow execution of the methods on the) 252 324 T
(stored data.) 252 310 T
1 F
(adapter) 72 284 T
2 F
(Same as object adapter) 252 284 T
(.) 361.58 284 T
1 F
(attribute) 72 258 T
2 F
(An identi\336able association between an object and a value. An) 252 258 T
(attribute) 252 244 T
3 F
(A) 294.97 244 T
2 F
( is made visible to clients as a pair of operations:) 302.07 244 T
3 F
(get_A) 252 230 T
2 F
( and) 279.32 230 T
3 F
(set_A) 302.64 230 T
2 F
(. Readonly attributes only generate a) 329.42 230 T
3 F
(get) 508.29 230 T
2 F
( opera-) 523.04 230 T
(tion.) 252 216 T
1 F
(basic object adapter) 72 190 T
2 F
(The object adapter described in Chapter 9.) 252 190 T
1 F
(behavior) 72 164 T
2 F
(The observable ef) 252 164 T
(fects of an object performing the requested) 337.7 164 T
(operation including its results\051) 252 150 T
(binding) 398.25 150 T
(. See language binding,) 434.9 150 T
(dynamic invocation, static invocation, or method resolution for) 252 136 T
(alternatives.) 252 122 T
1 F
(class) 72 96 T
2 F
(See interface and implementation for alternatives.) 252 96 T
52 92 54 360 R
V
FMENDPAGE
%%EndPage: "165" 164
%%Page: "164" 164
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(Interoperability) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(164) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
FMENDPAGE
%%EndPage: "164" 163
%%Page: "163" 163
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(The Organization of Multiple ORBs) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(163) 541.33 60.29 T
72 87.98 558 686.02 R
7 X
V
2 12 Q
0 X
(There are many possible ways to connect two ORBS together) 126 678.02 T
(, but they tend to fall into) 420.98 678.02 T
(two categories: embedding of object references and protocol translation. Another tech-) 126 664.02 T
(nique is to allow object implementations to move objects between ORBs.) 126 650.02 T
1 F
(10.1.1) 87.26 618.02 T
0 F
(Reference Embedding) 126 618.02 T
2 F
(W) 126 600.02 T
(ith reference embedding, an object in one ORB appears to be an object in a second) 136.84 600.02 T
-0.16 (ORB. An invocation on the object in the second ORB arrives at an implementation whose) 126 586.02 P
(job it is to perform an invocation in the \336rst ORB. On Machine A in FIG. 15 on page 162) 126 572.02 T
(an object implemented using ORB 1 might be made available in ORB 2 by creating an) 126 558.02 T
-0.21 (implementation in ORB 2 that, when invoked, simply invokes the corresponding object in) 126 544.02 P
(ORB 1. A common use for reference embedding is when one ORB is a library ORB or) 126 530.02 T
(other optimized implementation that cannot be accessed remotely) 126 516.02 T
(. By embedding those) 440 516.02 T
(objects that must be accessed remotely) 126 502.02 T
(, most of the bene\336ts of the optimized ORB can be) 311.42 502.02 T
(had without sacri\336cing generality) 126 488.02 T
(.) 286.11 488.02 T
1 F
(10.1.2) 87.26 456.02 T
0 F
(Protocol T) 126 456.02 T
(ranslation) 180.21 456.02 T
2 F
(When two ORBs dif) 126 438.02 T
(fer in their implementation details but have similar functionality) 224.06 438.02 T
(, it) 531.09 438.02 T
(will often be possible to translate requests in one ORB to be requests in the other ORB.) 126 424.02 T
(For example, two RPC-based ORBs might dif) 126 410.02 T
(fer in their object reference representation) 346.67 410.02 T
(and packet formats, but otherwise present the same semantics. If it is possible to map) 126 396.02 T
(object references in one ORB into object references in the other domain, and translate) 126 382.02 T
-0.39 (packets from one format to the other) 126 368.02 P
-0.39 (, a gateway could be constructed to pass requests back) 298.4 368.02 P
(and forth.) 126 354.02 T
1 F
(10.1.3) 87.26 322.02 T
0 F
(Alternate ORBs) 126 322.02 T
2 F
(An object implementation implicitly chooses an ORB when it binds to a particular object) 126 304.02 T
(adapter) 126 290.02 T
(. If a machine supports multiple ORBs and the same object adapter interface is) 160.64 290.02 T
-0.2 (available on more than one ORB, an object implementation may choose to make the same) 126 276.02 P
(object available through multiple ORBs. Because the object adapter interface is the same) 126 262.02 T
(in each case, few changes would be necessary to the object implementation code to sup-) 126 248.02 T
-0.17 (port multiple ORBs. However) 126 234.02 P
-0.17 (, the scope and performance of the dif) 269.6 234.02 P
-0.17 (ferent ORBs might be) 450.07 234.02 P
(quite dif) 126 220.02 T
(ferent.) 166.09 220.02 T
-0.29 (In this case, an object implementation might generate object references in dif) 126 194.02 P
-0.29 (ferent ORBs.) 492.3 194.02 P
(The interface to the object could de\336ne operations that would allow a client to obtain an) 126 180.02 T
(equivalent object reference in a dif) 126 166.02 T
(ferent ORB.) 292.64 166.02 T
52 554.02 54 580.02 R
V
FMENDPAGE
%%EndPage: "163" 162
%%Page: "162" 162
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(Interoperability) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(162) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
54 668.99 540 672.02 C
108 670.5 540 670.5 2 L
0.25 H
2 Z
0 X
0 K
N
54 670.5 99 670.5 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(10.1) 75.37 676.68 T
0 F
(The Organization of Multiple ORBs) 108 676.68 T
2 12 Q
(FIG. 15 on page 162 shows three possible scenarios in which multiple ORBs coexist) 108 650.99 T
(\050although we will describe the \336rst scenario as a single ORB\051.) 108 636.99 T
1 10 Q
(1.) 108 616.99 T
2 12 Q
-0.2 (ORB 1 is implemented on both Machine A and Machine B. Both implementations use) 126 616.99 P
(the same object references and communication mechanism, and an object reference) 126 602.99 T
(can be freely passed from Machine A to Machine B. W) 126 588.99 T
(e actually consider this case to) 390.49 588.99 T
(be a single ORB implemented on two machines since no transformation is needed to) 126 574.99 T
(move object references from one machine to the other) 126 560.99 T
(.) 384.46 560.99 T
1 10 Q
(2.) 108 543.99 T
2 12 Q
(On Machine A, the same client may have some objects implemented by ORB 1 and) 126 543.99 T
(some by ORB 2. It is thus possible to an invoke an object reference in one ORB and) 126 529.99 T
(pass as a parameter an object reference from another ORB. In any particular comput-) 126 515.99 T
(ing environment, an ORB must be able to distinguish its own object references from) 126 501.99 T
(others\325, and must be able to pass other ORB\325) 126 487.99 T
(s object references as parameters.) 340.86 487.99 T
1 10 Q
(3.) 108 470.99 T
2 12 Q
(Between Machine B and Machine C, there are no common ORBs. In order to pass) 126 470.99 T
-0.08 (\050and subsequently invoke\051 objects between Machine B and Machine C, it is necessary) 126 456.99 P
-0.31 (to construct a gateway to translate object references and requests in one ORB to object) 126 442.99 P
(references and requests in the other) 126 428.99 T
(.) 294.86 428.99 T
54 397.96 540 410.99 C
108 405.02 540 405.02 2 L
0.25 H
2 Z
0 X
0 K
N
54 405.02 99 405.02 2 L
0 Z
N
0 0 612 792 C
54 373.99 540 387.96 C
54 379.97 540 379.97 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
(FIG.  15) 54 391.29 T
0 F
(Multiple ORBs) 108 391.29 T
72 111.98 540 373.99 C
72 111.98 540 373.99 R
7 X
0 K
V
414 176.08 531 248.08 R
3 H
2 Z
0 X
N
108 167.08 225 239.08 R
4 H
3 X
N
108 266.08 225 338.08 R
8 X
N
396 365.08 396 131.08 2 L
11 X
N
243 365.08 243 131.08 2 L
N
1 9 Q
0 X
(Machine A) 139.53 140.08 T
(Machine B) 291.38 141.04 T
(Machine C) 453.38 141.04 T
(ORB 3) 455.42 213.04 T
(ORB 1) 148.77 303.04 T
(ORB 2) 148.77 196.59 T
261 266.08 378 338.08 R
8 X
N
0 X
(ORB 1) 301.77 303.04 T
99 257.08 387 347.08 18 RR
0.5 H
N
(Gateway) 408.87 267.04 T
418.81 259.14 431.98 239.08 410.18 249.11 414.49 254.13 4 Y
1 X
V
382.16 273.02 368.99 293.08 390.79 283.05 386.48 278.04 4 Y
V
414.51 254.12 386.49 278.03 2 L
4 H
0 Z
N
0 0 612 792 C
34 646.99 36 658.99 R
0 X
0 K
V
FMENDPAGE
%%EndPage: "162" 161
%%Page: "161" 161
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 378 558 378 2 L
7 X
V
2 Z
0 X
N
72 74.02 558 74.02 2 L
7 X
V
0.25 H
0 X
N
72 55.01 558 66.96 R
7 X
V
0 9 Q
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
-2.78 (161) 541.33 60.29 P
72 396 558 693 R
7 X
V
0 24 Q
0 X
-0.48 (10) 72 677 S
-0.48 (Interoperability) 126 677 S
72 87.98 558 360 R
7 X
V
2 12 Q
0 X
(It is an explicit goal of the Common ORB Architecture to allow interoperation between) 126 352 T
(dif) 126 338 T
(ferent object systems and ORBs. The lar) 139.11 338 T
(ge diversity of ORB implementation tech-) 333.09 338 T
(niques means that a single strategy or technology for interoperation would be infeasible.) 126 324 T
(However) 126 310 T
(, there is substantial experience in the industry in connecting networks with dif-) 169.48 310 T
(ferent protocols, and we look to those working examples that are in everyday use for the) 126 296 T
(model of how to connect ORBS.) 126 282 T
(In general, there is no single protocol that can meet everyone\325) 126 256 T
(s needs, and there is no sin-) 422.11 256 T
(gle means to interoperate between two dif) 126 242 T
(ferent protocols. There are many environments) 326.96 242 T
(in which multiple protocols coexist, and there are ways to bridge between environments) 126 228 T
(that share no protocols. These same truths will hold for ORBs as well.) 126 214 T
(The primary requirement to allow convenient interoperation is to have a higher) 126 188 T
(-level) 505.15 188 T
(model that spans the dif) 126 174 T
(ferences. In the case of the ORB, there is an obvious higher) 240.38 174 T
(-level) 525.58 174 T
(model\321IDL-de\336ned object-oriented invocation. Because IDL is de\336ned in an ORB-inde-) 126 160 T
(pendent way) 126 146 T
(, and because clients and object implementations can be built in an ORB-) 186.17 146 T
-0.26 (independent way) 126 132 P
-0.26 (, it is possible for a particular request to pass through multiple ORBs, pre-) 206.57 132 P
(serving the invocation semantics transparent to clients and implementations.) 126 118 T
FMENDPAGE
%%EndPage: "161" 160
%%Page: "160" 160
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(The Basic Object Adapter) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(160) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
FMENDPAGE
%%EndPage: "160" 159
%%Page: "159" 159
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(C Language Mapping for Object Implementations) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(159) 541.33 60.29 T
72 87.98 558 686.02 R
7 X
V
2 12 Q
0 X
(The) 126 678.02 T
5 F
(create) 147.65 678.02 T
2 F
( BOA operation has the following signature:) 190.82 678.02 T
5 10 Q
(Object BOA_create \050) 126 653.35 T
(/* C */) 504 653.35 T
(Object) 144 641.35 T
(boa,) 306 641.35 T
(Environment) 144 629.35 T
(*ev,) 306 629.35 T
(ReferenceData) 144 617.35 T
(*id,) 306 617.35 T
(InterfaceDef) 144 605.35 T
(intf,) 306 605.35 T
(ImplementationDef) 144 593.35 T
(impl) 306 593.35 T
(\051;) 126 581.35 T
2 12 Q
(Although in each example, we are using an \322object\323 that is special \050an ORB, an object) 126 556.02 T
(adapter) 126 542.02 T
(, or an object reference\051, the method name is generated as) 160.82 542.02 T
5 F
(interface_operation) 126 528.02 T
2 F
( in the same way as ordinary objects. Also, the signature con-) 262.73 528.02 T
(tains an) 126 514.02 T
5 F
(Environment) 165.97 514.02 T
2 F
( parameter for error indications.) 245.13 514.02 T
(In the \336rst two cases, the signature calls for an object reference to represent the particular) 126 488.02 T
-0.1 (ORB or object adapter being manipulated. Programs may obtain these objects in a variety) 126 474.02 P
-0.24 (of ways, for example, in a global variable before program startup if there is only one ORB) 126 460.02 P
(or BOA that makes sense, or by obtaining them from a name service if more than one is) 126 446.02 T
(available. In the third case, the object reference being operated on is speci\336ed as the \336rst) 126 432.02 T
(parameter) 126 418.02 T
(.) 173.29 418.02 T
(Following the same procedure, the C language binding for the remainder of the ORB,) 126 392.02 T
(BOA, and object reference operations may be determined.) 126 378.02 T
52 590.02 54 686.02 R
V
52 552.02 54 564.02 R
V
52 510.02 54 536.02 R
V
FMENDPAGE
%%EndPage: "159" 158
%%Page: "158" 158
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(The Basic Object Adapter) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(158) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
2 12 Q
0 X
(The) 108 678.02 T
5 F
(ev) 129.65 678.02 T
2 F
( parameter is the environment parameter passed into the method. The caller must) 144.04 678.02 T
(supply a value for the major parameter) 108 664.02 T
(. The value of the major parameter constrains the) 293.19 664.02 T
(other parameters in the call as follows:) 108 650.02 T
(\245) 108 630.02 T
-0.29 (If the) 126 630.02 P
5 F
-0.7 (major) 154.06 630.02 P
2 F
-0.29 ( parameter has the value NO_EXCEPTION, then it speci\336es that this is a) 190.04 630.02 P
(normal outcome to the operation. In this case, both) 126 616.02 T
5 F
(exceptname) 372.84 616.02 T
2 F
( and) 444.8 616.02 T
5 F
(param) 468.11 616.02 T
2 F
( must) 504.09 616.02 T
(be NULL. Note that it is) 126 602.02 T
4 F
(not) 246.26 602.02 T
2 F
( necessary to invoke) 261.58 602.02 T
5 F
(set_exception\050\051) 362.17 602.02 T
2 F
( to indicate a) 470.11 602.02 T
(normal outcome; it is the default behavior if the method simply returns.) 126 588.02 T
(\245) 108 571.02 T
(For any other value of) 126 571.02 T
5 F
(major) 235.58 571.02 T
2 F
( it speci\336es either a user) 271.56 571.02 T
(-de\336ned or standard exception.) 386.9 571.02 T
(The) 126 557.02 T
5 F
(exceptname) 147.65 557.02 T
2 F
( parameter is a string representing the exception type identi\336er) 219.61 557.02 T
(. If) 519.06 557.02 T
-0.48 (the exception is declared to take parameters, the) 126 543.02 P
5 F
-1.14 (param) 355.67 543.02 P
2 F
-0.48 ( parameter must be the address) 391.64 543.02 P
-0.14 (of a struct containing the parameters according to the C language mapping, coerced to) 126 529.02 P
(a) 126 515.02 T
5 F
(void *) 134.32 515.02 T
2 F
(; if the exception takes no parameters,) 177.5 515.02 T
5 F
(param) 362.69 515.02 T
2 F
( must be NULL.) 398.67 515.02 T
(When raising an exception, the method code is) 108 489.02 T
4 F
(not) 335.5 489.02 T
2 F
( required to assign legal values to any) 350.83 489.02 T
3 F
(out) 108 475.02 T
2 F
( or) 123.29 475.02 T
3 F
(inout) 139.28 475.02 T
2 F
( parameters. Due to restrictions in C, it must return a legal function value.) 163.31 475.02 T
1 F
(9.3.3) 75.93 443.02 T
0 F
(Binding Methods to Skeletons) 108 443.02 T
2 F
(It is not speci\336ed as part of the language mapping how the skeletons are connected to the) 108 425.02 T
(methods. Dif) 108 411.02 T
(ferent means will be used in dif) 170.41 411.02 T
(ferent environments, for example, the skele-) 321.42 411.02 T
-0.09 (tons may make references to the methods that are resolved by the linker or there may be a) 108 397.02 P
(system-dependent call done at program startup to specify the location of the methods.) 108 383.02 T
1 F
(9.3.4) 75.93 351.02 T
0 F
(BOA and ORB routines) 108 351.02 T
2 F
(The operations on the BOA de\336ned earlier in this chapter and the operations on the ORB) 108 325.02 T
-0.3 (de\336ned in Chapter 8 are used as if they had the IDL de\336nitions described in the document,) 108 311.02 P
(and then mapped in the usual way with the C language mapping.) 108 297.02 T
(For example, the) 108 271.02 T
6 F
(string_to_object) 191.94 271.02 T
2 F
( ORB operation has the following signature:) 275.21 271.02 T
5 10 Q
(Object ORB_string_to_object \050) 108 246.35 T
(/* C */) 486 246.35 T
(Object) 126 234.35 T
(orb,) 216 234.35 T
(Environment) 126 222.35 T
(*ev,) 216 222.35 T
(char) 126 210.35 T
(*objectstring) 216 210.35 T
(\051;) 108 198.35 T
34 439.02 36 686.02 R
V
34 195.02 36 279.02 R
V
FMENDPAGE
%%EndPage: "158" 157
%%Page: "157" 157
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(C Language Mapping for Object Implementations) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(157) 541.33 60.29 T
72 87.98 558 686.02 R
7 X
V
1 12 Q
0 X
(9.3.1) 93.93 678.02 T
0 F
(Operation-speci\336c details) 126 678.02 T
2 F
-0.05 (Chapter 5 de\336nes most of the details of naming of parameter types and parameter passing) 126 660.02 P
(conventions. Generally) 126 646.02 T
(, for those parameters that are operation-speci\336c, the method) 236.47 646.02 T
-0.36 (implementing the operation appears to receive the same values that would be passed to the) 126 632.02 P
(stubs.) 126 618.02 T
1 F
(9.3.2) 93.93 586.02 T
0 F
(Method signatures) 126 586.02 T
2 F
(W) 126 568.02 T
(ith the BOA, implementation methods have signatures that are identical to the stubs.) 136.84 568.02 T
(If the following interface is de\336ned in IDL:) 126 542.02 T
3 10 Q
(interface example4 {) 126 517.35 T
(long op5\050in long arg6\051;) 144 505.35 T
(};) 126 493.35 T
2 12 Q
(a method for the) 126 468.02 T
6 F
(op5) 207.94 468.02 T
2 F
( routine must have the following function signature:) 226.6 468.02 T
5 10 Q
(long example4_op5\050) 126 443.35 T
(/* C */) 504 443.35 T
(example4) 144 431.35 T
(object,) 234 431.35 T
(Environment) 144 419.35 T
(*ev,) 234 419.35 T
(long) 144 407.35 T
(arg6) 234 407.35 T
(\051;) 126 395.35 T
2 12 Q
-0.23 (The) 126 370.02 P
5 F
-0.55 (object) 147.42 370.02 P
2 F
-0.23 ( parameter is the object reference that was invoked. The method can identify) 190.6 370.02 P
-0.01 (which object was intended by using the) 126 356.02 P
6 F
-0.01 (get_id) 318.16 356.02 P
2 F
-0.01 ( BOA operation. The) 349.48 356.02 P
5 F
-0.02 (ev) 453.71 356.02 P
2 F
-0.01 ( parameter is used) 468.1 356.02 P
(for authentication on the) 126 342.02 T
6 F
(get_principal) 246.58 342.02 T
2 F
( BOA operation, and is used for indicating excep-) 314.55 342.02 T
(tions.) 126 328.02 T
(The method terminates successfully by executing a) 126 302.02 T
5 F
(return) 374.16 302.02 T
2 F
( statement returning the) 417.33 302.02 T
(declared operation value. Prior to returning the result of a successful invocation, the) 126 288.02 T
(method code must assign legal values to all) 126 274.02 T
3 F
(out) 337.2 274.02 T
2 F
( and) 352.5 274.02 T
3 F
(inout) 375.81 274.02 T
2 F
( parameters.) 399.85 274.02 T
-0.16 (The method terminates with an error by executing the) 126 248.02 P
5 F
-0.39 (set_exception) 385.33 248.02 P
2 F
-0.16 ( BOA operation) 478.88 248.02 P
-0.11 (prior to executing a) 126 234.02 P
5 F
-0.26 (return) 222.17 234.02 P
2 F
-0.11 ( statement. The) 265.34 234.02 P
5 F
-0.26 (set_exception) 341.64 234.02 P
2 F
-0.11 ( operation has the follow-) 435.18 234.02 P
(ing C language de\336nition:) 126 220.02 T
5 10 Q
(void BOA_set_exception) 126 195.35 T
(\050) 263.92 195.35 T
(/* C */) 504 195.35 T
(Object) 144 183.35 T
(boa,) 252 183.35 T
(Environment) 144 171.35 T
(*ev,) 252 171.35 T
(exception_type) 144 159.35 T
(major,) 252 159.35 T
(char) 144 147.35 T
(*exceptname,) 252 147.35 T
(void) 144 135.35 T
(*param) 252 135.35 T
(\051;) 126 123.35 T
52 538.02 54 576.02 R
V
52 338.02 54 450.02 R
V
52 284.02 54 310.02 R
V
52 120.02 54 256.02 R
V
FMENDPAGE
%%EndPage: "157" 156
%%Page: "156" 156
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(The Basic Object Adapter) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(156) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
6 10 Q
0 X
(Principal get_principal \050) 108 679.35 T
(// PIDL) 504 679.35 T
(in Object) 126 667.35 T
(obj,) 234 667.35 T
(in Envir) 126 655.35 T
(onment) 161.09 655.35 T
(ev) 234 655.35 T
(\051;) 108 643.35 T
2 12 Q
(The) 108 618.02 T
6 F
(obj) 129.65 618.02 T
2 F
( parameter is the object reference passed to the method. If another object is used) 146.31 618.02 T
(the result is unde\336ned. The) 108 604.02 T
6 F
(ev) 241.25 604.02 T
2 F
( parameter is the language-mapping-speci\336c request envi-) 252.57 604.02 T
(ronment passed to the method.) 108 590.02 T
(The meaning of the principal depends on the security environment that the implementa-) 108 564.02 T
-0.22 (tion is running in. The decision of whether or not to permit a particular operation is left up) 108 550.02 P
(to the implementation. T) 108 536.02 T
(ypically) 225.76 536.02 T
(, an implementation will associate access rights with par-) 263.63 536.02 T
(ticular objects and principals, and will examine those access rights to determine if the) 108 522.02 T
(principal making the request has the privileges required by the particular method. An) 108 508.02 T
(implementation could store a reference to the access control information for an object in) 108 494.02 T
(the) 108 480.02 T
6 F
(id) 125.65 480.02 T
2 F
( for the object.) 135.66 480.02 T
1 F
(9.2.5) 75.93 448.02 T
0 F
(Persistent Storage) 108 448.02 T
2 F
(Objects \050or) 108 430.02 T
(, more precisely) 161.14 430.02 T
(, object references\051 are made persistent by the BOA and the) 237.3 430.02 T
-0.15 (ORB Core, in that a client that has an object reference can use it at any time without warn-) 108 416.02 P
(ing, even if the implementation has been deactivated or the system has been restarted.) 108 402.02 T
(Although the ORB Core and BOA maintain the persistence of object references, the) 108 388.02 T
-0 (implementation must participate in keeping any data outside the ORB Core and BOA per-) 108 374.02 P
(sistent.) 108 360.02 T
-0.38 (T) 108 334.02 P
-0.38 (oward this end, the BOA provides a small amount of storage for an object in the) 114.49 334.02 P
6 F
-0.38 (id) 495.79 334.02 P
2 F
-0.38 ( value.) 505.79 334.02 P
(In most cases, this storage is insuf) 108 320.02 T
(\336cient and inconvenient for the complete state of the) 271.35 320.02 T
(object. Instead, the implementation provides and manages that storage, using the) 108 306.02 T
6 F
(id) 497.74 306.02 T
2 F
( value) 507.74 306.02 T
(to locate the actual storage. For example, the) 108 292.02 T
6 F
(id) 325.84 292.02 T
2 F
( value might contain the name of a \336le, or) 335.84 292.02 T
(a key for a database system that holds the persistent state.) 108 278.02 T
54 231.99 540 235.02 C
108 233.5 540 233.5 2 L
0.25 H
2 Z
0 X
0 K
N
54 233.5 99 233.5 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(9.3) 83.15 239.68 T
0 F
(C Language Mapping for Object Implementations) 108 239.68 T
2 12 Q
(Dif) 108 213.99 T
(ferent programming languages may provide access to the basic ORB functionality in) 123.77 213.99 T
-0.19 (dif) 108 199.99 P
-0.19 (ferent ways. Most of the issues of language mapping apply to all operations on all inter-) 121.11 199.99 P
(faces, and address such questions as the programming language view of the object refer-) 108 185.99 T
(ence, conventions for calling stubs and being called by skeletons, means of passing) 108 171.99 T
(exception information, etc. There are a few details that apply speci\336cally to the object) 108 157.99 T
(adapter) 108 143.99 T
(, such as how the implementation methods are connected to the skeleton.) 142.82 143.99 T
34 586.02 36 686.02 R
V
34 476.02 36 502.02 R
V
34 412.02 36 424.02 R
V
34 370.02 36 396.02 R
V
34 330.02 36 342.02 R
V
34 288.02 36 314.02 R
V
34 209.99 36 221.99 R
V
FMENDPAGE
%%EndPage: "156" 155
%%Page: "155" 155
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(Basic Object Adapter Interface) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(155) 541.33 60.29 T
72 87.98 558 686.02 R
7 X
V
2 12 Q
0 X
-0.41 (A typical implementation will use the) 126 678.02 P
6 F
-0.41 (id) 307.45 678.02 P
2 F
-0.41 (value to distinguish dif) 320.04 678.02 P
-0.41 (ferent objects, but it is free) 428.88 678.02 P
(to use it in any way it chooses or to assign the same value to dif) 126 664.02 T
(ferent object references.) 431.26 664.02 T
-0.05 (T) 126 650.02 P
-0.05 (wo object references created with the same parameters are) 132.49 650.02 P
4 F
-0.05 (not) 414.73 650.02 P
2 F
-0.05 ( the same object reference) 430.06 650.02 P
-0.34 (as far as the ORB is concerned, although the implementation may or may not treat them as) 126 636.02 P
(references to the same object. Note that the object reference itself is opaque and may be) 126 622.02 T
(dif) 126 608.02 T
(ferent for dif) 139.11 608.02 T
(ferent ORBs, but the) 200.17 608.02 T
6 F
(id) 302.43 608.02 T
2 F
( value is available portably in all ORBs. Only the) 312.44 608.02 T
(implementation can normally interpret the) 126 594.02 T
6 F
(id) 331.53 594.02 T
2 F
( value. The operation to get the) 341.53 594.02 T
6 F
(id) 494.09 594.02 T
2 F
(is a BOA) 507.09 594.02 T
(operation:) 126 580.02 T
6 10 Q
(Refer) 126 561.35 T
(enceData get_id \050in Object obj\051;) 149.68 561.35 T
(// PIDL) 522 561.35 T
2 12 Q
(It is possible for the implementation associated with an object reference to be changed.) 126 536.02 T
-0.18 (This will cause subsequent requests to be handled according to the information in the new) 126 522.02 P
(implementation. The operation to set the implementation) 126 508.02 T
(is a BOA operation:) 401.84 508.02 T
6 10 Q
(void change_implementation \050) 126 483.35 T
(// PIDL) 522 483.35 T
(in Object) 144 471.35 T
(obj,) 288 471.35 T
(in ImplementationDef) 144 459.35 T
(impl) 288 459.35 T
(\051;) 126 447.35 T
1 12 Q
(NOTE) 87.28 422.02 T
4 F
(Car) 126 422.02 T
(e must be taken in or) 144.22 422.02 T
(der to change the implementation after the object has been) 244.04 422.02 T
(cr) 126 408.02 T
(eated. Ther) 135.55 408.02 T
(e ar) 189.73 408.02 T
(e issues of synchr) 208.27 408.02 T
(onization with activation, security) 292.11 408.02 T
(, and whether or not) 454.7 408.02 T
(the new implementation is pr) 126 394.02 T
(epar) 264.81 394.02 T
(ed to handle r) 286.35 394.02 T
(equests for that object. The) 352.87 394.02 T
6 F
(change_implementation) 126 380.02 T
4 F
( operation affects all copies of that particular object r) 248.6 380.02 T
(efer) 507.02 380.02 T
(ence.) 525.22 380.02 T
2 F
(If an object reference is copied, all copies have the same) 126 354.02 T
6 F
(id) 399.76 354.02 T
2 F
(,) 409.76 354.02 T
6 F
(intf) 415.76 354.02 T
2 F
(, and) 433.75 354.02 T
6 F
(impl.) 460.06 354.02 T
2 F
-0.04 (An implementation is allowed to dispose of an object it has created by asking the BOA to) 126 328.02 P
(invalidate the object reference. The implementation is responsible for deallocating all) 126 314.02 T
-0.32 (other information about the object. After a) 126 300.02 P
6 F
-0.32 (dispose) 330.3 300.02 P
2 F
-0.32 ( is done, the ORB Core and BOA act as) 367.62 300.02 P
(if the object had never been created, and attempts to issue requests on any existing object) 126 286.02 T
(references for that object will fail.) 126 272.02 T
6 10 Q
(void dispose \050in Object obj\051;) 126 253.35 T
(// PIDL) 522 253.35 T
2 12 Q
-0.12 (Note that all of the operations on object references in this section may be done whether or) 126 228.02 P
(not the object is active.) 126 214.02 T
1 F
(9.2.4) 93.93 182.02 T
0 F
(Authentication and Access Control) 126 182.02 T
2 F
(The BOA does not enforce any speci\336c style of security management. It guarantees that) 126 164.02 T
(for every method invocation \050or object activation\051 it will identify the principal on whose) 126 150.02 T
-0.48 (behalf the request is performed. The object implementation can obtain this principal by the) 126 136.02 P
(operation:) 126 122.02 T
52 674.02 54 686.02 R
V
52 632.02 54 658.02 R
V
52 590.02 54 616.02 R
V
52 558.02 54 568.02 R
V
52 444.02 54 516.02 R
V
52 350.02 54 388.02 R
V
52 296.02 54 308.02 R
V
52 250.02 54 260.02 R
V
FMENDPAGE
%%EndPage: "155" 154
%%Page: "154" 154
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(The Basic Object Adapter) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(154) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
2 12 Q
0 X
(for that object. The server remains active and will receive requests until it calls) 108 678.02 T
6 F
(deactivate_obj) 108 664.02 T
2 F
(.) 182.61 664.02 T
-0.44 (A new server is started whenever a request is made for an object that is not yet active, even) 108 638.02 P
(if a server for another object with the same implementation is active.) 108 624.02 T
1 11 Q
(9.2.2.3) 69 598.68 T
0 F
(Server-per-Method Activation Policy) 108 598.68 T
2 12 Q
(Under the server) 108 582.02 T
(-per) 187.68 582.02 T
(-method policy) 206.75 582.02 T
(, a new server is always started each time a request is) 278.93 582.02 T
(made. The server runs only for the duration of the particular method. Several servers for) 108 568.02 T
-0.41 (the same object or even the same method of the same object may be active simultaneously) 108 554.02 P
-0.41 (.) 534.41 554.02 P
-0.29 (Because a new server is started for each request, it is not necessary for the implementation) 108 540.02 P
(to notify the BOA when an object is ready or deactivated.) 108 526.02 T
-0.33 (The BOA activates an implementation for each request, whether or not another request for) 108 500.02 P
(that operation, object, or implementation is active at the same time.) 108 486.02 T
1 11 Q
(9.2.2.4) 69 460.68 T
0 F
(Persistent Server Activation Policy) 108 460.68 T
2 12 Q
(Persistent servers are those servers which are activated by means outside the BOA. Such) 108 444.02 T
(implementations notify the BOA that they are available using the) 108 430.02 T
6 F
(impl_is_r) 423.8 430.02 T
(eady) 472.23 430.02 T
2 F
( opera-) 496.21 430.02 T
-0.12 (tion. Once the BOA knows about a persistent server) 108 416.02 P
-0.12 (, it treats the server as a shared server) 356.05 416.02 P
-0.12 (,) 534.12 416.02 P
(sending it activations for individual objects and method calls. If no implementation is) 108 402.02 T
(ready when a request arrives, an error is returned for that request.) 108 388.02 T
1 F
(9.2.3) 75.93 356.02 T
0 F
(Generation and Interpretation of Object References) 108 356.02 T
2 F
(Object references are generated by the BOA using the ORB Core when requested by an) 108 338.02 T
(implementation. The BOA and the ORB Core work together to associate some informa-) 108 324.02 T
-0.08 (tion with a particular object reference. This information is later provided to the implemen-) 108 310.02 P
(tation upon the activation of an object. Note that this is the only information an) 108 296.02 T
(implementation may use portably to distinguish dif) 108 282.02 T
(ferent object references. The BOA) 352.99 282.02 T
(operation used to create a new object reference is:) 108 268.02 T
6 10 Q
(Object cr) 108 243.35 T
(eate \050) 148.06 243.35 T
(// PIDL) 504 243.35 T
(in Refer) 126 231.35 T
(enceData) 160.51 231.35 T
(id,) 234 231.35 T
(in InterfaceDef) 126 219.35 T
(intf,) 234 219.35 T
(in ImplementationDef) 126 207.35 T
(impl) 234 207.35 T
(\051;) 108 195.35 T
2 12 Q
(The) 108 170.02 T
6 F
(id) 129.65 170.02 T
2 F
( is immutable identi\336cation information, chosen by the implementation at object) 139.65 170.02 T
-0.31 (creation time, and never changed during the lifetime of the object. The) 108 156.02 P
6 F
-0.31 (intf) 446 156.02 P
2 F
-0.31 ( is the Interface) 463.99 156.02 P
(Repository object that speci\336es the complete set of interfaces implemented by the object.) 108 142.02 T
(The) 108 128.02 T
6 F
(impl) 129.65 128.02 T
2 F
( is the Implementation Repository object that speci\336es the implementation to be) 152.98 128.02 T
(used for the object.) 108 114.02 T
34 660.02 36 672.02 R
V
34 426.02 36 438.02 R
V
34 320.02 36 346.02 R
V
34 152.02 36 250.02 R
V
34 124.02 36 136.02 R
V
FMENDPAGE
%%EndPage: "154" 153
%%Page: "153" 153
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(Basic Object Adapter Interface) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(153) 541.33 60.29 T
72 87.98 558 686.02 R
7 X
V
72 672.98 558 686.02 C
126 680.04 558 680.04 2 L
0.25 H
2 Z
0 X
0 K
N
72 680.04 117 680.04 2 L
0 Z
N
0 0 612 792 C
72 649.02 558 662.98 C
72 654.99 558 654.99 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
(FIG.  14) 72 666.32 T
0 F
(Implementation Activation Policies) 126 666.32 T
1 11 Q
(9.2.2.1) 87 362.64 T
0 F
(Shared Server Activation Policy) 126 362.64 T
2 12 Q
(In a shared server) 126 345.97 T
(, multiple objects may be implemented by the same program. This is) 210.43 345.97 T
-0.37 (likely to be the most common kind of server) 126 331.97 P
-0.37 (. The server is activated the \336rst time a request) 334.89 331.97 P
(is performed on any object implemented by that server) 126 317.97 T
(. When the server has initialized) 387.82 317.97 T
(itself, it noti\336es the BOA that it is ready by calling) 126 303.97 T
6 F
(impl_is_r) 371.86 303.97 T
(eady) 420.29 303.97 T
2 F
(. Subsequently) 443.5 303.97 T
(, the) 513.35 303.97 T
(BOA will deliver requests or object activations for any objects implemented by that) 126 289.97 T
(server) 126 275.97 T
(. The server remains active and will receive requests until it calls) 154.64 275.97 T
6 F
(deactivate_impl) 468.74 275.97 T
2 F
(.) 550.02 275.97 T
(The BOA will not activate another server for that implementation if one is active.) 126 261.97 T
-0.42 (Before the \336rst request is delivered for a particular object, the object activate routine of the) 126 235.97 P
(server is called. An object remains active as long as its server is active, unless the server) 126 221.97 T
(calls) 126 207.97 T
6 F
(deactivate_obj) 150.98 207.97 T
2 F
( for that object.) 225.59 207.97 T
1 11 Q
(9.2.2.2) 87 182.64 T
0 F
(Unshared Server Activation Policy) 126 182.64 T
2 12 Q
-0.23 (In an unshared server) 126 165.97 P
-0.23 (, each object is implemented in a dif) 227.74 165.97 P
-0.23 (ferent server) 399.82 165.97 P
-0.23 (. This kind of server) 459.2 165.97 P
(is convenient if a object is intended to encapsulate an application or if the server requires) 126 151.97 T
(exclusive access to a resource such as a printer) 126 137.97 T
(. A new server is activated the \336rst time a) 349.81 137.97 T
(request is performed on the object. When the server has initialized itself, it noti\336es the) 126 123.97 T
-0.38 (BOA that it is ready by calling) 126 109.97 P
6 F
-0.38 (obj_is_r) 273.6 109.97 P
-0.38 (eady) 315.36 109.97 P
2 F
-0.38 (. Subsequently) 338.56 109.97 P
-0.38 (, the BOA will deliver requests) 408.04 109.97 P
72 87.98 558 686.02 C
81 381.97 558 649.02 C
81 381.97 558 649.02 R
7 X
0 K
V
406 406.02 442 427.66 R
5 X
V
0.5 H
2 Z
0 X
N
414 541.02 531 622.02 R
5 X
V
0 X
N
306 577.02 342 595.02 R
5 X
V
0 X
N
288 532.02 324 550.02 R
5 X
V
0 X
N
306 604.02 342 622.02 R
5 X
V
0 X
N
252 577.02 288 595.02 R
5 X
V
0 X
N
252 604.02 288 622.02 R
5 X
V
0 X
N
1 9 Q
(Object) 458.12 413.2 T
423 586.02 468 613.02 13.5 RR
N
405.9 434.86 441.9 452.86 9 RR
N
279 523.02 333 559.02 18 RR
N
243 568.02 351 631.02 18 RR
N
423 550.02 468 577.02 13.5 RR
N
477 550.02 522 577.02 13.5 RR
N
477 586.02 522 613.02 13.5 RR
N
(Process) 459.9 440.22 T
117 406.02 270 478.02 18 RR
7 X
V
1 H
0 X
N
(Basic) 181.51 456.14 T
(Object) 179.52 439.47 T
(Adapter) 176.52 422.79 T
149.69 538.48 153 550.02 156.31 538.48 153 538.48 4 Y
3 X
V
153 478.02 153 538.48 2 L
N
269.05 525.3 278.99 532.02 274.12 521.05 271.59 523.18 4 Y
V
234 478.02 271.59 523.17 2 L
N
412.16 589.86 422.99 595.02 416.54 584.9 414.35 587.38 4 Y
V
270 460.02 414.36 587.38 2 L
N
165.31 489.55 162 478.02 158.69 489.55 162 489.55 4 Y
0 X
V
162 550.02 162 489.55 2 L
V
N
261.81 484.93 252 478.02 256.66 489.08 259.23 487 4 Y
V
288 523.02 259.23 487 2 L
V
N
281.22 446.27 269.99 442.02 277.27 451.57 279.24 448.92 4 Y
V
477 595.02 279.25 448.91 2 L
V
N
416.54 463.44 405 466.75 416.54 470.06 416.54 466.75 4 Y
V
433 466.75 416.54 466.75 2 L
N
421.46 488.04 433 484.73 421.46 481.43 421.46 484.73 4 Y
3 X
V
406 484.73 421.46 484.73 2 L
N
206.8 486.17 197.99 478.02 201.14 489.6 203.97 487.89 4 Y
0 X
V
252 568.02 203.98 487.88 2 L
V
N
(A) 137.33 525.2 T
(B) 207 525.2 T
(C) 243 507.05 T
(D) 379.78 552.2 T
411.52 555.48 422.99 559.02 415.14 549.94 413.33 552.71 4 Y
3 X
V
270 460.02 413.35 552.71 2 L
N
474.38 583.01 486 586.02 477.74 577.31 476.06 580.16 4 Y
V
270 460.02 476.06 580.16 2 L
N
465.16 556.99 476.99 559.02 468.04 551.03 466.6 554.01 4 Y
V
270 460.02 466.61 554.01 2 L
N
280.81 447.22 269.99 442.02 276.41 452.16 278.61 449.69 4 Y
0 X
V
432 586.02 278.62 449.68 2 L
V
N
281.5 445.44 270 442.02 277.94 451.01 279.72 448.23 4 Y
V
441 550.02 279.72 448.22 2 L
V
N
281.82 444.07 269.99 442.02 278.93 450.03 280.38 447.05 4 Y
V
495 550.02 280.38 447.04 2 L
V
N
(Start Process) 460 480.64 T
(Register Impl) 460 462.66 T
171 559.02 207 577.02 R
5 X
V
0.5 H
0 X
N
171 586.02 207 604.02 R
5 X
V
0 X
N
117 559.02 153 577.02 R
5 X
V
0 X
N
117 586.02 153 604.02 R
5 X
V
0 X
N
108 550.02 216 613.02 18 RR
N
72 87.98 558 686.02 C
0 0 612 792 C
52 299.97 54 311.97 R
0 X
0 K
V
52 271.97 54 283.97 R
V
52 203.97 54 215.97 R
V
52 105.97 54 117.97 R
V
FMENDPAGE
%%EndPage: "153" 152
%%Page: "152" 152
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(The Basic Object Adapter) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(152) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
2 12 Q
0 X
(The BOA initiates activity by the implementation by starting the appropriate server) 108 678.02 T
(, prob-) 506.92 678.02 T
(ably in an operating system-dependent way) 108 664.02 T
(. The implementation initializes itself, then) 315.4 664.02 T
(noti\336es the BOA that it is prepared to handle requests by calling) 108 650.02 T
6 F
(impl_is_r) 419.13 650.02 T
(eady) 467.56 650.02 T
2 F
( or) 491.55 650.02 T
6 F
-0.36 (obj_is_r) 108 636.02 P
-0.36 (eady) 149.76 636.02 P
2 10 Q
-0.3 (2) 173.75 640.82 P
2 12 Q
-0.36 (. Between the time that the program is started and it indicates it is ready) 178.74 636.02 P
-0.36 (, the) 517.06 636.02 P
(BOA will prevent any other requests from being delivered to the server) 108 622.02 T
(. After that point,) 449.42 622.02 T
(the BOA, through the skeletons, will make calls on the methods of the implementation.) 108 608.02 T
6 10 Q
(void impl_is_r) 108 583.35 T
(eady \050in ImplementationDef impl\051;) 169.19 583.35 T
(// PIDL) 486 583.35 T
(void obj_is_r) 108 571.35 T
(eady \050) 163.63 571.35 T
(in Object) 126 559.35 T
(obj,) 234 559.35 T
(in ImplementationDef) 126 547.35 T
(impl) 234 547.35 T
(\051;) 108 535.35 T
2 12 Q
(An) 108 516.02 T
4 F
(activation policy) 125.65 516.02 T
2 F
( describes the rules that a given implementation follows when there) 205.94 516.02 T
-0.28 (are multiple objects or implementations active. There are four policies that all BOA imple-) 108 502.02 P
(mentations support for implementation activation:) 108 488.02 T
(\245) 108 468.02 T
-0.19 (A) 126 468.02 P
4 F
-0.19 (shar) 137.47 468.02 P
-0.19 (ed server) 158.35 468.02 P
2 F
-0.19 ( policy) 202.45 468.02 P
-0.19 (, where multiple active objects of a given implementation share) 234.46 468.02 P
(the same server) 126 454.02 T
(.) 199.94 454.02 T
(\245) 108 437.02 T
-0.12 (An) 126 437.02 P
4 F
-0.12 (unshar) 143.53 437.02 P
-0.12 (ed server) 176.41 437.02 P
2 F
-0.12 ( policy) 220.58 437.02 P
-0.12 (, where only one object of a given implementation at a time) 252.66 437.02 P
(can be active in one server) 126 423.02 T
(.) 252.89 423.02 T
(\245) 108 406.02 T
(A) 126 406.02 T
4 F
(server) 137.66 406.02 T
(-per) 167.39 406.02 T
(-method) 187.13 406.02 T
2 F
( policy) 226.43 406.02 T
(, where each invocation of a method is implemented by a) 258.64 406.02 T
(separate server being started, with the server terminating when the method completes.) 126 392.02 T
(\245) 108 375.02 T
4 F
(Persistent server) 126 375.02 T
2 F
( policy) 206.94 375.02 T
(, where the server is activated by something outside the BOA.) 239.15 375.02 T
-0.49 (The server nonetheless must register with the BOA to receive invocations. A persistent) 126 361.02 P
(server is assumed to be shared by multiple active objects.) 126 347.02 T
-0.32 (These kinds of implementation activation are illustrated in FIG. 14 on page 153. Case A is) 108 321.02 P
(a shared server) 108 307.02 T
(, where the BOA starts a process which then registers itself with the BOA.) 179.45 307.02 T
-0.01 (Case B is the case of a persistent server) 108 293.02 P
-0.01 (, which is very similar but just registers itself with) 296.6 293.02 P
-0.19 (the BOA, without the BOA having had to start a process. An unshared server is illustrated) 108 279.02 P
(in case C, where the process started by the BOA can only hold one object; the server) 108 265.02 T
(-per) 513.78 265.02 T
(-) 532.85 265.02 T
(method policy in case D causes each method invocation to be done by starting a process.) 108 251.02 T
54 101.98 540 132.01 C
108 105.01 252 105.01 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
2 10 Q
0 X
0 K
(2.  The latter is for per-object servers.) 108 95.32 T
34 618.02 36 658.02 R
V
34 512.02 36 590.02 R
V
34 317.02 36 329.02 R
V
FMENDPAGE
%%EndPage: "152" 151
%%Page: "151" 151
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(Basic Object Adapter Interface) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(151) 541.33 60.29 T
72 87.98 558 686.02 R
7 X
V
1 F
0 X
(3.) 126 678.02 T
2 12 Q
(Operations to maintain a registry of active objects and implementations.) 144 678.02 T
(Requests by the BOA to an implementation are made with skeletons or using an imple-) 126 652.02 T
(mentation\325) 126 638.02 T
(s runtime language mapping information, and are of three kinds:) 177.31 638.02 T
1 10 Q
(1.) 126 618.02 T
2 12 Q
(Activating an implementation.) 144 618.02 T
1 10 Q
(2.) 126 601.02 T
2 12 Q
(Activating an object.) 144 601.02 T
1 10 Q
(3.) 126 584.02 T
2 12 Q
(Performing an operation \050through a skeleton method\051.) 144 584.02 T
(Each of the BOA operations is described in detail later in this section; the requests of the) 126 558.02 T
(BOA to an implementation are described in the language mapping section.) 126 544.02 T
1 F
(9.2.1) 93.93 512.02 T
0 F
(Registration of Implementations) 126 512.02 T
2 F
(The Basic Object Adapter expects information describing the implementations to be) 126 494.02 T
(stored in an) 126 480.02 T
4 F
(Implementation Repository) 184.96 480.02 T
2 F
(. The Implementation Repository ordinarily is) 314.43 480.02 T
-0.07 (updated at program installation time, but may be set up incrementally or otherwise. There) 126 466.02 P
(are objects with an IDL interface called) 126 452.02 T
6 F
(ImplementationDef) 318.83 452.02 T
2 F
(, which capture this informa-) 418.76 452.02 T
(tion. The Implementation Repository may contain additional information for debugging,) 126 438.02 T
-0.09 (administration, etc. Note that the Implementation Repository is logically distinct from the) 126 424.02 P
(Interface Repository) 126 410.02 T
(, although they may in fact be implemented together) 223.47 410.02 T
(.) 473.64 410.02 T
(The) 126 384.02 T
4 F
( Interface Repository) 144.65 384.02 T
2 F
( contains information about interfaces. There are objects with an) 245.91 384.02 T
(IDL interface called) 126 370.02 T
6 F
(InterfaceDef) 225.57 370.02 T
2 F
(, which capture this information. The Interface Reposi-) 290.17 370.02 T
-0.37 (tory may contain additional information for debugging, administration, browsing, etc. The) 126 356.02 P
(ORB Core may or may not make use of the Interface Repository or the Implementation) 126 342.02 T
(Repository) 126 328.02 T
(, but the ORB and BOA use these objects to associate object references with) 177.86 328.02 T
(their interfaces and implementations.) 126 314.02 T
1 F
(9.2.2) 93.93 282.02 T
0 F
(Activation and Deactivation of Implementations) 126 282.02 T
2 F
-0.23 (There are two kinds of activation that a BOA needs to perform as part of operation invoca-) 126 264.02 P
(tion. The \336rst, discussed in this section, is) 126 250.02 T
4 F
(implementation activation) 329.56 250.02 T
2 F
(, which occurs when) 455.16 250.02 T
(no implementation for an object is currently available to handle the request. The second,) 126 236.02 T
(discussed later) 126 222.02 T
(, is) 195.8 222.02 T
4 F
(object activation) 212.8 222.02 T
2 F
(, which occurs when no instance of the object is avail-) 293.08 222.02 T
(able to handle the request.) 126 208.02 T
(Implementation activation requires coordination between the BOA and the program\050s\051) 126 182.02 T
-0.06 (containing the implementation. W) 126 168.02 P
-0.06 (e use the term) 288.78 168.02 P
4 F
-0.06 (server) 358.5 168.02 P
2 F
-0.06 ( as the separately executable entity) 388.47 168.02 P
-0.2 (that the BOA can start on a particular system. In a POSIX environment, a server would be) 126 154.02 P
-0.1 (a process. In most systems, a server corresponds to the notion of a program, but it can cor-) 126 140.02 P
(respond to whatever the appropriate system facility is in a particular environment.) 126 126.02 T
52 448.02 54 460.02 R
V
52 366.02 54 378.02 R
V
FMENDPAGE
%%EndPage: "151" 150
%%Page: "150" 150
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(The Basic Object Adapter) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(150) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
2 12 Q
0 X
(appear to be a BOA object in the object implementation. When it is invoked, some opera-) 108 678.02 T
(tions are satis\336ed in the library) 108 664.02 T
(, some in an external server) 255.46 664.02 T
(, and some in the ORB Core.) 386.87 664.02 T
(The following is the approximate interface de\336nition for the BOA object. More details) 108 638.02 T
(will be provided as the operations are discussed.) 108 624.02 T
6 10 Q
(interface InterfaceDef;) 108 599.35 T
(// fr) 306 599.35 T
(om Interface Repository) 321.64 599.35 T
(// PIDL) 504 599.35 T
(interface ImplementationDef;) 108 587.35 T
(// fr) 306 587.35 T
(om Implementation Repository) 321.64 587.35 T
(interface Object;) 108 575.35 T
(// an object r) 306 575.35 T
(efer) 359.95 575.35 T
(ence) 376.41 575.35 T
(interface Principal;) 108 563.35 T
(// for the authentication service) 306 563.35 T
(typedef sequence <octet, 1024> Refer) 108 551.35 T
(enceData;) 266.03 551.35 T
(interface BOA {) 108 527.35 T
(Object cr) 126 515.35 T
(eate \050) 166.06 515.35 T
(in Refer) 144 503.35 T
(enceData) 178.51 503.35 T
(id,) 270 503.35 T
(in InterfaceDef) 144 491.35 T
(intf,) 270 491.35 T
(in ImplementationDef) 144 479.35 T
(impl) 270 479.35 T
(\051;) 126 467.35 T
(void dispose \050in Object obj\051;) 126 455.35 T
(Refer) 126 443.35 T
(enceData get_id \050in Object obj\051;) 149.68 443.35 T
(void change_implementation \050) 126 419.35 T
(in Object) 144 407.35 T
(obj,) 270 407.35 T
(in ImplementationDef) 144 395.35 T
(impl) 270 395.35 T
(\051;) 126 383.35 T
(Principal get_principal \050) 126 359.35 T
(in Object) 144 347.35 T
(obj,) 270 347.35 T
(in Envir) 144 335.35 T
(onment) 179.09 335.35 T
(ev) 270 335.35 T
(\051;) 126 323.35 T
(void set_exception \050) 126 299.35 T
(in exception_type) 144 287.35 T
(major) 270 287.35 T
(,) 295.17 287.35 T
(// NO, USER, or SYSTEM_EXCEPTION) 324 287.35 T
(in string) 144 275.35 T
(userid,) 270 275.35 T
(// exception type id) 324 275.35 T
(in void) 144 263.35 T
(*param) 270 263.35 T
(// pointer to associated data) 324 263.35 T
(\051;) 126 251.35 T
(void impl_is_r) 126 227.35 T
(eady \050in ImplementationDef impl\051;) 187.19 227.35 T
(void deactivate_impl \050in ImplementationDef impl\051;) 126 215.35 T
(void obj_is_r) 126 203.35 T
(eady \050in Object obj, in ImplementationDef impl\051;) 181.63 203.35 T
(void deactivate_obj \050in Object obj\051;) 126 191.35 T
(};) 108 179.35 T
2 12 Q
(Requests by an implementation on the BOA are of three kinds:) 108 154.02 T
1 10 Q
(1.) 108 134.02 T
2 12 Q
(Operations to create or destroy object references, or query or update the information) 126 134.02 T
(the BOA maintains for an object reference.) 126 120.02 T
1 10 Q
(2.) 108 103.02 T
2 12 Q
(Operations associated with a particular request.) 126 103.02 T
34 660.02 36 672.02 R
V
34 548.02 36 606.02 R
V
34 380.02 36 534.02 R
V
34 248.02 36 366.02 R
V
34 188.02 36 234.02 R
V
FMENDPAGE
%%EndPage: "150" 149
%%Page: "149" 149
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(Basic Object Adapter Interface) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(149) 541.33 60.29 T
72 87.98 558 686.02 R
7 X
V
72 672.98 558 686.02 C
126 680.04 558 680.04 2 L
0.25 H
2 Z
0 X
0 K
N
72 680.04 117 680.04 2 L
0 Z
N
0 0 612 792 C
72 649.02 558 662.98 C
72 654.99 558 654.99 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
(FIG.  13) 72 666.32 T
0 F
(The Structure and Operation of the Basic Object Adapter) 126 666.32 T
2 12 Q
(The BOA exports operations that are accessed by the Object Implementation. The BOA) 126 362 T
-0.39 (also calls the Object Implementation under certain circumstances. The interface between a) 126 348 P
(particular version of the BOA and the ORB Core it runs on is private, as is the interface) 126 334 T
-0.12 (between the BOA and the skeletons. Thus, the BOA can exploit features or overcome lim-) 126 320 P
(itations of a speci\336c ORB Core, and can cooperate with the ORB Core and skeletons to) 126 306 T
(provide a set of portable interfaces for the object implementation.) 126 292 T
72 245.98 558 249 C
126 247.49 558 247.49 2 L
0.25 H
2 Z
0 X
0 K
N
72 247.49 117 247.49 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(9.2) 101.15 253.67 T
0 F
(Basic Object Adapter Interface) 126 253.67 T
2 12 Q
(The BOA interface is speci\336ed in IDL, so that the way it is accessed in any programming) 126 227.98 T
(language is speci\336ed by the client side language mapping for that language. Some data) 126 213.98 T
(structures used by the BOA are speci\336c to a given language mapping, so most IDL com-) 126 199.98 T
(pilers will not be able to accept this de\336nition literally) 126 185.98 T
(.) 384.73 185.98 T
(In practice, the BOA is most likely to be implemented partially as a separate component) 126 159.98 T
(and partially as a library in the Object Implementation. The separate component is) 126 145.98 T
(required to do activation when the implementation is not present. The library portion is) 126 131.98 T
-0.08 (needed to establish the linkage between the methods and the skeleton. The exact partition-) 126 117.98 P
-0.52 (ing of functionality between these parts is implementation dependent. Generally) 126 103.98 P
-0.52 (, there will) 504.93 103.98 P
72 87.98 558 686.02 C
81 382 558 649.02 C
81 382 558 649.02 R
7 X
0 K
V
387 478.02 480.48 532.02 R
5 X
V
0.5 H
2 Z
0 X
N
1 9 Q
(Skeleton) 411.74 507.54 T
(Basic Object Adapter) 245.59 469.98 T
(Object Implementation) 250.67 624.54 T
(Methods) 403.33 606.54 T
381.48 586.02 471.48 631.02 18 RR
N
187.91 541.02 529.91 640.02 18 RR
N
153 397.02 552.92 442.02 R
N
(ORB Core) 325.23 416.53 T
176.42 542.68 192.48 568.02 192.29 538.02 184.35 540.35 4 Y
3 X
V
174.48 505.02 184.35 540.35 2 L
6 H
N
234.27 525.2 228.48 505.02 222.69 525.2 228.48 525.2 4 Y
0 X
V
228.48 559.02 228.48 525.2 2 L
3 H
N
299.12 538.83 304.91 559.02 310.7 538.83 304.91 538.83 4 Y
V
304.91 505.02 304.91 538.83 2 L
N
416.12 574.83 421.91 595.02 427.7 574.83 421.91 574.83 4 Y
V
421.91 523.02 421.91 574.83 2 L
N
(1. Activate) 104.58 561.46 T
(Implementation) 104.58 549.46 T
(2. Register) 196.91 573.54 T
(Implementation) 196.91 561.54 T
(3. Activate) 286.91 573.54 T
(Object) 286.91 561.54 T
(4. Invoke) 363.48 568.98 T
(Method) 363.48 556.98 T
151.91 451.02 553.23 451.02 553.23 532.02 480.26 532.02 480.26 478.02 387 478.02 387 532.02
 151.91 532.02 8 Y
1 H
N
513.27 534.2 507.48 514.02 501.69 534.2 507.48 534.2 4 Y
V
507.48 568.02 507.48 534.2 2 L
3 H
N
(5. Access) 480.48 595.98 T
(BOA service) 480.48 583.98 T
72 87.98 558 686.02 C
0 0 612 792 C
52 330 54 342 R
0 X
0 K
V
52 302 54 314 R
V
FMENDPAGE
%%EndPage: "149" 148
%%Page: "148" 148
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(The Basic Object Adapter) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(148) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
2 12 Q
0 X
-0.38 (tion, object implementations that use it should be able to run on any ORB that supports the) 108 678.02 P
(required language mapping, assuming they have been installed appropriately) 108 664.02 T
(.) 475.29 664.02 T
-0.38 (Other Object Adapters are likely to be created. Ordinarily) 108 638.02 P
-0.38 (, it is not necessary for a client of) 380.92 638.02 P
(an object to be concerned about which Object Adapter is used by the implementation.) 108 624.02 T
(The following functions are provided through the Basic Object Adapter:) 108 598.02 T
(\245) 108 578.02 T
(Generation and interpretation of object references,) 126 578.02 T
(\245) 108 561.02 T
(Authentication of the principal making the call,) 126 561.02 T
(\245) 108 544.02 T
(Activation and deactivation of the implementation,) 126 544.02 T
(\245) 108 527.02 T
(Activation and deactivation of individual objects, and) 126 527.02 T
(\245) 108 510.02 T
(Method invocation through skeletons.) 126 510.02 T
(The Basic Object Adapter supports object implementations that are constructed from one) 108 484.02 T
(or more programs) 108 470.02 T
2 10 Q
(1) 193.93 474.82 T
2 12 Q
(. The BOA activates and communicates with these programs using) 198.93 470.02 T
-0.2 (operating system facilities that are not part of the ORB. Therefore the BOA requires some) 108 456.02 P
(information that is inherently non-portable. Although not de\336ning this information, the) 108 442.02 T
(BOA does de\336ne the concept of an Implementation Repository which can hold this infor-) 108 428.02 T
-0.1 (mation, allowing each system to install and start implementations in the way that is appro-) 108 414.02 P
(priate for that system.) 108 400.02 T
(The mechanism for binding the program to the BOA and ORB is also not speci\336ed) 108 374.02 T
(because it is inherently system and language-dependent. W) 108 360.02 T
(e assume that the BOA can) 390.83 360.02 T
(connect the methods to the skeleton by some means, whether at the time the implementa-) 108 346.02 T
(tion is compiled, installed, or activated, etc. Subsequent to activation, the BOA can make) 108 332.02 T
(calls on routines in the implementation and the implementation can make calls on the) 108 318.02 T
(BOA.) 108 304.02 T
(FIG. 13 on page 149 shows the structure of the Basic Object Adapter) 108 278.02 T
(, and some of the) 438.95 278.02 T
(interactions between the BOA and an Object Implementation. The Basic Object Adapter) 108 264.02 T
(will start a program to provide the Object Implementation, in this example, a per) 108 250.02 T
(-class) 494.5 250.02 T
-0.43 (server \0501\051. The Object Implementation noti\336es the BOA that it has \336nished initializing and) 108 236.02 P
-0.31 (is prepared to handle requests \0502\051. When the \336rst request for a particular object arrives, the) 108 222.02 P
(implementation is noti\336ed to activate the object \0503\051. On subsequent requests, the BOA) 108 208.02 T
(calls the appropriate method using the per) 108 194.02 T
(-interface skeleton \0504\051. At various times, the) 308.95 194.02 T
(implementation may access BOA services such as object creation, deactivation, etc. \0505\051.) 108 180.02 T
54 112.98 540 143.01 C
108 116.01 252 116.01 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
2 10 Q
0 X
0 K
(1.  The term \322program\323 is meant to include a wide range of possible constructs, including scripts, loadable) 108 106.32 T
(modules, etc., in addition to the traditional notions of an application or server.) 126 95.32 T
34 274.02 36 286.02 R
V
FMENDPAGE
%%EndPage: "148" 147
%%Page: "147" 147
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 378 558 378 2 L
7 X
V
2 Z
0 X
N
72 74.02 558 74.02 2 L
7 X
V
0.25 H
0 X
N
72 55.01 558 66.96 R
7 X
V
0 9 Q
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
-2.78 (147) 541.33 60.29 P
72 396 558 693 R
7 X
V
0 24 Q
0 X
-0.48 (9) 72 677 S
-0.48 (The Basic Object Adapter) 126 677 S
72 87.98 558 360 R
7 X
V
2 12 Q
0 X
(An Object Adapter is the primary interface that an implementation uses to access ORB) 126 352 T
-0.43 (functions. The) 126 338 P
4 F
-0.43 (Basic Object Adapter) 197.43 338 P
2 F
-0.43 ( \050BOA\051 is an interface intended to be widely available) 299.83 338 P
(and to support a wide variety of common object implementations. It includes convenient) 126 324 T
-0.33 (interfaces for generating object references, registering implementations that consist of one) 126 310 P
(or more programs, activating implementations, and authenticating requests. It also pro-) 126 296 T
(vides a limited amount of persistent storage for objects that can be used for) 126 282 T
(connecting to) 489.08 282 T
(a lar) 126 268 T
(ger or more general storage facility) 146.76 268 T
(, for storing access control information, or other) 314.84 268 T
(purposes.) 126 254 T
-0.08 (Most of the Basic Object Adapter interface can be expressed in IDL, since the interface is) 126 228 P
-0.2 (to the operations on the object adapter) 126 214 P
-0.2 (. Some of the operations to bind the implementation) 307.32 214 P
(to the object adapter depend on the language mapping. W) 126 200 T
(e will note such dependencies,) 401.5 200 T
(but still use IDL as the means to describe the interface.) 126 186 T
72 139.98 558 143 C
126 141.49 558 141.49 2 L
0.25 H
2 Z
0 X
0 K
N
72 141.49 117 141.49 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(9.1) 101.15 147.67 T
0 F
(Role of the Basic Object Adapter) 126 147.67 T
2 12 Q
(One object adapter) 126 121.98 T
(, called the Basic Object Adapter) 216.11 121.98 T
(, should be available in every ORB) 374.17 121.98 T
(implementation; although the BOA will generally have an ORB-dependent implementa-) 126 107.98 T
52 292 54 318 R
V
FMENDPAGE
%%EndPage: "147" 146
%%Page: "146" 146
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(ORB Interface) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(146) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
6 10 Q
0 X
(Object) 108 679.35 T
( duplicate \050\051;) 136.86 679.35 T
(// PIDL) 504 679.35 T
(void) 108 667.35 T
( r) 126.33 667.35 T
(elease \050\051;) 133.09 667.35 T
2 12 Q
(If more than one copy of an object reference is needed, the client may create a) 108 642.02 T
6 F
(duplicate) 486 642.02 T
2 F
(.) 533.31 642.02 T
(Note that the object implementation is not involved in creating the duplicate, and that the) 108 628.02 T
-0.26 (implementation cannot distinguish whether the original or a duplicate was used in a partic-) 108 614.02 P
(ular request.) 108 600.02 T
-0.04 (When an object reference is no longer needed by a program, its storage may be reclaimed) 108 574.02 P
(by use of the) 108 560.02 T
6 F
(r) 172.62 560.02 T
(elease) 177.73 560.02 T
2 F
( operation. Note that the object implementation is not involved, and) 207.7 560.02 T
(that neither the object itself nor any other references to it are af) 108 546.02 T
(fected by the) 410.2 546.02 T
6 F
(r) 475.14 546.02 T
(elease) 480.25 546.02 T
2 F
( oper-) 510.22 546.02 T
(ation.) 108 532.02 T
1 F
(8.2.3) 75.93 500.02 T
0 F
(Nil Object References) 108 500.02 T
2 F
(An object reference whose value is OBJECT_NIL denotes no object. An object reference) 108 482.02 T
(can be tested for this value by the) 108 468.02 T
6 F
(is_nil) 271.88 468.02 T
2 F
( operation. The object implementation is not) 299.21 468.02 T
(involved in the nil test.) 108 454.02 T
6 10 Q
(boolean is_nil \050\051;) 108 435.35 T
(// PIDL) 504 435.35 T
34 638.02 36 686.02 R
V
34 596.02 36 608.02 R
V
34 432.02 36 568.02 R
V
FMENDPAGE
%%EndPage: "146" 145
%%Page: "145" 145
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(Object Reference Operations) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(145) 541.33 60.29 T
72 87.98 558 686.02 R
7 X
V
72 668.99 558 672.02 C
126 670.5 558 670.5 2 L
0.25 H
2 Z
0 X
0 K
N
72 670.5 117 670.5 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(8.2) 101.15 676.68 T
0 F
(Object Reference Operations) 126 676.68 T
2 12 Q
-0.02 (There are some operations that can be done on any object. These are not operations in the) 126 650.99 P
(normal sense, in that they are implemented directly by the ORB, not passed on to the) 126 636.99 T
-0.28 (object implementation. W) 126 622.99 P
-0.28 (e will describe these as being operations on the object reference,) 249.39 622.99 P
-0.41 (although the interfaces actually depend on the language binding. As above, where we used) 126 608.99 P
(interface Object to represent the object reference, we will de\336ne an interface for Object:) 126 594.99 T
6 10 Q
(interface Object {) 126 570.33 T
(// PIDL) 522 570.33 T
(ImplementationDef) 144 558.33 T
( get_implementation \050\051;) 227.27 558.33 T
(InterfaceDef) 144 546.33 T
( get_interface \050\051;) 198 546.33 T
(boolean) 144 534.33 T
( is_nil\050\051;) 177.32 534.33 T
(Object) 144 522.33 T
( duplicate \050\051;) 172.86 522.33 T
(void) 144 510.33 T
( r) 162.33 510.33 T
(elease \050\051;) 169.09 510.33 T
(ORBStatus cr) 144 486.33 T
(eate_r) 203.51 486.33 T
(equest \050) 229.96 486.33 T
(in Context) 162 474.33 T
(ctx,) 252 474.33 T
(in Identi\336er) 162 462.33 T
(operation,) 252 462.33 T
(in NVList) 162 450.33 T
(arg_list,) 252 450.33 T
(inout NamedV) 162 438.33 T
(alue) 223.55 438.33 T
(r) 252 438.33 T
(esult,) 256.26 438.33 T
(out Request) 162 426.33 T
(r) 252 426.33 T
(equest,) 256.26 426.33 T
(in Flags) 162 414.33 T
(r) 252 414.33 T
(eq_\337ags) 256.26 414.33 T
(\051;) 144 402.33 T
(};) 126 390.33 T
2 12 Q
(The) 126 364.99 T
6 F
(cr) 147.65 364.99 T
(eate_r) 158.08 364.99 T
(equest) 189.83 364.99 T
2 F
( operation is part of the Object interface because it creates a pseudo-) 222.48 364.99 T
(object \050a Request\051 for an object. It is described with the other Request operations in \2446.2) 126 350.99 T
(on page 108.) 126 336.99 T
1 F
(8.2.1) 93.93 304.99 T
0 F
(Determining the Object Implementation and Interface) 126 304.99 T
2 F
( An operation on the object reference,) 126 286.99 T
6 F
(get_interface) 310.51 286.99 T
2 F
(, returns an object in the Interface) 377.11 286.99 T
-0.4 (Repository) 126 272.99 P
-0.4 (, which provides type information that may be useful to a program. See Chapter) 177.86 272.99 P
(7 for a de\336nition of operations on the Interface Repository) 126 258.99 T
(. An operation on the Object) 405.35 258.99 T
(called) 126 244.99 T
6 F
(get_implementation) 157.64 244.99 T
2 F
( will return an object in an implementation repository that) 259.57 244.99 T
-0.28 (describes the implementation of the object. See Chapter 9 for information about the Imple-) 126 230.99 P
(mentation Repository) 126 216.99 T
(.) 228.83 216.99 T
6 10 Q
(InterfaceDef) 126 192.33 T
( get_interface \050\051;) 180 192.33 T
(// PIDL) 522 192.33 T
(ImplementationDef) 126 180.33 T
( get_implementation \050\051;) 209.27 180.33 T
1 12 Q
(8.2.2) 93.93 148.99 T
0 F
(Duplicating and Releasing Copies of Object References) 126 148.99 T
2 F
-0.05 (Because object references are opaque and ORB-dependent, it is not possible for clients or) 126 130.99 P
(implementations to allocate storage for them. Therefore, there are operations de\336ned to) 126 116.99 T
(copy or release an object reference.) 126 102.99 T
52 506.99 54 602.99 R
V
52 282.99 54 492.99 R
V
52 240.99 54 266.99 R
V
52 176.99 54 198.99 R
V
52 126.99 54 138.99 R
V
FMENDPAGE
%%EndPage: "145" 144
%%Page: "144" 144
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(ORB Interface) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(144) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
2 12 Q
0 X
(some other medium, and ensuring that the value can subsequently be turned into the) 108 678.02 T
(appropriate object reference.) 108 664.02 T
(An object reference may be translated into a string by the operation) 108 638.02 T
6 F
(object_to_string) 437.41 638.02 T
2 F
(.) 520.68 638.02 T
-0.05 (The value may be stored or communicated in whatever ways strings may be manipulated.) 108 624.02 P
(Subsequently) 108 610.02 T
(, the) 171.85 610.02 T
6 F
(string_to_object) 198.5 610.02 T
2 F
( operation will accept a string produced by) 281.77 610.02 T
6 F
(object_to_string) 108 596.02 T
2 F
( and return the corresponding object reference.) 191.27 596.02 T
6 10 Q
(interface) 108 571.35 T
( ORB {) 145.74 571.35 T
(// PIDL) 504 571.35 T
(string object_to_string \050in Object obj\051;) 126 559.35 T
(Object) 126 547.35 T
( string_to_object \050in string str\051;) 154.86 547.35 T
(ORBStatus) 126 523.35 T
(cr) 176.81 523.35 T
(eate_list \050) 185.51 523.35 T
(in long) 144 511.35 T
(count,) 234 511.35 T
(out NVList) 144 499.35 T
(new_list) 234 499.35 T
(\051;) 126 487.35 T
(ORBStatus) 126 475.35 T
( cr) 174.31 475.35 T
(eate_operation_list \050) 185.51 475.35 T
(in OperationDef) 144 463.35 T
(oper) 234 463.35 T
(,) 252.51 463.35 T
(out NVList) 144 451.35 T
(new_list) 234 451.35 T
(\051;) 126 439.35 T
(ORBStatus get_default_context \050) 126 415.35 T
(out) 266.46 415.35 T
( Context) 280.35 415.35 T
( ctx\051;) 316.7 415.35 T
(};) 108 403.35 T
2 12 Q
(T) 108 378.02 T
(o guarantee that an ORB will understand the string form of an object reference, that) 114.49 378.02 T
(ORB\325) 108 364.02 T
(s) 135.99 364.02 T
6 F
(object_to_string) 143.66 364.02 T
2 F
( operation must be used to produce the string. Since in general a) 226.93 364.02 T
-0.41 (client does not know or care which ORB is used for a particular object reference, the client) 108 350.02 P
(can choose whatever ORB is convenient.) 108 336.02 T
(For a description of the) 108 310.02 T
6 F
(cr) 222.92 310.02 T
(eate_list) 233.35 310.02 T
2 F
( and) 275.32 310.02 T
6 F
(cr) 298.64 310.02 T
(eate_operation_list) 309.07 310.02 T
2 F
( operations, see \2446.4 on) 406.34 310.02 T
(page 1) 108 296.02 T
(13. The) 139.2 296.02 T
6 F
(get_default_context) 178.83 296.02 T
2 F
( operation is described in \2446.6.1 on page 1) 279.42 296.02 T
(18.) 482.17 296.02 T
34 634.02 36 646.02 R
V
34 412.02 36 618.02 R
V
34 360.02 36 372.02 R
V
34 292.02 36 344.02 R
V
FMENDPAGE
%%EndPage: "144" 143
%%Page: "143" 143
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 378 558 378 2 L
7 X
V
2 Z
0 X
N
72 74.02 558 74.02 2 L
7 X
V
0.25 H
0 X
N
72 55.01 558 66.96 R
7 X
V
0 9 Q
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
-2.78 (143) 541.33 60.29 P
72 396 558 693 R
7 X
V
0 24 Q
0 X
-0.48 (8) 72 677 S
-0.48 (ORB Interface) 126 677 S
72 87.98 558 360 R
7 X
V
2 12 Q
0 X
(The ORB interface is the interface to those ORB functions that do not depend on which) 126 352 T
(object adapter is used. These operations are the same for all ORBs and all object imple-) 126 338 T
(mentations, and can be performed either by clients of the objects or implementations.) 126 324 T
-0.14 (Some of these operations appear to be on the ORB, others appear to be on the object refer-) 126 310 P
(ence. Because the operations in this section are implemented by the ORB itself, they are) 126 296 T
(not in fact operations on objects, although they may be described that way and the lan-) 126 282 T
(guage binding will, for consistency) 126 268 T
(, make them appear that way) 294.11 268 T
(.) 431.22 268 T
(The ORB interface also de\336nes operations for creating lists and determining the default) 126 242 T
(context used in the Dynamic Invocation Interface. Those operations are described in) 126 228 T
(Chapter 6.) 126 214 T
72 167.98 558 171 C
126 169.49 558 169.49 2 L
0.25 H
2 Z
0 X
0 K
N
72 169.49 117 169.49 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(8.1) 101.15 175.67 T
0 F
(Converting Object References to Strings) 126 175.67 T
2 12 Q
-0.05 (Because an object reference is opaque and may dif) 126 149.98 P
-0.05 (fer from ORB to ORB, the object refer-) 368.5 149.98 P
(ence itself is not a convenient value for storing references to objects in persistent storage) 126 135.98 T
(or communicating references by means other than invocation. T) 126 121.98 T
(wo problems must be) 431.93 121.98 T
(solved: allowing an object reference to be turned into a value that a client can store in) 126 107.98 T
52 210 54 276 R
V
FMENDPAGE
%%EndPage: "143" 142
%%Page: "142" 142
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(The Interface Repository) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(142) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
FMENDPAGE
%%EndPage: "142" 141
%%Page: "141" 141
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(T) 126 736.18 T
(ypeCodes) 131 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(141) 541.33 60.29 T
72 87.98 558 686.02 R
7 X
V
1 12 Q
0 X
(7.6.2) 93.93 678.02 T
0 F
(T) 126 678.02 T
(ypeCode Constants) 132.67 678.02 T
2 F
-0.21 (If \322) 126 660.02 P
3 F
-0.19 (typedef ... FOO;) 142.1 660.02 P
2 F
-0.21 (\323 is an IDL type declaration, the IDL compiler will \050if asked\051 produce a) 214.94 660.02 P
(declaration of a T) 126 646.02 T
(ypeCode constant named TC_FOO. This constant can be used with the) 210.09 646.02 T
(dynamic invocation interface, and any other routines that require T) 126 632.02 T
(ypeCodes. The pre-) 446.25 632.02 T
(de\336ned T) 126 618.02 T
(ypeCode constants are:) 170.79 618.02 T
(TC_null) 126 592.02 T
(TC_void) 126 578.02 T
(TC_short) 126 564.02 T
(TC_long) 126 550.02 T
(TC_ushort) 126 536.02 T
(TC_ulong) 126 522.02 T
(TC_\337oat) 126 508.02 T
(TC_double) 126 494.02 T
(TC_boolean) 126 480.02 T
(TC_char) 126 466.02 T
(TC_octet) 126 452.02 T
(TC_any) 126 438.02 T
(TC_T) 126 424.02 T
(ypeCode) 153.81 424.02 T
(TC_Principal) 126 410.02 T
(TC_Object) 126 396.02 T
(= tk_objref { Object }) 288 396.02 T
(TC_string) 126 382.02 T
(= tk_string { 0 }) 288 382.02 T
(// unbounded) 396 382.02 T
(TC_NamedV) 126 368.02 T
(alue) 189.29 368.02 T
(= tk_struct { ... }) 288 368.02 T
(TC_InterfaceDescription) 126 354.02 T
(= tk_struct { ... }) 288 354.02 T
(TC_OperationDescription) 126 340.02 T
(= tk_struct { ... }) 288 340.02 T
(TC_AttributeDescription) 126 326.02 T
(= tk_struct { ... }) 288 326.02 T
(TC_ParameterDescription) 126 300.02 T
(= tk_struct { ... }) 288 300.02 T
(TC_RepositoryDescription) 126 286.02 T
(= tk_struct { ... }) 288 286.02 T
(TC_ModuleDescription) 126 272.02 T
(= tk_struct { ... }) 288 272.02 T
(TC_ConstDescription) 126 258.02 T
(= tk_struct { ... }) 288 258.02 T
(TC_ExceptionDescription) 126 244.02 T
(= tk_struct { ... }) 288 244.02 T
(TC_T) 126 230.02 T
(ypeDescription) 153.81 230.02 T
(= tk_struct { ... }) 288 230.02 T
(TC_FullInterfaceDescription) 126 216.02 T
(= tk_struct { ... }) 288 216.02 T
(The exact form for T) 126 190.02 T
(ypeCode constants is language mapping, and possibly implementa-) 225.74 190.02 T
(tion, speci\336c.) 126 176.02 T
52 146.02 54 686.02 R
V
FMENDPAGE
%%EndPage: "141" 140
%%Page: "140" 140
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(The Interface Repository) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(140) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
2 12 Q
0 X
(The tk_objref T) 108 465.02 T
(ypeCode represents an interface type. Its parameter is the interface-id of) 183.1 465.02 T
(that interface.) 108 451.02 T
(A structure with N members results in a tk_struct T) 108 425.02 T
(ypeCode with 2N+1 parameters: the) 354 425.02 T
(type name of the struct, the rest are member names alternating with the corresponding) 108 411.02 T
(member T) 108 397.02 T
(ypeCode. Member names are represented as strings.) 156.79 397.02 T
-0.04 (A union with N members results in a tk_union T) 108 371.02 P
-0.04 (ypeCode with 3N+2 parameters: the type) 339.63 371.02 P
(name of the union, the switch T) 108 357.02 T
(ypeCode followed by a label value, member name, and) 259.39 357.02 T
(member T) 108 343.02 T
(ypeCode for each of the N members. The label values are all values of the data) 156.79 343.02 T
(type designated by the switch T) 108 329.02 T
(ypeCode, with one exception. The default member \050if) 259.39 329.02 T
(present\051 is marked with a label value consisting of the 0) 108 315.02 T
3 F
(octet) 378.81 315.02 T
2 F
(. Recall that the operation) 402.31 315.02 T
(\322parameter\050tc,i\051\323 returns an) 108 301.02 T
3 F
(any) 243.2 301.02 T
2 F
(, and that anys themselves carry a T) 259.37 301.02 T
(ypeCode that can dis-) 430.39 301.02 T
(tinguish an octet from any of the legal switch types.) 108 287.02 T
(The tk_enum T) 108 261.02 T
(ypeCode has the type name of the enum followed by the enumeration ids) 181.11 261.02 T
(as parameters. Enumeration ids are represented as strings.) 108 247.02 T
-0.09 (The tk_string T) 108 221.02 P
-0.09 (ypeCode has 1 parameter: an integer giving the maximum string length. A) 181.61 221.02 P
(maximum of 0 denotes unbounded.) 108 207.02 T
-0.15 (The tk_sequence T) 108 181.02 P
-0.15 (ypeCode has 2 parameters: a T) 198.12 181.02 P
-0.15 (ypeCode for the sequence elements, and) 344.73 181.02 P
(an integer giving the maximum sequence. Again, 0 denotes unbounded.) 108 167.02 T
(Finally) 108 141.02 T
(, the tk_array T) 141.21 141.02 T
(ypeCode has 2 parameters: a T) 214.31 141.02 T
(ypeCode for the array elements, and) 361.68 141.02 T
(an integer giving the array length. Arrays are never unbounded.) 108 127.02 T
0 9 Q
(tk_T) 114 621.02 T
(ypeCode) 130.99 621.02 T
(*NONE*) 186 621.02 T
(tk_Principal) 114 606.02 T
(*NONE*) 186 606.02 T
(tk_objref) 114 591.02 T
({ interface-id }) 186 591.02 T
(tk_struct) 114 576.02 T
({struct-name, member-name, T) 186 576.02 T
(ypeCode, ... \050repeat pairs\051 }) 309.86 576.02 T
(tk_union) 114 561.02 T
({union-name, switch-T) 186 561.02 T
(ypeCode, label-value, member-name,) 274.41 561.02 T
(T) 186 550.02 T
(ypeCode, ... \050repeat triples\051 }) 191 550.02 T
(tk_enum) 114 535.02 T
({enum-name, enum-id, ... }) 186 535.02 T
(tk_string) 114 520.02 T
({ maxlen-integer }) 186 520.02 T
(tk_sequence) 114 505.02 T
({ T) 186 505.02 T
(ypeCode, maxlen-integer }) 196.5 505.02 T
(tk_array) 114 490.02 T
({ T) 186 490.02 T
(ypeCode, length-integer }) 196.5 490.02 T
54 672.98 540 686.02 C
108 680.04 540 680.04 2 L
0.25 H
2 Z
0 X
0 K
N
54 680.04 99 680.04 2 L
0 Z
N
0 0 612 792 C
54 649.02 540 662.98 C
54 654.99 540 654.99 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
(TBL. 16) 54 666.32 T
0 F
(Legal T) 108 666.32 T
(ypeCode Kinds and Parameters  \050Continued\051) 140.78 666.32 T
1 9 Q
(KIND) 114 636.02 T
(P) 186 636.02 T
(ARAMETER LIST) 191.33 636.02 T
108 631.02 437.83 631.02 2 L
V
0.5 H
0 Z
N
108 485.02 437.83 485.02 2 L
V
N
34 123.02 36 473.02 R
V
34 618.02 36 627.02 R
V
34 618.02 36 627.02 R
V
34 603.02 36 612.02 R
V
34 603.02 36 612.02 R
V
34 588.02 36 597.02 R
V
34 588.02 36 597.02 R
V
34 573.02 36 582.02 R
V
34 573.02 36 582.02 R
V
34 558.02 36 567.02 R
V
34 547.02 36 567.02 R
V
34 532.02 36 541.02 R
V
34 532.02 36 541.02 R
V
34 517.02 36 526.02 R
V
34 517.02 36 526.02 R
V
34 502.02 36 511.02 R
V
34 502.02 36 511.02 R
V
34 487.02 36 496.02 R
V
34 487.02 36 496.02 R
V
FMENDPAGE
%%EndPage: "140" 139
%%Page: "139" 139
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(T) 126 736.18 T
(ypeCodes) 131 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(139) 541.33 60.29 T
72 87.98 558 686.02 R
7 X
V
1 12 Q
0 X
(7.6.1) 93.93 678.02 T
0 F
(The T) 126 678.02 T
(ypeCode Interface) 156.67 678.02 T
2 F
(The IDL interface for T) 126 652.02 T
(ypeCodes is) 239.05 652.02 T
3 10 Q
(interface T) 126 627.35 T
(ypeCode {) 166.85 627.35 T
(enum TCKind {) 144 615.35 T
(tk_null, tk_void,) 162 603.35 T
(tk_short, tk_long, tk_ushort, tk_ulong,) 162 591.35 T
(tk_\337oat, tk_double, tk_boolean, tk_char) 162 579.35 T
(,) 315.5 579.35 T
(tk_octet, tk_any) 162 567.35 T
(, tk_T) 223.35 567.35 T
(ypeCode, tk_Principal,) 244.15 567.35 T
(tk_objref,) 334.35 567.35 T
(tk_struct, tk_union, tk_enum, tk_string,) 162 555.35 T
(tk_sequence, tk_array) 162 543.35 T
(};) 144 531.35 T
(exception Bounds {};) 144 507.35 T
(boolean equal \050in T) 144 495.35 T
(ypeCode tc\051;) 218.09 495.35 T
(TCkind kind \050\051;) 144 483.35 T
(long param_count \050\051;) 144 471.35 T
(// The number of parameters for this T) 162 459.35 T
(ypeCode.) 308.96 459.35 T
(any parameter \050in long index\051 raises \050Bounds\051;) 144 447.35 T
(// The index\325th parameter) 162 435.35 T
(. Parameters are indexed from 0) 258.57 435.35 T
(// to \050param_count-1\051.) 162 423.35 T
(}) 126 411.35 T
2 12 Q
(W) 126 386.02 T
(ith the above operations, any T) 136.84 386.02 T
(ypeCode can be decomposed into its constituent parts.) 284.57 386.02 T
(Composing new T) 126 372.02 T
(ypeCodes is a topic for future OMG standardization.) 213.78 372.02 T
(The legal combinations of kinds and parameters are listed in TBL. 16 on page 139.) 126 346.02 T
72 316.98 558 330.02 C
126 324.04 558 324.04 2 L
0.25 H
2 Z
0 X
0 K
N
72 324.04 117 324.04 2 L
0 Z
N
0 0 612 792 C
72 293.02 558 306.98 C
72 298.99 558 298.99 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
(TBL. 16) 72 310.32 T
0 F
(Legal T) 126 310.32 T
(ypeCode Kinds and Parameters) 158.78 310.32 T
1 9 Q
(KIND) 132 280.02 T
(P) 204 280.02 T
(ARAMETER LIST) 209.33 280.02 T
0 F
(tk_null) 132 265.02 T
(*NONE*) 204 265.02 T
(tk_void) 132 250.02 T
(*NONE*) 204 250.02 T
(tk_short) 132 235.02 T
(*NONE*) 204 235.02 T
(tk_long) 132 220.02 T
(*NONE*) 204 220.02 T
(tk_ushort) 132 205.02 T
(*NONE*) 204 205.02 T
(tk_ulong) 132 190.02 T
(*NONE*) 204 190.02 T
(tk_\337oat) 132 175.02 T
(*NONE*) 204 175.02 T
(tk_double) 132 160.02 T
(*NONE*) 204 160.02 T
(tk_boolean) 132 145.02 T
(*NONE*) 204 145.02 T
(tk_char) 132 130.02 T
(*NONE*) 204 130.02 T
(tk_octet) 132 115.02 T
(*NONE*) 204 115.02 T
(tk_any) 132 100.02 T
(*NONE*) 204 100.02 T
126 275.02 455.83 275.02 2 L
V
0.5 H
0 Z
N
126 95.02 455.83 95.02 2 L
V
N
52 342.02 54 686.02 R
V
52 306.98 54 316.98 R
V
52 277.02 54 286.02 R
V
52 262.02 54 271.02 R
V
52 262.02 54 271.02 R
V
52 247.02 54 256.02 R
V
52 247.02 54 256.02 R
V
52 232.02 54 241.02 R
V
52 232.02 54 241.02 R
V
52 217.02 54 226.02 R
V
52 217.02 54 226.02 R
V
52 202.02 54 211.02 R
V
52 202.02 54 211.02 R
V
52 187.02 54 196.02 R
V
52 187.02 54 196.02 R
V
52 172.02 54 181.02 R
V
52 172.02 54 181.02 R
V
52 157.02 54 166.02 R
V
52 157.02 54 166.02 R
V
52 142.02 54 151.02 R
V
52 142.02 54 151.02 R
V
52 127.02 54 136.02 R
V
52 127.02 54 136.02 R
V
52 112.02 54 121.02 R
V
52 112.02 54 121.02 R
V
52 97.02 54 106.02 R
V
52 97.02 54 106.02 R
V
FMENDPAGE
%%EndPage: "139" 138
%%Page: "138" 138
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(The Interface Repository) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(138) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
1 12 Q
0 X
(7.5.10) 69.26 678.02 T
0 F
(ExceptionDef) 108 678.02 T
2 F
(An ExceptionDef represents an exception de\336nition.) 108 660.02 T
3 10 Q
(interface ExceptionDef : Contained {) 108 635.35 T
(attribute T) 126 623.35 T
(ypeCode) 165.47 623.35 T
(type;) 234 623.35 T
(};) 108 611.35 T
2 12 Q
(The) 108 586.02 T
3 F
(type) 129.65 586.02 T
2 F
( attribute speci\336es the type of the exception parameters. The type will be a struct) 149.87 586.02 T
(with the members corresponding to the individual exception parameters.) 108 572.02 T
(The) 108 546.02 T
3 F
(describe) 129.65 546.02 T
2 F
( operation for a ExceptionDef object returns:) 170.1 546.02 T
3 10 Q
(struct ExceptionDescription {) 108 521.35 T
(Identi\336er) 126 509.35 T
(name;) 198 509.35 T
(RepositoryId) 126 497.35 T
(id;) 198 497.35 T
(RepositoryId) 126 485.35 T
(de\336ned_in;) 198 485.35 T
(T) 126 473.35 T
(ypeCode) 130.41 473.35 T
(type;) 198 473.35 T
(};) 108 461.35 T
54 415.99 540 419.02 C
108 417.5 540 417.5 2 L
0.25 H
2 Z
0 X
0 K
N
54 417.5 99 417.5 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(7.6) 83.15 423.68 T
0 F
(T) 108 423.68 T
(ypeCodes) 115.78 423.68 T
2 12 Q
(T) 108 397.99 T
(ypeCodes are values that represent invocation ar) 114.49 397.99 T
(gument types and attribute types. They) 346.75 397.99 T
(can be obtained from the Interface Repository or from IDL compilers.) 108 383.99 T
(T) 108 357.99 T
(ypeCodes have a number of uses. They are used in the dynamic invocation interface to) 114.49 357.99 T
(indicate the types of the actual ar) 108 343.99 T
(guments. They are used by an Interface Repository to) 266.33 343.99 T
(represent the type speci\336cations that are part of many IDL declarations. Finally) 108 329.99 T
(, they are) 487.6 329.99 T
(crucial to the semantics of the) 108 315.99 T
3 F
(any) 254.56 315.99 T
2 F
( type \050see \2444.7.1.6 on page 68\051.) 271.51 315.99 T
(T) 108 289.99 T
(ypeCodes are themselves values that can be passed as invocation ar) 114.49 289.99 T
(guments. T) 438.02 289.99 T
(o allow) 491.15 289.99 T
-0.54 (dif) 108 275.99 P
-0.54 (ferent ORB implementations to hide extra information in T) 121.11 275.99 P
-0.54 (ypeCodes, the representation) 399.74 275.99 P
(of T) 108 261.99 T
(ypeCodes will be opaque \050like object references\051. However) 127.48 261.99 T
(, we will assume that the) 411.42 261.99 T
(representation is such that T) 108 247.99 T
(ypeCode \322literals\323 can be placed in C include \336les.) 242.4 247.99 T
(Abstractly) 108 221.99 T
(, T) 157.18 221.99 T
(ypeCodes consist of a \322kind\323 \336eld, and a \322parameter list.\323 For example, the) 169.67 221.99 T
(IDL type) 108 207.99 T
3 F
(long) 154.63 207.99 T
2 F
( has T) 175.39 207.99 T
(ypeCode tk_long and no parameters. The IDL type) 203.86 207.99 T
3 F
(sequence<boolean,10>) 108 193.99 T
2 F
( has T) 216.24 193.99 T
(ypeCode tk_sequence and two parameters:) 244.71 193.99 T
3 F
(10) 452.88 193.99 T
2 F
( and) 463.82 193.99 T
3 F
(boolean) 487.14 193.99 T
2 F
(.) 524.84 193.99 T
(T) 108 167.99 T
(wo T) 114.49 167.99 T
(ypeCodes are equal if the IDL type speci\336cations from which they are compiled) 138.63 167.99 T
-0.18 (denote equal types. Equal T) 108 153.99 P
-0.18 (ypeCodes are interchangeable, and give identical results when) 240.01 153.99 P
(T) 108 139.99 T
(ypeCode operations are applied to them.) 114.49 139.99 T
34 135.99 36 686.02 R
V
FMENDPAGE
%%EndPage: "138" 137
%%Page: "137" 137
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(Interface Repository Interfaces) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(137) 541.33 60.29 T
72 87.98 558 686.02 R
7 X
V
1 12 Q
0 X
(7.5.8) 93.93 678.02 T
0 F
(T) 126 678.02 T
(ypeDef Interface) 132.67 678.02 T
2 F
(T) 126 660.02 T
(ypeDefs are only for named types \050i.e., T) 132.49 660.02 T
(ypeDef, Struct, ...\051 They aren\325) 328.82 660.02 T
(t created for in-) 472.81 660.02 T
(line types.) 126 646.02 T
3 10 Q
(interface T) 126 621.35 T
(ypeDef : Contained {) 166.85 621.35 T
(attribute T) 144 609.35 T
(ypeCode) 183.47 609.35 T
(type;) 234 609.35 T
(};) 126 597.35 T
2 12 Q
-0.36 (The) 126 572.02 P
3 F
-0.33 (type) 147.29 572.02 P
2 F
-0.36 ( attribute speci\336es the T) 167.51 572.02 P
-0.36 (ypeCode for this type de\336nition. See \2447.6 on page 138 for) 280.48 572.02 P
(more information on T) 126 558.02 T
(ypeCodes.) 234.76 558.02 T
(The) 126 532.02 T
3 F
(describe) 147.65 532.02 T
2 F
( operation for a T) 188.1 532.02 T
(ypeDef object returns:) 271.19 532.02 T
3 10 Q
(struct T) 126 507.35 T
(ypeDescription {) 155.45 507.35 T
(Identi\336er) 144 495.35 T
(name;) 234 495.35 T
(RepositoryId) 144 483.35 T
(id;) 234 483.35 T
(RepositoryId) 144 471.35 T
(de\336ned_in;) 234 471.35 T
(T) 144 459.35 T
(ypeCode) 148.41 459.35 T
(type;) 234 459.35 T
(};) 126 447.35 T
1 12 Q
(7.5.9) 93.93 416.02 T
0 F
(ConstantDef Interface) 126 416.02 T
2 F
(The ConstantDef object de\336nes a named constant.) 126 398.02 T
3 10 Q
(interface ConstantDef : Contained {) 126 373.35 T
(attribute T) 144 361.35 T
(ypeCode) 183.47 361.35 T
(type;) 234 361.35 T
(attribute any) 144 349.35 T
(value;) 234 349.35 T
(};) 126 337.35 T
2 12 Q
-0.22 (The) 126 312.02 P
3 F
-0.2 (type) 147.43 312.02 P
2 F
-0.22 ( attribute speci\336es the T) 167.65 312.02 P
-0.22 (ypeCode for this constant. The type of a constant must be) 281.21 312.02 P
(one of the simple types \050long, short, \337oat, char) 126 298.02 T
(, string, octet, etc.\051) 349.04 298.02 T
(The) 126 272.02 T
3 F
(value) 147.65 272.02 T
2 F
( attribute contains the value of the constant, not the computation of the value) 172.8 272.02 T
(\050e.g., the fact that it was de\336ned as \3221+2\323\051.) 126 258.02 T
(The) 126 232.02 T
3 F
(describe) 147.65 232.02 T
2 F
( operation for a ConstantDef object returns:) 188.1 232.02 T
3 10 Q
(struct ConstantDescription {) 126 207.35 T
(Identi\336er) 144 195.35 T
(name;) 234 195.35 T
(RepositoryId) 144 183.35 T
(id;) 234 183.35 T
(RepositoryId) 144 171.35 T
(de\336ned_in;) 234 171.35 T
(T) 144 159.35 T
(ypeCode) 148.41 159.35 T
(type;) 234 159.35 T
(any) 144 147.35 T
(value;) 234 147.35 T
(};) 126 135.35 T
52 132.02 54 686.02 R
V
FMENDPAGE
%%EndPage: "137" 136
%%Page: "136" 136
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(The Interface Repository) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(136) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
2 12 Q
0 X
(The) 108 678.02 T
3 F
(describe) 129.65 678.02 T
2 F
( operation for an OperationDef object returns:) 170.1 678.02 T
3 10 Q
(struct OperationDescription {) 108 653.35 T
(Identi\336er) 126 641.35 T
(name;) 270 641.35 T
(RepositoryId) 126 629.35 T
(id;) 270 629.35 T
(RepositoryId) 126 617.35 T
(de\336ned_in;) 270 617.35 T
(T) 126 605.35 T
(ypeCode) 130.41 605.35 T
(result;) 270 605.35 T
(OperationMode) 126 593.35 T
(mode;) 270 593.35 T
(sequence<string>) 126 581.35 T
(context;) 270 581.35 T
(sequence<ParameterDescription>) 126 569.35 T
(parameter;) 270 569.35 T
(sequence<ExceptionDescription>) 126 557.35 T
(exception) 270 557.35 T
(};) 108 545.35 T
2 12 Q
-0.23 (The) 108 520.02 P
3 F
-0.21 (describe_contents) 129.41 520.02 P
2 F
-0.23 ( operation provides a complete description of this operation, includ-) 216.32 520.02 P
(ing a description of each parameter and each exception de\336ned for this operation.) 108 506.02 T
1 F
(7.5.7) 75.93 474.02 T
0 F
(ParameterDef) 108 474.02 T
2 F
-0.01 (A ParameterDef represents the information needed to de\336ne an ar) 108 456.02 P
-0.01 (gument to an operation.) 423.11 456.02 P
3 10 Q
(interface ParameterDef : Contained {) 108 431.35 T
(enum ParameterMode {IN, OUT) 126 419.35 T
(, INOUT};) 246.23 419.35 T
(attribute T) 126 395.35 T
(ypeCode) 165.47 395.35 T
(type;) 234 395.35 T
(attribute ParameterMode) 126 383.35 T
(mode;) 234 383.35 T
(};) 108 371.35 T
2 12 Q
-0.31 (The) 108 346.02 P
3 F
-0.28 (type) 129.34 346.02 P
2 F
-0.31 ( attribute speci\336es the T) 149.56 346.02 P
-0.31 (ypeCode of this ar) 262.72 346.02 P
-0.31 (gument. The T) 349.84 346.02 P
-0.31 (ypeCode must be known) 419.33 346.02 P
(globally) 108 332.02 T
(, within this module, or de\336ned in this interface. See \2447.6 on page 138 for more) 146.54 332.02 T
(information on T) 108 318.02 T
(ypeCodes.) 189.11 318.02 T
(The) 108 292.02 T
3 F
(mode) 129.65 292.02 T
2 F
( attribute speci\336es whether this ar) 155.88 292.02 T
(gument is used as an in, out, or in/out ar) 317.21 292.02 T
(gu-) 509.21 292.02 T
(ment.) 108 278.02 T
(The) 108 252.02 T
3 F
(describe) 129.65 252.02 T
2 F
( operation for a ParameterDef object returns:) 170.1 252.02 T
3 10 Q
(struct ParameterDescription {) 108 227.35 T
(Identi\336er) 126 215.35 T
(name;) 216 215.35 T
(RepositoryId) 126 203.35 T
(id;) 216 203.35 T
(RepositoryId) 126 191.35 T
(de\336ned_in;) 216 191.35 T
(T) 126 179.35 T
(ypeCode) 130.41 179.35 T
(type;) 216 179.35 T
(ParameterMode) 126 167.35 T
(mode;) 216 167.35 T
(};) 108 155.35 T
34 152.02 36 686.02 R
V
FMENDPAGE
%%EndPage: "136" 135
%%Page: "135" 135
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(Interface Repository Interfaces) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(135) 541.33 60.29 T
72 87.98 558 686.02 R
7 X
V
1 12 Q
0 X
(7.5.5) 93.93 678.02 T
0 F
(AttributeDef) 126 678.02 T
2 F
(An AttributeDef represents the information that de\336nes an attribute.) 126 660.02 T
3 10 Q
(interface AttributeDef : Contained {) 126 635.35 T
(enum AttributeMode {NORMAL, READONL) 144 623.35 T
(Y};) 309.43 623.35 T
(attribute T) 144 599.35 T
(ypeCode) 183.47 599.35 T
(type;) 252 599.35 T
(attribute AttributeMode) 144 587.35 T
(mode;) 252 587.35 T
(};) 126 575.35 T
2 12 Q
(The) 126 550.02 T
3 F
(type) 147.65 550.02 T
2 F
( attribute speci\336es the T) 167.87 550.02 T
(ypeCode of this attribute. The T) 282.29 550.02 T
(ypeCode must be known) 435.35 550.02 T
(globally) 126 536.02 T
(, within this module, or de\336ned in this interface. See \2447.6 on page 138 for more) 164.54 536.02 T
(information on T) 126 522.02 T
(ypeCodes.) 207.11 522.02 T
(The) 126 496.02 T
3 F
(mode) 147.65 496.02 T
2 F
( attribute speci\336es read only or read/write access for this attribute.) 173.88 496.02 T
(The) 126 470.02 T
3 F
(describe) 147.65 470.02 T
2 F
( operation for an AttributeDef object returns:) 188.1 470.02 T
3 10 Q
(struct AttributeDescription {) 126 445.35 T
(Identi\336er) 144 433.35 T
(name;) 234 433.35 T
(RepositoryId) 144 421.35 T
(id;) 234 421.35 T
(RepositoryId) 144 409.35 T
(de\336ned_in;) 234 409.35 T
(T) 144 397.35 T
(ypeCode) 148.41 397.35 T
(type) 234 397.35 T
(AttributeMode) 144 385.35 T
(mode;) 234 385.35 T
(};) 126 373.35 T
1 12 Q
(7.5.6) 93.93 342.02 T
0 F
(OperationDef) 126 342.02 T
2 F
(An OperationDef represents the information needed to de\336ne an operation.) 126 324.02 T
3 10 Q
(interface OperationDef : Contained {) 126 299.35 T
(typedef Identi\336er) 144 287.35 T
(ContextIdenti\336er;) 252 287.35 T
(enum OperationMode) 144 275.35 T
({NORMAL, ONEW) 252 275.35 T
(A) 320.75 275.35 T
(Y};) 325.92 275.35 T
(attribute T) 144 251.35 T
(ypeCode) 183.47 251.35 T
(result;) 306 251.35 T
(attribute OperationMode) 144 239.35 T
(mode;) 306 239.35 T
(attribute sequence<ContextIdenti\336er>) 144 227.35 T
(context;) 306 227.35 T
(};) 126 215.35 T
2 12 Q
(The) 126 190.02 T
3 F
(result) 147.65 190.02 T
2 F
( attribute speci\336es the T) 174.43 190.02 T
(ypeCode of the value returned by this operation.) 288.85 190.02 T
(The operation\325) 126 164.02 T
(s) 196.28 164.02 T
3 F
(mode) 203.95 164.02 T
2 F
( is either \322oneway\323 \050i.e., no output is returned\051 or normal.) 230.18 164.02 T
(The) 126 138.02 T
3 F
(context) 147.65 138.02 T
2 F
( attribute speci\336es the list of context identi\336ers that apply to this operation.) 182.62 138.02 T
52 134.02 54 686.02 R
V
FMENDPAGE
%%EndPage: "135" 134
%%Page: "134" 134
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(The Interface Repository) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(134) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
1 12 Q
0 X
(7.5.4) 75.93 678.02 T
0 F
(InterfaceDef) 108 678.02 T
2 F
(An InterfaceDef object represents an interface de\336nition.) 108 652.02 T
3 10 Q
(interface InterfaceDef : Container) 108 627.35 T
(, Contained {) 236.89 627.35 T
(sequence<RepositoryId>) 126 615.35 T
(base_interfaces;) 234 615.35 T
(struct FullInterfaceDescription {) 126 591.35 T
(Identi\336er) 144 579.35 T
(name;) 288 579.35 T
(RepositoryId) 144 567.35 T
(id;) 288 567.35 T
(RepositoryId) 144 555.35 T
(de\336ned_in;) 288 555.35 T
(sequence<OperationDescription>) 144 543.35 T
(operation) 288 543.35 T
(sequence<AttributeDescription>) 144 531.35 T
(attribute;) 288 531.35 T
(};) 126 519.35 T
(FullInterfaceDescription describe_interface\050\051;) 126 495.35 T
(};) 108 483.35 T
2 12 Q
-0.48 (The) 108 458.02 P
3 F
-0.44 (base_interfaces) 129.17 458.02 P
2 F
-0.48 ( attribute represents a list of all the interfaces from which this interface) 203.51 458.02 P
(inherits.) 108 444.02 T
(The) 108 418.02 T
3 F
(describe) 129.65 418.02 T
2 F
( operation for an InterfaceDef object returns:) 170.1 418.02 T
3 10 Q
(struct InterfaceDescription {) 108 393.35 T
(Identi\336er) 126 381.35 T
(name;) 198 381.35 T
(RepositoryId) 126 369.35 T
(id;) 198 369.35 T
(RepositoryId) 126 357.35 T
(de\336ned_in;) 198 357.35 T
(};) 108 345.35 T
2 12 Q
(The) 108 320.02 T
3 F
(contents) 129.65 320.02 T
2 F
( operation returns the list of constants, typedefs, and exceptions de\336ned in) 170.63 320.02 T
-0.09 (this InterfaceDef and the list of attributes and operations either de\336ned or inherited in this) 108 306.02 P
-0.06 (InterfaceDef. If the) 108 292.02 P
3 F
-0.05 (exclude_inherited) 203.06 292.02 P
2 F
-0.06 ( parameter is set to TRUE, only attributes and opera-) 286.69 292.02 P
-0.07 (tions de\336ned within this interface are returned. If the) 108 278.02 P
3 F
-0.07 (exclude_inherited) 363.14 278.02 P
2 F
-0.07 ( parameter is set to) 446.77 278.02 P
(F) 108 264.02 T
(ALSE, all attributes and operations are returned.) 113.78 264.02 T
(The) 108 238.02 T
3 F
(lookup_name) 129.65 238.02 T
2 F
( operation is used to locate a constant, typedef, exception, attribute,) 193.04 238.02 T
(operation, or parameter de\336ned in this InterfaceDef by name. Names must be unique) 108 224.02 T
(within a interface de\336nition.) 108 210.02 T
(The) 108 184.02 T
3 F
(describe_contents) 129.65 184.02 T
2 F
( operation provides a complete description of this interface, includ-) 216.55 184.02 T
(ing a description of its constants, typedefs, exceptions, attributes, and operations, includ-) 108 170.02 T
(ing the description of each parameter and each exception de\336ned for each operation.) 108 156.02 T
(The) 108 130.02 T
3 F
(describe_interface) 129.65 130.02 T
2 F
( operation provides a convenient way to obtain a description of all) 216.56 130.02 T
(of the operations and attributes de\336ned in an interface.) 108 116.02 T
34 674.02 36 686.02 R
V
34 112.02 36 634.02 R
V
FMENDPAGE
%%EndPage: "134" 133
%%Page: "133" 133
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(Interface Repository Interfaces) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(133) 541.33 60.29 T
72 87.98 558 686.02 R
7 X
V
3 F
0 X
(interface Repository : Container {) 126 679.35 T
(Contained lookup_id \050in RepositoryId search_id\051;) 144 667.35 T
(};) 126 655.35 T
2 12 Q
(The) 126 630.02 T
3 F
(lookup_id) 147.65 630.02 T
2 F
( operation is used to lookup an object in the Repository given its) 194.1 630.02 T
3 F
(RepositoryId) 126 616.02 T
2 F
(.) 186.11 616.02 T
(The inherited) 126 590.02 T
3 F
(contents) 193.28 590.02 T
2 F
( operation can be used to list constants, typedefs, exceptions, inter-) 234.26 590.02 T
(faces, and modules that are contained by the Repository object, or any one of these inter-) 126 576.02 T
(face types. Constants, typedefs, exceptions, and interfaces contained by the Repository) 126 562.02 T
(object have global scope throughout the Interface Repository) 126 548.02 T
(.) 418 548.02 T
(The inherited) 126 522.02 T
3 F
(lookup_name) 193.28 522.02 T
2 F
( operation can be used to \336nd instances of a particular simple) 256.68 522.02 T
(name within an Interface Repository) 126 508.02 T
(. For example, specifying a) 300.42 508.02 T
3 F
(search_name) 433.99 508.02 T
2 F
( of \322Print\323) 496.86 508.02 T
(and a) 126 494.02 T
3 F
(levels_to_search) 154.64 494.02 T
2 F
( of -1 would return a list of all the Print operations de\336ned within) 233.92 494.02 T
(this Interface Repository) 126 480.02 T
(.) 243.8 480.02 T
-0.13 (The inherited) 126 454.02 P
3 F
-0.12 (describe_contents) 193.03 454.02 P
2 F
-0.13 ( operation can be used to list a more complete description) 279.93 454.02 P
(of the contents of the Interface Repository) 126 440.02 T
(. For each object,) 327.73 440.02 T
3 F
(describe_contents) 413.66 440.02 T
2 F
( returns:) 500.57 440.02 T
3 10 Q
(struct RepositoryDescription {) 126 415.35 T
(Identi\336er) 144 403.35 T
(name;) 216 403.35 T
(RepositoryId) 144 391.35 T
(id;) 216 391.35 T
(RepositoryId) 144 379.35 T
(de\336ned_in;) 216 379.35 T
(};) 126 367.35 T
1 12 Q
(7.5.3) 93.93 336.02 T
0 F
(ModuleDef) 126 336.02 T
2 F
(A ModuleDef represents constants, typedefs, exceptions, interfaces and other module) 126 318.02 T
(objects.) 126 304.02 T
3 10 Q
(interface ModuleDef : Container) 126 279.35 T
(, Contained {};) 249.41 279.35 T
2 12 Q
(The) 126 254.02 T
3 F
(describe) 147.65 254.02 T
2 F
( operation for a ModuleDef object returns:) 188.1 254.02 T
3 10 Q
(struct ModuleDescription {) 126 229.35 T
(Identi\336er) 144 217.35 T
(name;) 216 217.35 T
(RepositoryId) 144 205.35 T
(id;) 216 205.35 T
(RepositoryId) 144 193.35 T
(de\336ned_in;) 216 193.35 T
(};) 126 181.35 T
2 12 Q
(The) 126 156.02 T
3 F
(lookup_name) 147.65 156.02 T
2 F
( operation is used to locate a constant, typedef, exception, attribute, or) 211.04 156.02 T
(operation de\336ned in this module. Names must be unique within a module.) 126 142.02 T
52 138.02 54 686.02 R
V
FMENDPAGE
%%EndPage: "133" 132
%%Page: "132" 132
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(The Interface Repository) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(132) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
3 12 Q
0 X
(search_name) 108 678.02 T
2 F
(Speci\336es which name is to be searched for) 234 678.02 T
(.) 437.52 678.02 T
3 F
(levels_to_search) 108 652.02 T
2 F
(Controls whether the lookup is constrained to the object the) 234 652.02 T
(operation is invoked on or whether it should search through) 234 638.02 T
(objects contained by the object as well.) 234 624.02 T
-0.44 (Setting) 234 598.02 P
3 F
-0.41 (levels_to_search) 270.54 598.02 P
2 F
-0.44 ( to -1 searches the current object and all) 349.82 598.02 P
(contained objects. Setting) 234 584.02 T
3 F
(levels_to_search) 360.59 584.02 T
2 F
( to 1 searches only) 439.87 584.02 T
-0.5 (the current object. Setting) 234 570.02 P
3 F
-0.45 (levels_to_search) 358.93 570.02 P
2 F
-0.5 ( to any other positive) 438.21 570.02 P
(integer constrains the lookup to only search through containers) 234 556.02 T
(that many levels down.) 234 542.02 T
3 F
(restrict_type) 108 516.02 T
2 F
(If) 234 516.02 T
3 F
(restrict_type) 244.99 516.02 T
2 F
( is set to \322all\323, objects of all interface types are) 304.02 516.02 T
(returned \050e.g., attributes, operations, and exceptions are all) 234 502.02 T
(returned\051. If) 234 488.02 T
3 F
(restrict_type) 294.94 488.02 T
2 F
( is set to a speci\336c interface, only) 353.97 488.02 T
(objects of that interface type are returned. For example, only) 234 474.02 T
(attribute objects are returned if) 234 460.02 T
3 F
(restrict_type) 384.88 460.02 T
2 F
( is set to \322Attribute-) 443.91 460.02 T
(Def\323.) 234 446.02 T
3 F
(exclude_inherited) 108 420.02 T
2 F
(If set to TRUE, inherited objects \050if there are any\051 are not) 234 420.02 T
(returned. If set to F) 234 406.02 T
(ALSE, all contained objects \050whether con-) 325.38 406.02 T
(tained due to inheritance or because they were de\336ned within) 234 392.02 T
(the object\051 are returned.) 234 378.02 T
(The) 108 352.02 T
3 F
(describe_contents) 129.65 352.02 T
2 F
( operation combines the) 216.55 352.02 T
3 F
(contents) 334.47 352.02 T
2 F
( operation and the) 375.45 352.02 T
3 F
(describe) 464.72 352.02 T
2 F
( opera-) 505.17 352.02 T
(tion. For each object returned by the) 108 338.02 T
3 F
(contents) 285.2 338.02 T
2 F
( operation, the description of the object is) 326.18 338.02 T
(returned \050i.e., the object\325) 108 324.02 T
(s) 225.91 324.02 T
3 F
(describe) 233.57 324.02 T
2 F
( operation is invoked and the results returned\051.) 274.02 324.02 T
3 F
(max_returned_objs) 108 298.02 T
2 F
(Limits the number of objects that can be returned in an invoca-) 234 298.02 T
-0.23 (tion of the call to the number provided. Setting the parameter to) 234 284.02 P
(-1 means return all contained objects.) 234 270.02 T
1 F
(7.5.2) 75.93 238.02 T
0 F
(Repository) 108 238.02 T
3 F
(Repository) 108 220.02 T
2 F
( is an interface that provides global access to the Interface Repository) 159.37 220.02 T
(. The) 491.99 220.02 T
3 F
(Repository) 108 206.02 T
2 F
( object contains constants, typedefs, exceptions, interfaces, and modules. As it) 159.37 206.02 T
-0.03 (inherits from) 108 192.02 P
3 F
-0.03 (Container) 173.23 192.02 P
2 F
-0.03 (, it can be used to look up any de\336nition \050whether globally de\336ned) 218.64 192.02 P
(or de\336ned within a module or interface\051 either by) 108 178.02 T
3 F
(name) 347.48 178.02 T
2 F
( or by) 373.17 178.02 T
3 F
(id) 404.15 178.02 T
2 F
(.) 412.9 178.02 T
(There may be more than one Interface Repository in a particular ORB environment) 108 152.02 T
(\050although some ORBs might require that de\336nitions they use be registered with a particu-) 108 138.02 T
(lar repository\051. Each ORB environment will provide a means for obtaining object refer-) 108 124.02 T
(ences to the Repositories available within the environment.) 108 110.02 T
34 106.02 36 686.02 R
V
FMENDPAGE
%%EndPage: "132" 131
%%Page: "131" 131
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(Interface Repository Interfaces) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(131) 541.33 60.29 T
72 87.98 558 686.02 R
7 X
V
2 12 Q
0 X
(The) 126 678.02 T
3 F
(Container) 147.65 678.02 T
2 F
( interface is used to locate objects that are contained by other objects.) 193.55 678.02 T
3 10 Q
(interface Container {) 126 653.35 T
(sequence<Contained> contents \050) 144 641.35 T
(in InterfaceName) 162 629.35 T
(limit_type,) 252 629.35 T
(in boolean) 162 617.35 T
(exclude_inherited) 252 617.35 T
(\051;) 144 605.35 T
(sequence<Contained> lookup_name \050) 144 593.35 T
(in Identi\336er) 162 581.35 T
(search_name,) 252 581.35 T
(in long) 162 569.35 T
(levels_to_search,) 252 569.35 T
(in InterfaceName) 162 557.35 T
(limit_type,) 252 557.35 T
(in boolean) 162 545.35 T
(exclude_inherited) 252 545.35 T
(\051;) 144 533.35 T
(struct Description {) 144 521.35 T
(Contained) 162 509.35 T
(contained_object;) 252 509.35 T
(Identi\336er) 162 497.35 T
(name;) 252 497.35 T
(any) 162 485.35 T
(value;) 252 485.35 T
(};) 144 473.35 T
(sequence<Description> describe_contents\050) 144 461.35 T
(in InterfaceName) 162 449.35 T
(limit_type,) 252 449.35 T
(in boolean) 162 437.35 T
(exclude_inherited,) 252 437.35 T
(in long) 162 425.35 T
(max_returned_objs) 252 425.35 T
(\051;) 144 413.35 T
(};) 126 401.35 T
2 12 Q
-0.14 (The) 126 376.02 P
3 F
-0.12 (contents) 147.51 376.02 P
2 F
-0.14 ( operation returns the list of objects contained by the object. The operation is) 188.49 376.02 P
(used to navigate through the hierarchy of objects. Starting with the Repository object, a) 126 362.02 T
(client uses this operation to list all of the objects contained by the Repository) 126 348.02 T
(, all of the) 494.67 348.02 T
(objects contained by the modules within the Repository) 126 334.02 T
(, and then all of the interfaces) 392.06 334.02 T
(within a speci\336c module, and so on.) 126 320.02 T
3 F
(restrict_type) 126 294.02 T
2 F
(If) 252 294.02 T
3 F
(restrict_type) 262.99 294.02 T
2 F
( is set to \322all\323, objects of all interface types are) 322.02 294.02 T
(returned. For example, if this is an InterfaceDef, the attribute,) 252 280.02 T
-0.43 (operation, and exception objects are all returned. If) 252 266.02 P
3 F
-0.39 (restrict_type) 496.39 266.02 P
2 F
(is set to a speci\336c interface, only objects of that interface type) 252 252.02 T
(are returned. For example, only attribute objects are returned if) 252 238.02 T
3 F
(restrict_type) 252 224.02 T
2 F
( is set to \322AttributeDef\323.) 311.03 224.02 T
3 F
(exclude_inherited) 126 198.02 T
2 F
(If set to TRUE, inherited objects \050if there are any\051 are not) 252 198.02 T
(returned. If set to F) 252 184.02 T
(ALSE, all contained objects\321whether con-) 343.38 184.02 T
(tained due to inheritance or because they were de\336ned within) 252 170.02 T
(the object\321are returned.) 252 156.02 T
(The) 126 130.02 T
3 F
(lookup_name) 147.65 130.02 T
2 F
( operation is used to locate an object by name within a particular object) 211.04 130.02 T
(or within the objects contained by that object.) 126 116.02 T
52 112.02 54 686.02 R
V
FMENDPAGE
%%EndPage: "131" 130
%%Page: "130" 130
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(The Interface Repository) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(130) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
3 10 Q
0 X
( interface Contained {) 108 679.35 T
(attribute Identi\336er) 126 667.35 T
(name;) 252 667.35 T
(attribute RepositoryId) 126 655.35 T
(id;) 252 655.35 T
(attribute RepositoryId) 126 643.35 T
(de\336ned_in;) 252 643.35 T
(sequence <Container> within \050\051;) 126 619.35 T
(struct Description {) 126 595.35 T
(Identi\336er) 144 583.35 T
(name;) 198 583.35 T
(any) 144 571.35 T
(value;) 198 571.35 T
(};) 126 559.35 T
(Description describe \050\051;) 126 547.35 T
(};) 108 535.35 T
2 12 Q
(All objects that are contained by other objects have a) 108 510.02 T
3 F
(name) 365.14 510.02 T
2 F
( and an) 390.83 510.02 T
3 F
(id) 428.46 510.02 T
2 F
( to identify them.) 437.21 510.02 T
-0.02 (Objects can be contained either because they are de\336ned within the containing object \050for) 108 484.02 P
-0.2 (example, an interface is de\336ned within a module\051 or because they are inherited by the con-) 108 470.02 P
(taining object \050for example, an operation may be contained by an interface because the) 108 456.02 T
(interface inherits the operation from another interface\051. If an object is contained through) 108 442.02 T
(inheritance, the) 108 428.02 T
3 F
(de\336ned_in) 184.94 428.02 T
2 F
( attribute identi\336es the interface of the object from which the) 234.12 428.02 T
-0.4 (object is derived. If the object is not inherited \050it is de\336ned here\051, this attribute contains the) 108 414.02 P
3 F
(id) 108 400.02 T
2 F
( of this interface or module.) 116.74 400.02 T
(The) 108 374.02 T
3 F
(within) 129.65 374.02 T
2 F
( operation returns the list of objects that contain the object. If the object is an) 158.06 374.02 T
-0.29 (interface or module it can be contained only by the object that de\336nes it. Other objects can) 108 360.02 P
(be contained by the objects that de\336ne them and by the objects that inherit them.) 108 346.02 T
(The) 108 320.02 T
3 F
(describe) 129.65 320.02 T
2 F
( operation returns a structure containing all of the attributes de\336ned for the) 170.1 320.02 T
-0.27 (interface. The) 108 306.02 P
3 F
-0.24 (describe) 177.06 306.02 P
2 F
-0.27 ( structure associated with each interface is provided below with the) 217.52 306.02 P
(interface\325) 108 292.02 T
(s de\336nition. The name of the structure returned is provided with the returned) 153.29 292.02 T
(structure. For example, if the) 108 278.02 T
3 F
(describe) 250.23 278.02 T
2 F
( operation is invoked on an attribute object, the) 290.68 278.02 T
3 F
-0.03 (name) 108 264.02 P
2 F
-0.04 ( \336eld contains \322AttributeDescription\323 and the) 133.69 264.02 P
3 F
-0.03 (value) 354.66 264.02 P
2 F
-0.04 ( \336eld contains an) 379.81 264.02 P
3 F
-0.03 (any) 464.28 264.02 P
2 F
-0.04 (, which con-) 480.45 264.02 P
(tains the AttributeDescription structure.) 108 250.02 T
34 246.02 36 686.02 R
V
FMENDPAGE
%%EndPage: "130" 129
%%Page: "129" 129
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(Interface Repository Interfaces) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(129) 541.33 60.29 T
72 87.98 558 686.02 R
7 X
V
72 668.99 558 672.02 C
126 670.5 558 670.5 2 L
0.25 H
2 Z
0 X
0 K
N
72 670.5 117 670.5 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(7.5) 101.15 676.68 T
0 F
(Interface Repository Interfaces) 126 676.68 T
2 12 Q
(A common set of operations is used to locate objects within the Interface Repository) 126 650.99 T
(.) 530.61 650.99 T
(These operations are de\336ned in the abstract interfaces) 126 636.99 T
3 F
(Container) 386.45 636.99 T
2 F
( and) 432.35 636.99 T
3 F
(Contained) 455.66 636.99 T
2 F
( described) 503.74 636.99 T
(below) 126 622.99 T
(. Objects that are containers inherit navigation operations from the) 154.53 622.99 T
3 F
(Container) 475.97 622.99 T
2 F
( inter-) 521.87 622.99 T
(face. Objects that are contained by other objects inherit navigation operations from the) 126 608.99 T
3 F
(Contained) 126 594.99 T
2 F
( interface. The) 174.08 594.99 T
3 F
(Contained) 246.68 594.99 T
2 F
( and) 294.76 594.99 T
3 F
(Container) 318.07 594.99 T
2 F
( interfaces are not instantiable.) 363.97 594.99 T
1 F
(7.5.1) 93.93 562.99 T
0 F
(Container and Contained Interfaces) 126 562.99 T
2 F
(The following typedefs are used in the de\336nitions of the) 126 544.99 T
3 F
(Contained) 397.82 544.99 T
2 F
( and) 445.9 544.99 T
3 F
(Container) 469.21 544.99 T
2 F
( inter-) 515.11 544.99 T
(faces:) 126 530.99 T
3 10 Q
(typedef string) 126 506.33 T
(Identi\336er;) 216 506.33 T
(typedef string) 126 494.33 T
(RepositoryId;) 216 494.33 T
(typedef Identi\336er) 126 482.33 T
(InterfaceName;) 216 482.33 T
3 12 Q
(Identi\336er) 126 456.99 T
2 F
(s are the simple names that identify modules, interface, constants, typedefs,) 167.53 456.99 T
-0.34 (exceptions, attributes, and operations. They correspond exactly to the identi\336ers described) 126 442.99 P
(in \2444.1.3 on page 50 and \2444.3 on page 54. For example, both \322) 126 428.99 T
3 F
(SampleDef) 425.8 428.99 T
2 F
(\323 and) 476.63 428.99 T
(\322) 126 414.99 T
3 F
(SampleOp) 131.32 414.99 T
2 F
(\323 are) 179.97 414.99 T
3 F
(identi\336er) 205.94 414.99 T
2 F
(s in the following IDL de\336nition.) 247.47 414.99 T
3 10 Q
(interface SampleDef {) 126 390.33 T
(void SampleOp \050\051;) 144 378.33 T
(};) 126 366.33 T
2 12 Q
-0.23 (A name is not necessarily unique within an Interface Repository) 126 340.99 P
-0.23 (. As described in \2444.1) 431.25 340.99 P
-0.23 (1 on) 534.47 340.99 P
(page 76, names are unique only within a module.) 126 326.99 T
(A) 126 300.99 T
3 F
(RepositoryId) 137.66 300.99 T
2 F
( is an identi\336er used by the ORB to uniquely identify module, interface,) 197.77 300.99 T
(constant, typedef, exception, attribute or operation. While) 126 286.99 T
3 F
(RepositoryId) 406.13 286.99 T
2 F
(s correspond to) 466.24 286.99 T
(global or fully quali\336ed names \050with respect to a particular repository\051, they are opaque) 126 272.99 T
(structures so that an ORB may optimize their implementation. As) 126 258.99 T
3 F
(RepositoryId) 443.48 258.99 T
2 F
(s are) 503.59 258.99 T
(de\336ned as strings, they can be manipulated \050e.g., copied and compared\051 using a language) 126 244.99 T
(binding\325) 126 230.99 T
(s string manipulation routines.) 165.99 230.99 T
(An) 126 204.99 T
3 F
(InterfaceName) 143.65 204.99 T
2 F
( is a string containing the name of one of the following interfaces) 211.43 204.99 T
(de\336ned within the Interface Repository:) 126 190.99 T
( \322AttributeDef\323, \322ConstantDef\323, \322ExceptionDef\323, \322InterfaceDef\323, \322ModuleDef\323, \322Param-) 126 164.99 T
(eterDef\323, \322OperationDef\323, T) 126 150.99 T
(ypeDef\323, \322all\323) 262.35 150.99 T
-0.36 (The) 126 124.99 P
3 F
-0.33 (Contained) 147.29 124.99 P
2 F
-0.36 ( interface represents the most generic form of interface from which all other) 195.37 124.99 P
(Interface Repository interfaces are derived. All objects within the Interface Repository) 126 110.99 T
(,) 540.55 110.99 T
(except the root object \050the Interface Repository itself\051 can be contained by other objects.) 126 96.99 T
52 92.99 54 686.02 R
V
FMENDPAGE
%%EndPage: "129" 128
%%Page: "128" 128
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(The Interface Repository) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(128) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
54 672.98 540 686.02 C
108 680.04 540 680.04 2 L
0.25 H
2 Z
0 X
0 K
N
54 680.04 99 680.04 2 L
0 Z
N
0 0 612 792 C
54 649.02 540 662.98 C
54 654.99 540 654.99 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
(FIG.  12) 54 666.32 T
0 F
(Interface Repository Object Containment) 108 666.32 T
2 12 Q
(There are three ways to locate an interface in the Interface Repository:) 108 394 T
1 10 Q
(1.) 108 374 T
2 12 Q
(By obtaining an InterfaceDef object directly from the ORB \050see \2448.2 on page 145\051.) 126 374 T
1 10 Q
(2.) 108 357 T
2 12 Q
(By navigating through the module name space using a sequence of names.) 126 357 T
1 10 Q
(3.) 108 340 T
2 12 Q
(By locating the InterfaceDef object that corresponds to a particular repository identi-) 126 340 T
(\336er) 126 326 T
(.) 141.33 326 T
(Obtaining an InterfaceDef object directly is useful when an object is encountered whose) 108 300 T
-0.16 (type was not known at compile time. By using the) 108 286 P
6 F
-0.16 (get_interface\050\051) 349.95 286 P
2 F
-0.16 ( operation on the object) 424.54 286 P
(reference, it is possible to retrieve the Interface Repository information about the object.) 108 272 T
(That information could then be used to perform operations on the object.) 108 258 T
(Navigating the module name space is useful when information about a particular named) 108 232 T
(interface is desired. Starting at the root module of the repository) 108 218 T
(, it is possible to obtain) 414.67 218 T
(entries by name.) 108 204 T
(Locating the InterfaceDef object by ID is useful when looking for an entry in one reposi-) 108 178 T
(tory that corresponds to another) 108 164 T
(. A repository identi\336er must be unique for a particular) 259.9 164 T
(repository) 108 150 T
(. By using the same identi\336er in two repositories, it is possible to obtain the) 155.85 150 T
(interface identi\336er for an interface in one repository) 108 136 T
(, and then obtain information about) 356.01 136 T
-0.26 (that interface from another repository that may be closer or contain additional information) 108 122 P
(about the interface.) 108 108 T
54 87.98 540 686.02 C
108 414 540 649.02 C
108 414 540 649.02 R
7 X
0 K
V
1 9 Q
0 X
(Repository) 108 633.46 T
(ConstantDef) 122.57 599.91 T
(T) 122.57 590.91 T
(ypeDef) 127.4 590.91 T
(ExceptionDef) 122.57 581.91 T
(InterfaceDef) 122.57 572.91 T
(ConstantDef) 149.57 536.91 T
(T) 149.57 527.91 T
(ypeDef) 154.4 527.91 T
(ExceptionDef) 149.57 518.91 T
(ModuleDef) 149.57 509.91 T
(InterfaceDef) 149.57 500.91 T
(ModuleDef) 122.57 563.91 T
(ConstantDef) 176.57 473.91 T
(T) 176.57 464.91 T
(ypeDef) 181.4 464.91 T
(ExceptionDef) 176.57 455.91 T
(AttributeDef) 176.57 446.91 T
(OperationDef) 176.57 437.91 T
(Each interface repository is represented) 288 633.46 T
(by a global root repository object.) 288 624.46 T
(The repository object represents the constants,) 288 599.91 T
(typedefs, exceptions, interfaces and modules) 288 590.91 T
(that are de\336ned outside the scope of a module.) 288 581.91 T
(The module object represents the constants,) 288 536.91 T
(typedefs, exceptions, interfaces, and other modules) 288 527.91 T
(de\336ned within the scope of the module.) 288 518.91 T
(An interface object represents constants,) 288 473.91 T
(typedefs, exceptions, attributes, and operations) 288 464.91 T
(de\336ned within or inherited by the interface.) 288 455.91 T
(Operation objects reference parameter and) 288 435.94 T
(exception objects.) 288 426.94 T
54 87.98 540 686.02 C
0 0 612 792 C
34 662.98 36 672.98 R
0 X
0 K
V
34 104 36 382 R
V
FMENDPAGE
%%EndPage: "128" 127
%%Page: "127" 127
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(Basics of the Interface Repository Interface) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(127) 541.33 60.29 T
72 87.98 558 686.02 R
7 X
V
2 12 Q
0 X
(in practice, attributes used to de\336ne an Interface Repository object will be read-only) 126 678.02 T
(attributes.) 126 664.02 T
(The interface speci\336cations for the Interface Repository objects de\336ne a set of basic oper-) 126 638.02 T
(ations for clients who want to access these interface objects. They are not intended to pro-) 126 624.02 T
-0.29 (vide suf) 126 610.02 P
-0.29 (\336cient semantics for the construction of basic interface browsers or command-line) 163.8 610.02 P
(interfaces to the Interface Repository) 126 596.02 T
(, nor to provide an administrative interface. Imple-) 303.07 596.02 T
-0.05 (mentations of the Interface Repository must have additional operations for creation of the) 126 582.02 P
(component objects within an Interface object, but these need not be part of the public) 126 568.02 T
(interface.) 126 554.02 T
(The CORBA speci\336cation de\336nes a minimal set of operations for interface objects. Addi-) 126 528.02 T
(tional operations that an implementation of the Interface Repository may provide could) 126 514.02 T
(include operations that provide for the versioning of interfaces, for the deletion of inter-) 126 500.02 T
(faces, and for the reverse compilation of speci\336cations \050i.e., the generation of a \336le con-) 126 486.02 T
(taining an object\325) 126 472.02 T
(s IDL speci\336cation\051.) 209.28 472.02 T
1 F
(7.4.4) 93.93 440.02 T
0 F
(Structure and Navigation of Interface Objects) 126 440.02 T
2 F
(The de\336nitions in the Interface Repository are structured as a set of objects. The objects) 126 422.02 T
(are structured the same way de\336nitions are structured\321some objects \050de\336nitions\051 \322con-) 126 408.02 T
(tain\323 other objects.) 126 394.02 T
(The containment relationships for the objects in the Interface Repository are shown in) 126 368.02 T
(FIG. 12 on page 128.) 126 354.02 T
52 350.02 54 686.02 R
V
FMENDPAGE
%%EndPage: "127" 126
%%Page: "126" 126
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(The Interface Repository) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(126) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
54 668.99 540 672.02 C
108 670.5 540 670.5 2 L
0.25 H
2 Z
0 X
0 K
N
54 670.5 99 670.5 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(7.4) 83.15 676.68 T
0 F
(Basics of the Interface Repository Interface) 108 676.68 T
1 12 Q
(7.4.1) 75.93 640.99 T
0 F
(Names) 108 640.99 T
2 F
-0.1 (Names are not necessarily unique within an Interface Repository; they are always relative) 108 622.99 P
(to an explicit or implicit module. In this context, interface de\336nitions are considered) 108 608.99 T
(explicit modules.) 108 594.99 T
(Repository identi\336ers uniquely identify modules, interfaces, constants, typedefs, excep-) 108 568.99 T
(tions, attributes, operations and parameters within a particular Interface Repository) 108 554.99 T
(.) 505.26 554.99 T
1 F
(7.4.2) 75.93 522.99 T
0 F
(T) 108 522.99 T
(ypes and T) 114.67 522.99 T
(ypeCodes) 173.34 522.99 T
2 F
( The Interface Repository stores information about types that are not interfaces in a data) 108 504.99 T
(value called a T) 108 490.99 T
(ypeCode. From the T) 183.43 490.99 T
(ypeCode alone it is possible to determine the com-) 285.19 490.99 T
(plete structure of a type. See \2447.6 on page 138 for more information on the internal struc-) 108 476.99 T
(ture of T) 108 462.99 T
(ypeCodes.) 149.12 462.99 T
1 F
(7.4.3) 75.93 430.99 T
0 F
(Interface Objects) 108 430.99 T
2 F
(Each interface managed in an Interface Repository is maintained as a collection of inter-) 108 412.99 T
(face objects:) 108 398.99 T
1 10 Q
(1.) 108 378.99 T
2 12 Q
(Repository: the top-level module for the repository name space; it contains constants,) 126 378.99 T
(typedefs, exceptions, interface de\336nitions, and modules.) 126 364.99 T
1 10 Q
(2.) 108 347.99 T
2 12 Q
(ModuleDef: a logical grouping of interfaces; it contains constants, typedefs, excep-) 126 347.99 T
(tions, interface de\336nitions, and other modules.) 126 333.99 T
1 10 Q
(3.) 108 316.99 T
2 12 Q
(InterfaceDef: an interface de\336nition; it contains lists of constants, types, exceptions,) 126 316.99 T
(operations, and attributes.) 126 302.99 T
1 10 Q
(4.) 108 285.99 T
2 12 Q
(AttributeDef: the de\336nition of an attribute of the interface.) 126 285.99 T
1 10 Q
(5.) 108 268.99 T
2 12 Q
-0.26 (OperationDef: the de\336nition of an operation on the interface; it contains lists of param-) 126 268.99 P
(eters and exceptions raised by this operation.) 126 254.99 T
1 10 Q
(6.) 108 237.99 T
2 12 Q
(ParameterDef: the de\336nition of an ar) 126 237.99 T
(gument to an operation.) 301.98 237.99 T
1 10 Q
(7.) 108 220.99 T
2 12 Q
(T) 126 220.99 T
(ypeDef: the de\336nition of named type that is not an interface.) 132.49 220.99 T
1 10 Q
(8.) 108 203.99 T
2 12 Q
(ConstantDef: the de\336nition of a named constant.) 126 203.99 T
1 10 Q
(9.) 108 186.99 T
2 12 Q
(ExceptionDef: the de\336nition of an exception that can be raised by an operation.) 126 186.99 T
-0.15 (The interface speci\336cations for each interface object lists the attributes maintained by that) 108 160.99 P
-0 (object \050see \2447.5 on page 129\051. These attributes correspond directly to IDL statements. An) 108 146.99 P
(implementation can choose to maintain additional attributes to facilitate managing the) 108 132.99 T
(Repository or to record additional \050proprietary\051 information about an interface. Note that) 108 118.99 T
34 114.99 36 686.02 R
V
FMENDPAGE
%%EndPage: "126" 125
%%Page: "125" 125
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(Implementation Dependencies) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(125) 541.33 60.29 T
72 87.98 558 686.02 R
7 X
V
2 12 Q
0 X
(because an object implementation \050such as an OODB\051 prefers to provide its own type) 126 678.02 T
(information, or because it is desired to have dif) 126 664.02 T
(ferent additional information stored in dif-) 351.96 664.02 T
-0.23 (ferent repositories. The use of typecodes and repository identi\336ers is intended to allow dif-) 126 650.02 P
(ferent repositories to keep their information consistent.) 126 636.02 T
(This CORBA Interface Repository speci\336cation de\336nes operations only for retrieving) 126 610.02 T
(information from the repository) 126 596.02 T
(. There may be any number of ways to insert information) 277.45 596.02 T
(into the repository \050for example, compiling IDL de\336nitions, constructing repository) 126 582.02 T
(objects through the dynamic invocation interface, copying objects from one repository to) 126 568.02 T
(another) 126 554.02 T
(, etc.\051. Because some of these scenarios involve development environments, sys-) 161.49 554.02 T
(tem administration, and other issues beyond the scope of the ORB, this part of the inter-) 126 540.02 T
(face repository is left unde\336ned.) 126 526.02 T
72 479.99 558 483.02 C
126 481.5 558 481.5 2 L
0.25 H
2 Z
0 X
0 K
N
72 481.5 117 481.5 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(7.3) 101.15 487.68 T
0 F
(Implementation Dependencies) 126 487.68 T
2 12 Q
(An implementation of an Interface Repository requires some form of persistent object) 126 457.99 T
(store. Normally the kind of persistent object store used determines how interface de\336ni-) 126 443.99 T
(tions are distributed and/or replicated throughout a network domain. For example, if an) 126 429.99 T
(Interface Repository is implemented using a \336ling system to provide object storage, there) 126 415.99 T
(may be only a single copy of a set of interfaces maintained on a single machine. Alterna-) 126 401.99 T
(tively) 126 387.99 T
(, if an OODB is used to provide object storage, multiple copies of interface de\336ni-) 152.54 387.99 T
(tions may be maintained each of which is distributed across several machines to provide) 126 373.99 T
(both high-availability and load-balancing.) 126 359.99 T
-0.36 (The kind of object store used may determine the scope of interface de\336nitions provided by) 126 333.99 P
(an implementation of the Interface Repository) 126 319.99 T
(. For example, it may determine whether) 346.73 319.99 T
(each user has a local copy of a set of interfaces or if there is one copy per community of) 126 305.99 T
-0.29 (users. The object store may also determine whether or not all clients of an interface set see) 126 291.99 P
-0.16 (exactly the same set at any given point in time or whether latency in distributing copies of) 126 277.99 P
(the set gives dif) 126 263.99 T
(ferent users dif) 201.4 263.99 T
(ferent views of the set at any point in time.) 273.12 263.99 T
(An implementation of the Interface Repository is also dependent on the security mecha-) 126 237.99 T
(nism in use. The security mechanism \050usually operating in conjunction with the object) 126 223.99 T
(store\051 determines the nature and granularity of access controls available to constrain) 126 209.99 T
(access to objects in the repository) 126 195.99 T
(.) 286.77 195.99 T
52 191.99 54 686.02 R
V
FMENDPAGE
%%EndPage: "125" 124
%%Page: "124" 124
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(The Interface Repository) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(124) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
2 12 Q
0 X
-0.16 (In particular) 108 678.02 P
-0.16 (, the ORB can use object de\336nitions maintained in the Interface Repository to) 166.31 678.02 P
(interpret/handle the values provided in a request:) 108 664.02 T
(\245) 108 644.02 T
(T) 126 644.02 T
(o provide type-checking of request signatures \050whether the request was issued) 132.49 644.02 T
(through the API or through a stub\051.) 126 630.02 T
(\245) 108 613.02 T
(T) 126 613.02 T
(o assist in checking the correctness of interface inheritance graphs.) 132.49 613.02 T
(\245) 108 596.02 T
(T) 126 596.02 T
(o assist in providing interoperability between dif) 132.49 596.02 T
(ferent ORB implementations.) 365.46 596.02 T
(As the interface to the object de\336nitions maintained in an Interface Repository is public,) 108 570.02 T
-0.16 (the information maintained in the Repository can also be used by clients and services. For) 108 556.02 P
(example, the Repository can be used:) 108 542.02 T
(\245) 108 522.02 T
(T) 126 522.02 T
(o manage the installation and distribution of interface de\336nitions.) 132.49 522.02 T
(\245) 108 505.02 T
(T) 126 505.02 T
(o provide components of a CASE environment \050e.g., an interface browser\051.) 132.49 505.02 T
(\245) 108 488.02 T
(T) 126 488.02 T
(o provide interface information to language-bindings \050e.g., a compiler\051.) 132.49 488.02 T
(\245) 108 471.02 T
(T) 126 471.02 T
(o provide components of enduser environments \050e.g., a menu bar constructor\051.) 132.49 471.02 T
54 424.99 540 428.02 C
108 426.5 540 426.5 2 L
0.25 H
2 Z
0 X
0 K
N
54 426.5 99 426.5 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(7.2) 83.15 432.68 T
0 F
(Scope of an Interface Repository) 108 432.68 T
2 12 Q
(Interface de\336nitions are maintained in the Interface Repository as a set of objects that are) 108 406.99 T
-0.15 (accessible through a set of IDL-speci\336ed interface de\336nitions. An interface de\336nition con-) 108 392.99 P
(tains a description of the operations it supports, including the types of the parameters,) 108 378.99 T
(exceptions it may raise, and context information it may use.) 108 364.99 T
(In addition, the interface repository stores constant values, which might be used in other) 108 338.99 T
(interface de\336nitions or might simply be de\336ned for programmer convenience. And it) 108 324.99 T
(stores typecodes, which are values that describe a type in structural terms.) 108 310.99 T
(The Interface Repository uses modules as a way to group interfaces and to navigate) 108 284.99 T
-0.25 (through those groups by name. Modules can contain constants, typedefs, exceptions, inter-) 108 270.99 P
(face de\336nitions, and other modules. The standard does not specify what constitutes the) 108 256.99 T
(group of interfaces that comprises a particular module. Modules may) 108 242.99 T
(, for example, corre-) 438.31 242.99 T
-0.16 (spond to the or) 108 228.99 P
-0.16 (ganization of IDL de\336nitions. They may also be used to represent or) 178.93 228.99 P
-0.16 (ganiza-) 504.7 228.99 P
(tions de\336ned for administration or other purposes.) 108 214.99 T
(The Interface Repository is a set of objects that represent the information in it. There are) 108 188.99 T
(operations that operate on this apparent object structure. It is an implementation\325) 108 174.99 T
(s choice) 494.4 174.99 T
(whether these objects exist persistently or are created when referenced in an operation on) 108 160.99 T
(the repository) 108 146.99 T
(. There are also operations that extract information in an ef) 173.51 146.99 T
(\336cient form,) 455.4 146.99 T
(obtaining a block of information that describes a whole interface or a whole operation.) 108 132.99 T
-0.19 (An ORB may have access to multiple Interface Repositories. This may occur because two) 108 106.99 P
(ORBs have dif) 108 92.99 T
(ferent requirements for the implementation of the Interface Repository) 179.07 92.99 T
(,) 516.7 92.99 T
34 88.99 36 686.02 R
V
FMENDPAGE
%%EndPage: "124" 123
%%Page: "123" 123
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 378 558 378 2 L
7 X
V
2 Z
0 X
N
72 74.02 558 74.02 2 L
7 X
V
0.25 H
0 X
N
72 55.01 558 66.96 R
7 X
V
0 9 Q
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
-2.78 (123) 541.33 60.29 P
72 396 558 693 R
7 X
V
0 24 Q
0 X
-0.48 (7) 72 677 S
-0.48 (The Interface Repository) 126 677 S
52 669 54 693 R
V
72 87.98 558 360 R
7 X
V
2 12 Q
0 X
(The Interface Repository is the component of the ORB that provides persistent storage of) 126 352 T
(interface de\336nitions\321it manages and provides access to a collection of object de\336nitions) 126 338 T
(speci\336ed in IDL.) 126 324 T
72 277.98 558 281 C
126 279.49 558 279.49 2 L
0.25 H
2 Z
0 X
0 K
N
72 279.49 117 279.49 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(7.1) 101.15 285.67 T
0 F
(Overview) 126 285.67 T
2 12 Q
(An ORB provides distributed access to a collection of objects using the objects\325 publicly) 126 255.98 T
-0.03 (de\336ned interfaces speci\336ed in IDL. The Interface Repository provides for the storage, dis-) 126 241.98 P
(tribution, and management of a collection of related objects\325 interface de\336nitions.) 126 227.98 T
-0.17 (For an ORB to function correctly \050for it to correctly process requests\051, it must have access) 126 201.98 P
(to the de\336nitions of the objects it is handling. Object de\336nitions can be made available to) 126 187.98 T
(an ORB in one of two forms:) 126 173.98 T
1 10 Q
(1.) 126 153.98 T
2 12 Q
(By incorporating the information procedurally into stub routines \050e.g., as code that) 144 153.98 T
(maps C language subroutines into communication protocols\051.) 144 139.98 T
1 10 Q
(2.) 126 122.98 T
2 12 Q
(As objects accessed through the dynamically accessible Interface Repository \050i.e., as) 144 122.98 T
(\322interface objects\323 accessed through IDL-speci\336ed interfaces\051.) 144 108.98 T
52 104.98 54 360 R
V
FMENDPAGE
%%EndPage: "123" 122
%%Page: "122" 122
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(Dynamic Invocation Interface) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(122) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
FMENDPAGE
%%EndPage: "122" 121
%%Page: "121" 121
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(Native Data Manipulation) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(121) 541.33 60.29 T
72 87.98 558 686.02 R
7 X
V
2 12 Q
0 X
(CTX_DELETE_DESCENDENTS) 126 678.02 T
(Deletes the indicated context object and all of its descendent) 252 664.02 T
(context objects, as well.) 252 650.02 T
(An exception is returned if there are one or more child context objects and the) 126 624.02 T
(CTX_DELETE_DESCENDENTS \337ag was not set.) 126 610.02 T
72 563.99 558 567.02 C
126 565.5 558 565.5 2 L
0.25 H
2 Z
0 X
0 K
N
72 565.5 117 565.5 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(6.7) 101.15 571.68 T
0 F
(Native Data Manipulation) 126 571.68 T
2 12 Q
(A future version of this speci\336cation will de\336ne routines to facilitate the conversion of) 126 541.99 T
(data between the list layout found in) 126 527.99 T
6 F
(NVList) 303.55 527.99 T
2 F
( structures and the compiler native layout.) 340.86 527.99 T
52 620.02 54 672.02 R
V
52 523.99 54 581.02 R
V
FMENDPAGE
%%EndPage: "121" 120
%%Page: "120" 120
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(Dynamic Invocation Interface) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(120) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
6 12 Q
0 X
(CTX_RESTRICT_SCOPE) 108 678.02 T
2 F
(Searching is limited to the speci\336ed search scope or context) 234 664.02 T
(object.) 234 650.02 T
1 F
(6.6.5) 75.93 618.02 T
0 F
(delete_values) 108 618.02 T
6 10 Q
(ORBStatus delete_values \050) 108 593.35 T
(// PIDL) 486 593.35 T
( in Identi\336er) 126 581.35 T
(pr) 216 581.35 T
(op_name) 225.82 581.35 T
(// name of pr) 306 581.35 T
(operty\050s\051 to delete) 360.51 581.35 T
(\051;) 108 569.35 T
2 12 Q
(This operation deletes the speci\336ed property value\050s\051 values from the context object. If) 108 544.02 T
6 F
(pr) 108 530.02 T
(op_name) 119.78 530.02 T
2 F
( has a trailing wildcard character \050\322*\323\051, then all property names that match) 166.42 530.02 T
(will be deleted.) 108 516.02 T
(Search scope is always limited to the speci\336ed context object.) 108 490.02 T
(If no matching property is found, an exception is returned.) 108 464.02 T
1 F
(6.6.6) 75.93 432.02 T
0 F
(create_child) 108 432.02 T
6 10 Q
(ORBStatus cr) 108 407.35 T
(eate_child \050) 167.51 407.35 T
(// PIDL) 486 407.35 T
( in Identi\336er) 126 395.35 T
(ctx_name,) 216 395.35 T
(// name of context object) 288 395.35 T
( out Context) 126 383.35 T
(child_ctx) 216 383.35 T
(// newly cr) 288 383.35 T
(eated context object) 332.24 383.35 T
(\051;) 108 371.35 T
2 12 Q
(This operation creates a child context object.) 108 346.02 T
-0.44 (The returned context object is chained into its parent context. That is, searches on the child) 108 320.02 P
-0.17 (context object will look in the parent context \050and so on, up the context tree\051, if necessary) 108 306.02 P
-0.17 (,) 534.17 306.02 P
(for matching property names.) 108 292.02 T
(Context object names follow the rules for IDL identi\336ers \050see \2444.1.3 on page 50\051.) 108 266.02 T
1 F
(6.6.7) 75.93 234.02 T
0 F
(delete) 108 234.02 T
6 10 Q
(ORBStatus delete \050) 108 209.35 T
(// PIDL) 486 209.35 T
( in Flags) 126 197.35 T
(del_\337ags) 216 197.35 T
(// \337ags contr) 324 197.35 T
(olling deletion) 376.57 197.35 T
(\051;) 108 185.35 T
2 12 Q
(This operation deletes the indicated context object.) 108 160.02 T
(The following option \337ags may be speci\336ed:) 108 134.02 T
34 526.02 36 686.02 R
V
34 380.02 36 472.02 R
V
34 342.02 36 354.02 R
V
34 156.02 36 274.02 R
V
FMENDPAGE
%%EndPage: "120" 119
%%Page: "119" 119
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(Context Object Routines) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(119) 541.33 60.29 T
72 87.98 558 686.02 R
7 X
V
2 12 Q
0 X
(This operation sets a single context object property) 126 678.02 T
(.) 370.05 678.02 T
(At this time, only string values are supported by the context object.) 126 652.02 T
1 F
(6.6.3) 93.93 620.02 T
0 F
(set_values) 126 620.02 T
6 10 Q
(ORBStatus set_values \050) 126 595.35 T
(// PIDL) 522 595.35 T
( in NVList) 144 583.35 T
( values) 234 583.35 T
(// pr) 324 583.35 T
(operty values to be changed) 341.87 583.35 T
(\051;) 126 571.35 T
2 12 Q
(This operation sets one or more property values in the context object. In the NVList, the) 126 546.02 T
(\337ags \336eld must be set to zero, and the T) 126 532.02 T
(ypeCode \336eld associated with an attribute value) 316.37 532.02 T
(must be TC_string.) 126 518.02 T
(At this time, only string values are supported by the context object.) 126 492.02 T
1 F
(6.6.4) 93.93 460.02 T
0 F
(get_values) 126 460.02 T
6 10 Q
(ORBStatus get_values \050) 126 435.35 T
(// PIDL) 522 435.35 T
( in Identi\336er) 144 423.35 T
(start_scope,) 234 423.35 T
(// sear) 324 423.35 T
(ch scope) 349.64 423.35 T
( in Flags) 144 411.35 T
(op_\337ags,) 234 411.35 T
(// operation \337ags) 324 411.35 T
( in Identi\336er) 144 399.35 T
(pr) 234 399.35 T
(op_name,) 243.82 399.35 T
(// name of pr) 324 399.35 T
(operty\050s\051 to r) 378.51 399.35 T
(etrieve) 434.39 399.35 T
( out NVList) 144 387.35 T
(values) 234 387.35 T
(// r) 324 387.35 T
(equested pr) 336.31 387.35 T
(operty\050s\051) 385.83 387.35 T
(\051;) 126 375.35 T
2 12 Q
(This operation retrieves the speci\336ed context property value\050s\051. If) 126 350.02 T
6 F
(pr) 443.75 350.02 T
(op_name) 455.53 350.02 T
2 F
( has a trail-) 502.17 350.02 T
(ing wildcard character \050\322*\323\051, then all matching properties and their values are returned.) 126 336.02 T
(The values returned may be freed by a call to the list) 126 322.02 T
6 F
(fr) 381.14 322.02 T
(ee) 390.24 322.02 T
2 F
( operation.) 400.89 322.02 T
(If no properties are found an error is returned, and no property list is returned.) 126 296.02 T
(Scope indicates the context object level at which to initiate the search for the speci\336ed) 126 270.02 T
(properties \050e.g. \322_USER\323, \322_SYSTEM\323\051. If the property is not found at the indicated) 126 256.02 T
(level, the search continues up the context object tree until a match is found or all context) 126 242.02 T
(objects in the chain have been exhausted.) 126 228.02 T
(V) 126 202.02 T
(alid scope names are implementation speci\336c.) 133.33 202.02 T
(If scope name is omitted, the search begins with the speci\336ed context object. If the speci-) 126 176.02 T
(\336ed scope name is not found, an exception is returned.) 126 162.02 T
(The following operation \337ags may be speci\336ed:) 126 136.02 T
52 674.02 54 686.02 R
V
52 514.02 54 628.02 R
V
52 346.02 54 468.02 R
V
52 318.02 54 330.02 R
V
52 158.02 54 170.02 R
V
FMENDPAGE
%%EndPage: "119" 118
%%Page: "118" 118
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(Dynamic Invocation Interface) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(118) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
2 12 Q
0 X
(The Context interface is shown below) 108 678.02 T
(.) 289.42 678.02 T
6 10 Q
(interface Context {) 108 653.35 T
(// PIDL) 504 653.35 T
(ORBStatus set_one_value \050) 126 641.35 T
( in Identi\336er) 144 629.35 T
(pr) 234 629.35 T
(op_name,) 243.82 629.35 T
(// pr) 324 629.35 T
(operty name to add) 341.87 629.35 T
( in string) 144 617.35 T
(value) 234 617.35 T
(// pr) 324 617.35 T
(operty value to add) 341.87 617.35 T
(\051;) 126 605.35 T
(ORBStatus set_values \050) 126 593.35 T
( in NVList) 144 581.35 T
( values) 234 581.35 T
(// pr) 324 581.35 T
(operty values to be changed) 341.87 581.35 T
(\051;) 126 569.35 T
(ORBStatus get_values \050) 126 557.35 T
( in Identi\336er) 144 545.35 T
(start_scope,) 234 545.35 T
(// sear) 324 545.35 T
(ch scope) 349.64 545.35 T
( in Flags) 144 533.35 T
(op_\337ags,) 234 533.35 T
(// operation \337ags) 324 533.35 T
( in Identi\336er) 144 521.35 T
(pr) 234 521.35 T
(op_name,) 243.82 521.35 T
(// name of pr) 324 521.35 T
(operty\050s\051 to r) 378.51 521.35 T
(etrieve) 434.39 521.35 T
( out NVList) 144 509.35 T
(values) 234 509.35 T
(// r) 324 509.35 T
(equested pr) 336.31 509.35 T
(operty\050s\051) 385.83 509.35 T
(\051;) 126 497.35 T
(ORBStatus delete_values \050) 126 485.35 T
( in Identi\336er) 144 473.35 T
(pr) 234 473.35 T
(op_name) 243.82 473.35 T
(// name of pr) 324 473.35 T
(operty\050s\051 to delete) 378.51 473.35 T
(\051;) 126 461.35 T
(ORBStatus cr) 126 449.35 T
(eate_child \050) 185.51 449.35 T
( in Identi\336er) 144 437.35 T
(ctx_name,) 234 437.35 T
(// name of context object) 324 437.35 T
( out Context) 144 425.35 T
(child_ctx) 234 425.35 T
(// newly cr) 324 425.35 T
(eated context object) 368.24 425.35 T
(\051;) 126 413.35 T
(ORBStatus delete \050) 126 401.35 T
( in Flags) 144 389.35 T
(del_\337ags) 234 389.35 T
(// \337ags contr) 324 389.35 T
(olling deletion) 376.57 389.35 T
(\051;) 126 377.35 T
(};) 108 365.35 T
1 12 Q
(6.6.1) 75.93 334.02 T
0 F
(get_default_context) 108 334.02 T
2 F
(This operation, which creates a Context pseudo-object, is de\336ned in the ORB interface) 108 316.02 T
(\050see \2448.1 on page 143 for the complete ORB de\336nition\051.) 108 302.02 T
6 10 Q
(ORBStatus get_default_context \050) 108 277.35 T
(// PIDL) 504 277.35 T
(out Context) 126 265.35 T
(ctx) 234 265.35 T
(// context object) 324 265.35 T
(\051;) 108 253.35 T
2 12 Q
(This operation returns a reference to the default process context object. The default con-) 108 228.02 T
(text object may be chained into other context objects. For example, an ORB implementa-) 108 214.02 T
-0.11 (tion may chain the default context object into its User) 108 200.02 P
-0.11 (, Group, and System context objects.) 364.01 200.02 P
1 F
(6.6.2) 75.93 168.02 T
0 F
(set_one_value) 108 168.02 T
6 10 Q
(ORBStatus set_one_value \050) 108 143.35 T
(// PIDL) 504 143.35 T
( in Identi\336er) 126 131.35 T
(pr) 234 131.35 T
(op_name,) 243.82 131.35 T
(// pr) 324 131.35 T
(operty name to add) 341.87 131.35 T
( in string) 126 119.35 T
(value) 234 119.35 T
(// pr) 324 119.35 T
(operty value to add) 341.87 119.35 T
(\051;) 108 107.35 T
34 602.02 36 686.02 R
V
34 578.02 36 588.02 R
V
34 506.02 36 552.02 R
V
34 470.02 36 492.02 R
V
34 422.02 36 444.02 R
V
34 262.02 36 408.02 R
V
34 224.02 36 236.02 R
V
34 104.02 36 176.02 R
V
FMENDPAGE
%%EndPage: "118" 117
%%Page: "117" 117
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(Context Object Routines) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(117) 541.33 60.29 T
72 87.98 558 686.02 R
7 X
V
2 12 Q
0 X
(A property name pattern without a trailing \322*\323 is said to match only itself. A property) 126 678.02 T
-0.05 (name pattern of the form \322<name>*\323 matches any property name that starts with <name>) 126 664.02 P
(and continues with zero or more additional characters.) 126 650.02 T
(Context objects may be created and deleted, and individual context properties may be set) 126 624.02 T
(and retrieved. There will often be context objects associated with particular processes,) 126 610.02 T
(users, or other things depending on the operating system, and there may be conventions) 126 596.02 T
(for having them supplied to calls by default.) 126 582.02 T
(It may be possible to keep context information in persistent implementations of context) 126 556.02 T
(objects, while other implementations may be transient. The creation and modi\336cation of) 126 542.02 T
(persistent context objects, however) 126 528.02 T
(, is not addressed in this speci\336cation.) 294.06 528.02 T
(Context objects may be \322chained\323 together to achieve a particular defaulting behavior) 126 502.02 T
(.) 537.35 502.02 T
-0.34 (Properties de\336ned in a particular context object ef) 126 476.02 P
-0.34 (fectively override those properties in the) 362.87 476.02 P
-0.13 (next higher level. This searching behavior may be restricted by specifying the appropriate) 126 462.02 P
(scope and the \322restrict scope\323 option on the Context) 126 448.02 T
6 F
(get_values) 378.82 448.02 T
2 F
( call.) 432.12 448.02 T
(Context objects may be named for purposes of specifying a starting search scope.) 126 422.02 T
72 375.99 558 379.02 C
126 377.5 558 377.5 2 L
0.25 H
2 Z
0 X
0 K
N
72 377.5 117 377.5 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(6.6) 101.15 383.68 T
0 F
(Context Object Routines) 126 383.68 T
2 12 Q
(When performing operations on a context object, properties are represented as named) 126 353.99 T
(value lists. Each property value corresponds to a named value item in the list.) 126 339.99 T
(A property name is represented by a string of characters \050see \2444.1.3 on page 50 for the) 126 313.99 T
(valid set of characters that are allowed\051. Property names are stored preserving their case,) 126 299.99 T
(however names cannot dif) 126 285.99 T
(fer simply by their case.) 252.01 285.99 T
52 498.02 54 686.02 R
V
52 444.02 54 456.02 R
V
52 309.99 54 393.02 R
V
52 281.99 54 293.99 R
V
FMENDPAGE
%%EndPage: "117" 116
%%Page: "116" 116
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(Dynamic Invocation Interface) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(116) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
2 12 Q
0 X
(This operation returns an) 108 678.02 T
5 F
(NVList) 231.24 678.02 T
2 F
( initialized with the ar) 274.42 678.02 T
(gument descriptions for a given) 379.47 678.02 T
(operation. The information is returned in a form that may be used in dynamic invocation) 108 664.02 T
-0.05 (requests. The ar) 108 650.02 P
-0.05 (guments are returned in the same order as they were de\336ned for the opera-) 183.95 650.02 P
(tion.) 108 636.02 T
(The list) 108 610.02 T
6 F
(fr) 147.31 610.02 T
(ee) 156.42 610.02 T
2 F
( operation is used to free the returned information.) 167.07 610.02 T
54 563.99 540 567.02 C
108 565.5 540 565.5 2 L
0.25 H
2 Z
0 X
0 K
N
54 565.5 99 565.5 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(6.5) 83.15 571.68 T
0 F
(Context Objects) 108 571.68 T
2 12 Q
-0.06 (A context object contains a list of properties, each consisting of a name and a string value) 108 545.99 P
(associated with that name. By convention, context properties represent information about) 108 531.99 T
(the client, environment, or circumstances of a request that are inconvenient to pass as) 108 517.99 T
(parameters.) 108 503.99 T
-0.31 (Context properties can represent a portion of a client\325) 108 477.99 P
-0.31 (s or application\325) 361.31 477.99 P
-0.31 (s environment that is) 437.97 477.99 P
-0.37 (meant be propagated to \050and made implicitly part of\051 a server) 108 463.99 P
-0.37 (\325) 399.23 463.99 P
-0.37 (s environment \050for example,) 402.57 463.99 P
-0.2 (a window identi\336er) 108 449.99 P
-0.2 (, or user preference information\051. Once a server has been invoked \050i.e.,) 200.39 449.99 P
-0.29 (subsequent to the properties being propagated\051, the server may query its context object for) 108 435.99 P
(these properties.) 108 421.99 T
(In addition, the context associated with a particular operation is passed as a distinguished) 108 395.99 T
-0.29 (parameter) 108 381.99 P
-0.29 (, allowing particular ORBs to take advantage of context properties, for example,) 155.47 381.99 P
(using the values of certain properties to in\337uence method binding behavior) 108 367.99 T
(, server loca-) 467.27 367.99 T
(tion, or activation policy) 108 353.99 T
(.) 225.15 353.99 T
-0.1 (An operation de\336nition may contain a clause specifying those context properties that may) 108 327.99 P
-0.43 (be of interest to a particular operation. These context properties comprise the minimum set) 108 313.99 P
(of properties that will be propagated to the server) 108 299.99 T
(\325) 344.93 299.99 T
(s environment \050although a speci\336ed) 348.26 299.99 T
(property may have no value associated with it\051. The ORB may choose to pass more prop-) 108 285.99 T
(erties than those speci\336ed in the operation declaration.) 108 271.99 T
(When a context clause is present on an operation declaration, an additional ar) 108 245.99 T
(gument is) 479.16 245.99 T
(added to the stub and skeleton interfaces. When an operation invocation occurs via either) 108 231.99 T
(the stub or dynamic invocation interface, the ORB causes the properties which were) 108 217.99 T
(named in the operation de\336nition in IDL and which are present in the client\325) 108 203.99 T
(s context) 473.42 203.99 T
(object, to be provided in the context object parameter to the invoked method.) 108 189.99 T
-0.39 (Context property names \050which are strings\051 typically have the form of an IDL identi\336er) 108 163.99 P
-0.39 (, or) 521.8 163.99 P
-0.42 (a series of IDL identi\336ers separated by periods. A context property name pattern is either a) 108 149.99 P
(property name, or a property name followed by a single \322*\323. Property name patterns are) 108 135.99 T
(used in the) 108 121.99 T
3 F
(context) 162.97 121.99 T
2 F
( clause of an operation de\336nition, and in the) 197.94 121.99 T
6 F
(get_values) 411.79 121.99 T
2 F
( operation) 465.09 121.99 T
(\050described below\051.) 108 107.99 T
34 567.02 36 686.02 R
V
34 445.99 36 471.99 R
V
34 323.99 36 361.99 R
V
34 267.99 36 293.99 R
V
34 103.99 36 197.99 R
V
FMENDPAGE
%%EndPage: "116" 115
%%Page: "115" 115
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(List Routines) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(115) 541.33 60.29 T
72 87.98 558 686.02 R
7 X
V
2 12 Q
0 X
-0.22 (This operation adds a new item to the indicated list. The item is added after the previously) 126 678.02 P
(added item.) 126 664.02 T
(In addition to the ar) 126 638.02 T
(gument modes de\336ned in \2446.1.1 on page 106,) 220.39 638.02 T
6 F
(item_\337ags) 441.92 638.02 T
2 F
( may also) 493.89 638.02 T
(take the following \337ag values: IN_COPY_V) 126 624.02 T
(ALUE, DEPENDENT_LIST) 337.98 624.02 T
(. The ar) 477 624.02 T
(gument) 513.75 624.02 T
(passing \337ags de\336ned in \2446.1.1 on page 106 may be used here to indicate the intended) 126 610.02 T
(parameter passing mode of an ar) 126 596.02 T
(gument.) 281.99 596.02 T
(If the IN_COPY_V) 126 570.02 T
(ALUE \337ag is set, a copy of the ar) 218.38 570.02 T
(gument value is made and used) 379.05 570.02 T
(instead.) 126 556.02 T
-0.43 (If a list structure is added as an item \050e.g. a \322sublist\323\051 the) 126 530.02 P
-0.43 (DEPENDENT_LIST \337ag may be) 395.84 530.02 P
(speci\336ed to indicate that the sublist should be freed when the parent list is freed.) 126 516.02 T
1 F
(6.4.3) 93.93 484.02 T
0 F
(free) 126 484.02 T
6 10 Q
(ORBStatus fr) 126 467.35 T
(ee \050 \051;) 184.4 467.35 T
(// PIDL) 522 467.35 T
2 12 Q
(This operation frees the list structure and any associated memory \050an implicit call to the) 126 442.02 T
(list) 126 428.02 T
6 F
(fr) 143.67 428.02 T
(ee_memory) 152.77 428.02 T
2 F
( operation is done\051.) 212.04 428.02 T
1 F
(6.4.4) 93.93 396.02 T
0 F
(free_memory) 126 396.02 T
6 10 Q
(ORBStatus fr) 126 379.35 T
(ee_memory \050 \051;) 184.4 379.35 T
(// PIDL) 522 379.35 T
2 12 Q
(This operation frees any dynamically allocated out-ar) 126 354.02 T
(g memory associated with the list.) 382.25 354.02 T
(The list structure itself is not freed.) 126 340.02 T
1 F
(6.4.5) 93.93 308.02 T
0 F
(get_count) 126 308.02 T
6 10 Q
(ORBStatus get_count \050) 126 283.35 T
(// PIDL) 522 283.35 T
(out long) 144 271.35 T
( count) 252 271.35 T
(// number of entries in the list) 324 271.35 T
(\051;) 126 259.35 T
2 12 Q
(This operation returns the total number of items allocated for this list.) 126 234.02 T
1 F
(6.4.6) 93.93 202.02 T
0 F
(create_operation_list) 126 202.02 T
2 F
(This operation, which creates a pseudo-object, is de\336ned in the ORB interface.) 126 184.02 T
6 10 Q
(ORBStatus cr) 126 159.35 T
(eate_operation_list \050) 185.51 159.35 T
(// PIDL) 522 159.35 T
(in OperationDef) 144 147.35 T
(oper) 252 147.35 T
(,) 270.51 147.35 T
(// operation) 342 147.35 T
(out NVList) 144 135.35 T
(new_list) 252 135.35 T
(// argument de\336nitions) 342 135.35 T
(\051;) 126 123.35 T
52 674.02 54 686.02 R
V
52 634.02 54 646.02 R
V
52 606.02 54 618.02 R
V
52 526.02 54 564.02 R
V
52 350.02 54 492.02 R
V
52 120.02 54 316.02 R
V
FMENDPAGE
%%EndPage: "115" 114
%%Page: "114" 114
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(Dynamic Invocation Interface) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(114) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
2 12 Q
0 X
(The list operations that create) 108 678.02 T
6 F
(NVList) 252.89 678.02 T
2 F
( objects are de\336ned in the ORB interface described) 290.2 678.02 T
(in Chapter 8, but are described in this section. The) 108 664.02 T
6 F
(NVList) 352.5 664.02 T
2 F
( interface is shown below) 389.81 664.02 T
(.) 511.6 664.02 T
6 10 Q
(interface NVList {) 108 639.35 T
(// PIDL) 486 639.35 T
(ORBStatus add_item \050) 126 627.35 T
( in Identi\336er) 144 615.35 T
(item_name,) 216 615.35 T
(// name of item) 324 615.35 T
( in T) 144 603.35 T
(ypeCode) 163.26 603.35 T
(item_type,) 216 603.35 T
(// item datatype) 324 603.35 T
( in void) 144 591.35 T
(*value,) 216 591.35 T
(// item value) 324 591.35 T
( in long) 144 579.35 T
(value_len,) 216 579.35 T
(// length of item value) 324 579.35 T
( in Flags) 144 567.35 T
(item_\337ags) 216 567.35 T
(// item \337ags) 324 567.35 T
(\051;) 126 555.35 T
(ORBStatus fr) 126 543.35 T
(ee \050 \051;) 184.4 543.35 T
(ORBStatus fr) 126 531.35 T
(ee_memory \050 \051;) 184.4 531.35 T
(ORBStatus get_count \050) 126 519.35 T
(out long) 144 507.35 T
( count) 216 507.35 T
(// number of entries in the list) 324 507.35 T
(\051;) 126 495.35 T
(};) 108 471.35 T
1 12 Q
(6.4.1) 75.93 440.02 T
0 F
(create_list) 108 440.02 T
2 F
(This operation, which creates a pseudo-object, is de\336ned in the ORB interface and) 108 414.02 T
(excerpted below) 108 400.02 T
(.) 186.15 400.02 T
6 10 Q
(ORBStatus cr) 108 375.35 T
(eate_list \050) 167.51 375.35 T
(//PIDL) 486 375.35 T
(in long) 126 363.35 T
(count,) 216 363.35 T
(// number of items to allocate for list) 288 363.35 T
(out NVList) 126 351.35 T
(new_list) 216 351.35 T
(// newly cr) 288 351.35 T
(eated list) 332.24 351.35 T
(\051;) 108 339.35 T
2 12 Q
(This operation allocates a list of the speci\336ed size, and clears it for initial use. List items) 108 314.02 T
(may be added to the list using the) 108 300.02 T
6 F
(add_item) 271.9 300.02 T
2 F
( routine. Alternatively) 319.88 300.02 T
(, they may be added by) 425.36 300.02 T
(indexing directly into the list structure. A mixture of the two approaches for initializing a) 108 286.02 T
(list, however) 108 272.02 T
(, is not supported.) 169.48 272.02 T
(An) 108 246.02 T
6 F
(NVList) 125.65 246.02 T
2 F
( is a partially opaque structure. It may only be allocated via a call to) 162.97 246.02 T
6 F
(cr) 108 232.02 T
(eate_list) 118.43 232.02 T
2 F
(.) 160.4 232.02 T
1 F
(6.4.2) 75.93 200.02 T
0 F
(add_item) 108 200.02 T
6 10 Q
(ORBStatus add_item \050) 108 175.35 T
(// PIDL) 486 175.35 T
( in Identi\336er) 126 163.35 T
(item_name,) 216 163.35 T
(// name of item) 324 163.35 T
( in T) 126 151.35 T
(ypeCode) 145.26 151.35 T
(item_type,) 216 151.35 T
(// item datatype) 324 151.35 T
( in void) 126 139.35 T
(*value,) 216 139.35 T
(// item value) 324 139.35 T
( in long) 126 127.35 T
(value_len,) 216 127.35 T
(// length of item value) 324 127.35 T
( in Flags) 126 115.35 T
(item_\337ags) 216 115.35 T
(// item \337ags) 324 115.35 T
(\051;) 108 103.35 T
34 636.02 36 686.02 R
V
34 540.02 36 622.02 R
V
34 492.02 36 526.02 R
V
34 348.02 36 478.02 R
V
34 296.02 36 322.02 R
V
34 112.02 36 254.02 R
V
FMENDPAGE
%%EndPage: "114" 113
%%Page: "113" 113
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(List Routines) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(113) 541.33 60.29 T
72 87.98 558 686.02 R
7 X
V
1 12 Q
0 X
(6.3.3) 93.93 678.02 T
0 F
(get_response) 126 678.02 T
6 10 Q
(ORBStatus get_r) 126 653.35 T
(esponse \050) 198.83 653.35 T
(// PIDL) 504 653.35 T
( in Flags) 144 641.35 T
(r) 234 641.35 T
(esponse_\337ags) 238.26 641.35 T
(// r) 342 641.35 T
(esponse \337ags) 354.31 641.35 T
6 12 Q
-0.11 (get_r) 126 604.02 P
-0.11 (esponse) 152.42 604.02 P
2 F
-0.11 ( determines whether a request has completed. If) 191.74 604.02 P
6 F
-0.11 (get_r) 422.98 604.02 P
-0.11 (esponse) 449.4 604.02 P
2 F
-0.11 ( indicates that) 488.72 604.02 P
(the operation is done, the out parameters and return values de\336ned in the Request are) 126 590.02 T
(valid, and they may be treated as if the Request) 126 576.02 T
6 F
(invoke) 356.17 576.02 T
2 F
( operation had been used to per-) 390.15 576.02 T
(form the request.) 126 562.02 T
(If the RESP_NO_W) 126 536.02 T
(AIT \337ag is set,) 222.61 536.02 T
6 F
(get_r) 296.89 536.02 T
(esponse) 323.32 536.02 T
2 F
( returns immediately even if the request) 362.63 536.02 T
(is still in progress. Otherwise,) 126 522.02 T
6 F
(get_r) 272.25 522.02 T
(esponse) 298.67 522.02 T
2 F
( waits until the request is done before return-) 337.98 522.02 T
(ing.) 126 508.02 T
(The following response \337ags are de\336ned for) 126 482.02 T
6 F
(get_r) 340.84 482.02 T
(esponse) 367.26 482.02 T
2 F
(:) 406.57 482.02 T
(RESP_NO_W) 126 456.02 T
(AIT) 193.97 456.02 T
(Indicates that the caller does not want to wait for a response.) 252 456.02 T
1 F
(6.3.4) 93.93 424.02 T
0 F
(get_next_response) 126 424.02 T
5 10 Q
(ORBStatus get_next_response \050) 126 399.35 T
(/* C */) 504 399.35 T
(Environment) 144 387.35 T
(*env,) 234 387.35 T
(Flags) 144 375.35 T
(response_f) 234 375.35 T
(lags,) 293.97 375.35 T
(Request) 144 363.35 T
(*req) 234 363.35 T
(\051;) 126 351.35 T
5 12 Q
-0.09 (get_next_response) 126 326.02 P
2 F
-0.04 ( returns the next request that completes. Despite the name, there) 248.33 326.02 P
(is no guaranteed ordering among the completed requests, so the order in which they are) 126 312.02 T
(returned from successive) 126 298.02 T
5 F
(get_next_response) 248.9 298.02 T
2 F
( calls is not necessarily related to the) 371.23 298.02 T
(order in which they \336nished.) 126 284.02 T
(If the RESP_NO_W) 126 258.02 T
(AIT \337ag is set, and there are no completed requests pending, then) 222.61 258.02 T
5 F
-1.5 (get_next_response) 126 244.02 P
2 F
-0.63 ( returns immediately) 248.33 244.02 P
-0.63 (. Otherwise,) 345.57 244.02 P
5 F
-1.5 (get_next_response) 405.6 244.02 P
2 F
-0.63 ( waits) 527.94 244.02 P
(until some request \336nishes.) 126 230.02 T
(The following response \337ags are de\336ned for) 126 204.02 T
5 F
(get_next_response) 340.84 204.02 T
2 F
(:) 463.17 204.02 T
(RESP_NO_W) 126 178.02 T
(AIT) 193.97 178.02 T
(Indicates that the caller does not want to wait for a response.) 252 178.02 T
72 131.99 558 135.02 C
126 133.5 558 133.5 2 L
0.25 H
2 Z
0 X
0 K
N
72 133.5 117 133.5 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(6.4) 101.15 139.68 T
0 F
(List Routines) 126 139.68 T
2 12 Q
(The list routines use the named-value structure de\336ned above.) 126 109.99 T
52 638.02 54 686.02 R
V
52 360.02 54 612.02 R
V
52 105.99 54 334.02 R
V
FMENDPAGE
%%EndPage: "113" 112
%%Page: "112" 112
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(Dynamic Invocation Interface) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(112) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
2 12 Q
0 X
(If the operation is de\336ned to be) 108 678.02 T
3 F
(oneway) 260.89 678.02 T
2 F
( or if) 296.97 678.02 T
(INV_NO_RESPONSE is speci\336ed, then) 323.28 678.02 T
6 F
(get_r) 108 664.02 T
(esponse) 134.42 664.02 T
2 F
( does not need to be called. In such cases, some errors might go unreported,) 173.74 664.02 T
-0.35 (since if they are not detected before) 108 650.02 P
6 F
-0.35 (send) 279.73 650.02 P
2 F
-0.35 ( returns there is no way to inform the caller of the) 303.05 650.02 P
(error) 108 636.02 T
(.) 130.64 636.02 T
(The following invocation \337ags are currently de\336ned for) 108 610.02 T
6 F
(send) 377.8 610.02 T
2 F
(:) 401.13 610.02 T
(INV_NO_RESPONSE) 108 584.02 T
-0.34 (Indicates that the invoker does not intend to wait for a response,) 234 584.02 P
(nor does it expect any of the output ar) 234 570.02 T
(guments \050in/out and out\051) 415.65 570.02 T
(to be updated. This option may be speci\336ed even if the opera-) 234 556.02 T
(tion has not been de\336ned to be) 234 542.02 T
3 F
(oneway) 383.57 542.02 T
2 F
(.) 418.87 542.02 T
1 F
(6.3.2) 75.93 510.02 T
0 F
(send_multiple_requests) 108 510.02 T
5 10 Q
(ORBStatus send_multiple_requests \050) 108 485.35 T
(/* C */) 486 485.35 T
(Request) 126 473.35 T
(reqs[],) 216 473.35 T
(/* array of Requests */) 342 473.35 T
(Environment) 126 461.35 T
(*env,) 216 461.35 T
(long) 126 449.35 T
(count,) 216 449.35 T
(/* number of Requests */) 342 449.35 T
(Flags) 126 437.35 T
(invoke_f) 216 437.35 T
(lags) 263.97 437.35 T
(\051;) 108 425.35 T
5 12 Q
(send_multiple_requests) 108 400.02 T
2 F
( initiates more than one request in parallel. Like) 266.31 400.02 T
6 F
(send) 498.82 400.02 T
2 F
(,) 522.14 400.02 T
5 F
-0.83 (send_multiple_requests) 108 386.02 P
2 F
-0.34 ( returns to the caller without waiting for the operations to) 266.31 386.02 P
-0.11 (\336nish. T) 108 372.02 P
-0.11 (o determine when each operation is done, the caller must use the) 147.04 372.02 P
6 F
-0.11 (get_r) 458.49 372.02 P
-0.11 (esponse) 484.92 372.02 P
2 F
-0.11 ( or) 524.23 372.02 P
5 F
(get_next_response) 108 358.02 T
2 F
( operations described below) 230.33 358.02 T
(.) 363.78 358.02 T
(The degree of parallelism in the initiation and execution of the requests is system depen-) 108 332.02 T
(dent. There are no guarantees about the order in which the requests are initiated. If) 108 318.02 T
(INV_TERM_ON_ERR is speci\336ed, and the ORB detects an error initiating one of the) 108 304.02 T
-0.03 (requests, it will not initiate any further requests from this list. If) 108 290.02 P
-0.03 (INV_NO_RESPONSE is) 415.46 290.02 P
(speci\336ed, it applies to all of the requests in the list.) 108 276.02 T
(The following invocation \337ags are currently de\336ned for) 108 250.02 T
5 F
(send_multiple_requests) 377.8 250.02 T
2 F
(:) 536.12 250.02 T
(INV_NO_RESPONSE) 108 224.02 T
-0.34 (Indicates that the invoker does not intend to wait for a response,) 234 224.02 P
-0.46 (nor does it expect any of the output ar) 234 210.02 P
-0.46 (guments \050inout and out\051 to) 412.01 210.02 P
(be updated. This option may be speci\336ed even if the operation) 234 196.02 T
(has not been de\336ned to be) 234 182.02 T
3 F
(oneway) 361.91 182.02 T
2 F
(.) 397.21 182.02 T
(INV_TERM_ON_ERR) 108 156.02 T
-0.41 (If one of the requests causes an error) 234 156.02 P
-0.41 (, the remaining requests are) 406.82 156.02 P
(not sent.) 234 142.02 T
34 434.02 36 686.02 R
V
34 138.02 36 408.02 R
V
FMENDPAGE
%%EndPage: "112" 111
%%Page: "111" 111
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(Deferred Synchronous Routines) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(111) 541.33 60.29 T
72 87.98 558 686.02 R
7 X
V
2 12 Q
0 X
-0.16 (In addition to the ar) 126 678.02 P
-0.16 (gument modes de\336ned in \2446.1.1 on page 106,) 219.76 678.02 P
6 F
-0.16 (arg_\337ags) 440.04 678.02 P
2 F
-0.16 ( may also take) 486.68 678.02 P
(the \337ag value:) 126 664.02 T
(IN_COPY_V) 196.95 664.02 T
(ALUE. The ar) 260.7 664.02 T
(gument passing \337ags de\336ned in \2446.1.1 on page) 329.42 664.02 T
(106 may be used here to indicate the intended parameter passing mode of an ar) 126 650.02 T
(gument.) 504.82 650.02 T
(If the IN_COPY_V) 126 624.02 T
(ALUE \337ag is set, a copy of the ar) 218.38 624.02 T
(gument value is made and used) 379.05 624.02 T
(instead. This \337ag is ignored for inout and out ar) 126 610.02 T
(guments.) 354.31 610.02 T
1 F
(6.2.3) 93.93 578.02 T
0 F
(invoke) 126 578.02 T
6 10 Q
(ORBStatus invoke \050) 126 553.35 T
(// PIDL) 504 553.35 T
( in Flags) 144 541.35 T
(invoke_\337ags) 234 541.35 T
(// invocation \337ags) 324 541.35 T
(\051;) 126 529.35 T
2 12 Q
-0.17 (This operation calls the ORB, which performs method resolution and invokes an appropri-) 126 504.02 P
(ate method. If the method returns successfully) 126 490.02 T
(, its result is placed in the) 346.73 490.02 T
6 F
(r) 471.99 490.02 T
(esult) 477.1 490.02 T
2 F
( ar) 501.08 490.02 T
(gument) 513.18 490.02 T
(speci\336ed on) 126 476.02 T
6 F
(cr) 186.63 476.02 T
(eate_r) 197.06 476.02 T
(equest) 228.81 476.02 T
2 F
(.) 261.45 476.02 T
1 F
(6.2.4) 93.93 444.02 T
0 F
(delete) 126 444.02 T
6 10 Q
(ORBStatus delete \050 \051;) 126 427.35 T
(// PIDL) 504 427.35 T
2 12 Q
(This operation deletes the request. Any memory associated with the request \050i.e. by using) 126 402.02 T
(the) 126 388.02 T
6 F
(IN_COPY_V) 143.65 388.02 T
(ALUE) 210.06 388.02 T
2 F
( \337ag\051 is also freed.) 243.38 388.02 T
72 341.99 558 345.02 C
126 343.5 558 343.5 2 L
0.25 H
2 Z
0 X
0 K
N
72 343.5 117 343.5 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(6.3) 101.15 349.68 T
0 F
(Deferred Synchronous Routines) 126 349.68 T
1 12 Q
(6.3.1) 93.93 313.99 T
0 F
(send) 126 313.99 T
6 10 Q
(ORBStatus send \050) 126 289.33 T
(// PIDL) 504 289.33 T
(in Flags) 144 277.33 T
(invoke_\337ags) 234 277.33 T
(// invocation \337ags) 342 277.33 T
(\051;) 126 265.33 T
6 12 Q
(send) 126 239.99 T
2 F
( initiates an operation according to the information in the Request. Unlike) 149.33 239.99 T
6 F
(invoke) 506.1 239.99 T
2 F
(,) 540.08 239.99 T
6 F
-0.01 (send) 126 225.99 P
2 F
-0.01 ( returns control to the caller without waiting for the operation to \336nish. T) 149.33 225.99 P
-0.01 (o determine) 498.07 225.99 P
(when the operation is done, the caller must use the) 126 211.99 T
6 F
(get_r) 371.49 211.99 T
(esponse) 397.92 211.99 T
2 F
( or) 437.23 211.99 T
5 F
(get_next_re-) 453.22 211.99 T
(sponse) 126 197.99 T
2 F
( operations described below) 169.18 197.99 T
(. The out parameters and return value must not be) 302.63 197.99 T
(used until the operation is done.) 126 183.99 T
(Although it is possible for some standard exceptions to be raised by the) 126 157.99 T
6 F
(send) 471.45 157.99 T
2 F
( operation,) 494.77 157.99 T
(there is no guarantee that all possible errors will be detected. For example, if the object) 126 143.99 T
(reference is not valid,) 126 129.99 T
6 F
(send) 232.91 129.99 T
2 F
( might detect it and raise an exception, or might return before) 256.24 129.99 T
(the object reference is validated, in which case the exception will be raised when) 126 115.99 T
6 F
(get_r) 516.68 115.99 T
(e-) 543.11 115.99 T
(sponse) 126 101.99 T
2 F
( is called.) 159.99 101.99 T
52 646.02 54 686.02 R
V
52 538.02 54 618.02 R
V
52 97.99 54 512.02 R
V
FMENDPAGE
%%EndPage: "111" 110
%%Page: "110" 110
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(Dynamic Invocation Interface) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(110) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
2 12 Q
0 X
-0.2 (The) 108 678.02 P
6 F
-0.2 (r) 129.45 678.02 P
-0.2 (eq_\337ags) 134.56 678.02 P
2 F
-0.2 ( ar) 175.88 678.02 P
-0.2 (gument is de\336ned as a bitmask \050) 187.78 678.02 P
6 F
-0.2 (long) 341.17 678.02 P
2 F
-0.2 (\051 that may contain the following \337ag) 363.16 678.02 P
(values:) 108 664.02 T
(OUT_LIST_MEMOR) 108 638.02 T
(Y) 214.61 638.02 T
(Indicates that any out-ar) 234 638.02 T
(g memory is associated with the ar) 350.02 638.02 T
(gu-) 516.36 638.02 T
(ment list \050) 234 624.02 T
5 F
(NVList) 282.64 624.02 T
2 F
(\051.) 325.82 624.02 T
(Setting the OUT_LIST_MEMOR) 108 598.02 T
(Y \337ag controls the memory allocation mechanism for) 269.25 598.02 T
(out-ar) 108 584.02 T
(g memory \050output ar) 136.42 584.02 T
(guments, for which memory is dynamically allocated\051. If) 235.14 584.02 T
-0.32 (OUT_LIST_MEMOR) 108 570.02 P
-0.32 (Y is speci\336ed, an ar) 214.61 570.02 P
-0.32 (gument list must also have been speci\336ed on the) 308.04 570.02 P
6 F
-0.36 (cr) 108 556.02 P
-0.36 (eate_r) 118.43 556.02 P
-0.36 (equest) 150.18 556.02 P
2 F
-0.36 ( call. When output ar) 182.83 556.02 P
-0.36 (guments of this type are allocated, they are associated) 282.1 556.02 P
(with the list structure. When the list structure is freed \050see below\051, any associated out-ar) 108 542.02 T
(g) 528.8 542.02 T
(memory is also freed.) 108 528.02 T
(If OUT_LIST_MEMOR) 108 502.02 T
(Y is) 225.6 502.02 T
4 F
(not) 248.25 502.02 T
2 F
( speci\336ed, then each piece of out-ar) 263.58 502.02 T
(g memory remains) 433.55 502.02 T
(available until the programmer explicitly frees it with the) 108 488.02 T
5 F
(ORBfree\050\051) 385.48 488.02 T
2 F
( procedure pro-) 450.24 488.02 T
(vided by the language mapping \050see \2445.16 on page 95\051.) 108 474.02 T
(The operation name is a string that conforms to the IDL rules for naming identi\336ers.) 108 448.02 T
1 F
(6.2.2) 75.93 416.02 T
0 F
(add_arg) 108 416.02 T
6 10 Q
(ORBStatus add_arg \050) 108 391.35 T
(// PIDL) 486 391.35 T
( in Identi\336er) 126 379.35 T
(name,) 234 379.35 T
(// argument name) 306 379.35 T
( in T) 126 367.35 T
(ypeCode) 145.26 367.35 T
(arg_type,) 234 367.35 T
(// argument datatype) 306 367.35 T
( in void) 126 355.35 T
(* value,) 234 355.35 T
(// argument value to be added) 306 355.35 T
( in long) 126 343.35 T
(len,) 234 343.35 T
(// length/count of argument value) 306 343.35 T
( in Flags) 126 331.35 T
(arg_\337ags) 234 331.35 T
(// argument \337ags) 306 331.35 T
(\051;) 108 319.35 T
6 12 Q
(add_arg) 108 294.02 T
2 F
( incrementally adds ar) 150.65 294.02 T
(guments to the request.) 256.68 294.02 T
(For each ar) 108 268.02 T
(gument, minimally its) 161.73 268.02 T
6 F
(value) 270.36 268.02 T
2 F
( and) 297.68 268.02 T
6 F
(len) 320.99 268.02 T
2 F
( must be speci\336ed. An ar) 336.32 268.02 T
(gument\325) 455.35 268.02 T
(s) 494.67 268.02 T
(datatype, name, and usage \337ags \050i.e in, out, inout\051 may also be speci\336ed. If so indicated,) 108 254.02 T
-0.23 (ar) 108 240.02 P
-0.23 (guments are validated for datatype, order) 117.1 240.02 P
-0.23 (, name, and usage correctness against the set of) 312.62 240.02 P
(ar) 108 226.02 T
(guments expected for the indicated operation.) 117.1 226.02 T
(An implementation of the request services may relax the order constraint \050and allow ar) 108 200.02 T
(gu-) 523.8 200.02 T
(ments to be speci\336ed out of order\051 by doing ordering based upon ar) 108 186.02 T
(gument name.) 430.89 186.02 T
(The ar) 108 160.02 T
(guments added to the request become associated with the request and are assumed) 138.75 160.02 T
(to be unchanged until the invoke has completed \050or the request has been deleted\051.) 108 146.02 T
(Ar) 108 120.02 T
(guments may be associated with a request by specifying them on the) 120.44 120.02 T
6 F
(cr) 452.21 120.02 T
(eate_r) 462.64 120.02 T
(equest) 494.39 120.02 T
2 F
(call or by adding them via calls to) 108 106.02 T
6 F
(add_arg) 273.89 106.02 T
2 F
(. Using both methods for specifying ar) 316.54 106.02 T
(gu-) 501.2 106.02 T
(ments, for the same request, is not currently supported.) 108 92.02 T
34 674.02 36 686.02 R
V
34 620.02 36 646.02 R
V
34 538.02 36 592.02 R
V
34 250.02 36 496.02 R
V
34 102.02 36 128.02 R
V
FMENDPAGE
%%EndPage: "110" 109
%%Page: "109" 109
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(Request Routines) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(109) 541.33 60.29 T
72 87.98 558 686.02 R
7 X
V
1 12 Q
0 X
(6.2.1) 93.93 678.02 T
0 F
(create_request) 126 678.02 T
2 F
(Because it creates a pseudo-object, this operation is de\336ned in the Object interface \050see) 126 660.02 T
(\2448.2 on page 145 for the complete interface de\336nition\051. The) 126 646.02 T
6 F
(cr) 415.79 646.02 T
(eate_r) 426.22 646.02 T
(equest) 457.97 646.02 T
2 F
( operation is) 490.61 646.02 T
(performed on the Object which is to be invoked.) 126 632.02 T
6 10 Q
(ORBStatus cr) 126 607.35 T
(eate_r) 185.51 607.35 T
(equest \050) 211.96 607.35 T
(// PIDL) 504 607.35 T
(in Context) 144 595.35 T
(ctx,) 234 595.35 T
(// context object for operation) 324 595.35 T
(in Identi\336er) 144 583.35 T
(operation,) 234 583.35 T
(// intended operation on object) 324 583.35 T
(in NVList) 144 571.35 T
(arg_list,) 234 571.35 T
(// args to operation) 324 571.35 T
(inout NamedV) 144 559.35 T
(alue) 205.55 559.35 T
(r) 234 559.35 T
(esult,) 238.26 559.35 T
(// operation r) 324 559.35 T
(esult) 379.9 559.35 T
(out Request) 144 547.35 T
(r) 234 547.35 T
(equest,) 238.26 547.35 T
(// newly cr) 324 547.35 T
(eated r) 368.24 547.35 T
(equest) 397.75 547.35 T
(in Flags) 144 535.35 T
(r) 234 535.35 T
(eq_\337ags) 238.26 535.35 T
(// r) 324 535.35 T
(equest \337ags) 336.31 535.35 T
(\051;) 126 523.35 T
2 12 Q
-0.1 (This operation creates an ORB request. The actual invocation occurs by calling) 126 498.02 P
6 F
-0.1 (invoke) 508.22 498.02 P
2 F
-0.1 ( or) 542.21 498.02 P
(by using the) 126 484.02 T
6 F
(send) 187.63 484.02 T
2 F
( /) 210.96 484.02 T
6 F
(get_r) 220.29 484.02 T
(esponse) 246.71 484.02 T
2 F
(calls.) 289.03 484.02 T
(The operation name speci\336ed on) 126 458.02 T
6 F
(cr) 285.55 458.02 T
(eate_r) 295.98 458.02 T
(equest) 327.73 458.02 T
2 F
( is the same operation identi\336er that is) 360.38 458.02 T
(speci\336ed in the IDL de\336nition for this operation.) 126 444.02 T
(The) 126 418.02 T
6 F
(arg_list) 147.65 418.02 T
2 F
(, if speci\336ed, contains a list of ar) 186.29 418.02 T
(guments \050input, output, and/or input/output\051) 342.3 418.02 T
-0.07 (which become associated with the request. If) 126 404.02 P
6 F
-0.07 (arg_list) 343.98 404.02 P
2 F
-0.07 ( is omitted \050speci\336ed as NULL\051, the) 382.63 404.02 P
(ar) 126 390.02 T
(guments \050if any\051 must be speci\336ed using the) 135.1 390.02 T
6 F
(add_arg) 350.3 390.02 T
2 F
( call below) 392.95 390.02 T
(.) 444.8 390.02 T
(Ar) 126 364.02 T
(guments may be associated with a request by passing in an ar) 138.44 364.02 T
(gument list or by using) 432.35 364.02 T
(repetitive calls to) 126 350.02 T
6 F
(add_arg) 211.61 350.02 T
2 F
(. One mechanism or the other may be used for supplying ar) 254.26 350.02 T
(gu-) 538.5 350.02 T
(ments to a given request; a mixture of the two approaches is not supported.) 126 336.02 T
(If speci\336ed, the) 126 310.02 T
6 F
(arg_list) 203.27 310.02 T
2 F
( becomes associated with the request; until the) 241.92 310.02 T
6 F
(invoke) 467.76 310.02 T
2 F
( call has) 501.75 310.02 T
(completed \050or the request has been deleted\051, the ORB assumes that) 126 296.02 T
6 F
(arg_list) 449.76 296.02 T
2 F
( \050and any val-) 488.4 296.02 T
(ues it points to\051 remains unchanged.) 126 282.02 T
-0.11 (When specifying an ar) 126 256.02 P
-0.11 (gument list, the) 233.71 256.02 P
6 F
-0.11 (value) 310.68 256.02 P
2 F
-0.11 ( and) 338 256.02 P
6 F
-0.11 (len) 361.11 256.02 P
2 F
-0.11 ( for each ar) 376.43 256.02 P
-0.11 (gument must be speci\336ed.) 430.17 256.02 P
(An ar) 126 242.02 T
(gument\325) 152.76 242.02 T
(s datatype, name, and usage \337ags \050i.e., in, out, inout\051 may also be speci\336ed;) 192.07 242.02 T
(if so indicated, ar) 126 228.02 T
(guments are validated for datatype, order) 209.05 228.02 T
(, name, and usage correctness) 405.75 228.02 T
(against the set of ar) 126 214.02 T
(guments expected for the indicated operation.) 219.04 214.02 T
(An implementation of the request services may relax the order constraint \050and allow ar) 126 188.02 T
(gu-) 541.8 188.02 T
(ments to be speci\336ed out of order\051 by doing ordering based upon ar) 126 174.02 T
(gument name.) 448.89 174.02 T
(The context properties associated with the operation are passed to the object implementa-) 126 148.02 T
(tion. The object implementation may not modify the context information passed to it.) 126 134.02 T
(The operation result is placed in the) 126 108.02 T
6 F
(r) 300.88 108.02 T
(esult) 305.98 108.02 T
2 F
( ar) 329.97 108.02 T
(gument after the invocation completes.) 342.07 108.02 T
52 454.02 54 686.02 R
V
52 386.02 54 426.02 R
V
52 346.02 54 358.02 R
V
52 224.02 54 318.02 R
V
52 104.02 54 182.02 R
V
FMENDPAGE
%%EndPage: "109" 108
%%Page: "108" 108
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(Dynamic Invocation Interface) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(108) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
2 12 Q
0 X
-0.16 (If the programmer chooses not to associate out-ar) 108 678.02 P
-0.16 (g memory with an ar) 344.14 678.02 P
-0.16 (gument list, the pro-) 443.2 678.02 P
(grammer is responsible for freeing each out parameter using) 108 664.02 T
5 F
(ORBfree\050\051) 400.1 664.02 T
2 F
( \050see \2445.16 on) 464.86 664.02 T
(page 95\051.) 108 650.02 T
1 F
(6.1.3) 75.93 618.02 T
0 F
(Return Statuses and Exceptions) 108 618.02 T
2 F
(In the Dynamic Invocation Interface as speci\336ed, many routines return an) 108 592.02 T
3 F
(ORBStatus) 464.38 592.02 T
2 F
(result, which is intended as a status code.) 108 578.02 T
3 F
(ORBStatus) 308.53 578.02 T
2 F
( is de\336ned as:) 360.44 578.02 T
3 10 Q
(typedef unsigned long ORBStatus;) 108 559.35 T
2 12 Q
(Conforming CORBA implementations are) 108 534.02 T
4 F
(not) 314.55 534.02 T
2 F
( required to return this status code; instead,) 329.88 534.02 T
(the de\336nition) 108 520.02 T
3 10 Q
(typedef void ORBStatus;) 108 501.35 T
2 12 Q
-0.07 (is a conforming implementation \050in which case no status code result is returned, except in) 108 476.02 P
(the usual) 108 462.02 T
3 F
(inout Environment) 153.97 462.02 T
2 F
( ar) 240.85 462.02 T
(gument\051. Implementations are required to specify which) 252.95 462.02 T
3 F
(ORBStatus) 108 448.02 T
2 F
( behavior is supported.) 159.91 448.02 T
54 401.99 540 405.02 C
108 403.5 540 403.5 2 L
0.25 H
2 Z
0 X
0 K
N
54 403.5 99 403.5 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(6.2) 83.15 409.68 T
0 F
(Request Routines) 108 409.68 T
2 12 Q
(The request routines are de\336ned in terms of the Request pseudo-object. The Request rou-) 108 379.99 T
(tines use the) 108 365.99 T
5 F
(NVList) 170.29 365.99 T
2 F
( de\336nition de\336ned above.) 213.47 365.99 T
6 10 Q
(interface Request {) 108 341.33 T
(// PIDL) 486 341.33 T
(ORBStatus add_arg \050) 126 317.33 T
( in Identi\336er) 144 305.33 T
(name,) 234 305.33 T
(// argument name) 306 305.33 T
( in T) 144 293.33 T
(ypeCode) 163.26 293.33 T
(arg_type,) 234 293.33 T
(// argument datatype) 306 293.33 T
( in void) 144 281.33 T
(* value,) 234 281.33 T
(// argument value to be added) 306 281.33 T
( in long) 144 269.33 T
(len,) 234 269.33 T
(// length/count of argument value) 306 269.33 T
( in Flags) 144 257.33 T
(arg_\337ags) 234 257.33 T
(// argument \337ags) 306 257.33 T
(\051;) 126 245.33 T
(ORBStatus invoke \050) 126 233.33 T
( in Flags) 144 221.33 T
(invoke_\337ags) 234 221.33 T
(// invocation \337ags) 306 221.33 T
(\051;) 126 209.33 T
(ORBStatus delete \050\051;) 126 197.33 T
(ORBStatus send \050) 126 185.33 T
(in Flags) 144 173.33 T
(invoke_\337ags) 234 173.33 T
(// invocation \337ags) 288 173.33 T
(\051;) 126 161.33 T
(ORBStatus get_r) 126 149.33 T
(esponse \050) 198.83 149.33 T
( in Flags) 144 137.33 T
(r) 234 137.33 T
(esponse_\337ags) 238.26 137.33 T
(// r) 306 137.33 T
(esponse \337ags) 318.31 137.33 T
(\051;) 126 125.33 T
(};) 108 113.33 T
34 574.02 36 672.02 R
V
34 337.99 36 542.02 R
V
34 253.99 36 323.99 R
V
34 121.99 36 239.99 R
V
FMENDPAGE
%%EndPage: "108" 107
%%Page: "107" 107
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(Overview) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(107) 541.33 60.29 T
72 87.98 558 686.02 R
7 X
V
2 12 Q
0 X
-0.17 (The) 126 416.02 P
3 F
-0.16 (arg_modes) 147.48 416.02 P
2 F
-0.17 ( \336eld is de\336ned as a bitmask \050long\051 and may contain the following \337ag val-) 199.95 416.02 P
(ues:) 126 402.02 T
(ARG_IN) 126 376.02 T
(the associated value is an input only ar) 252 376.02 T
(gument) 437.32 376.02 T
(ARG_OUT) 126 350.02 T
(the associated value is an output only ar) 252 350.02 T
(gument) 443.32 350.02 T
(ARG_INOUT) 126 324.02 T
(the associated value is an in/out ar) 252 324.02 T
(gument) 416.33 324.02 T
(These \337ag values identify the parameter passing mode for ar) 126 298.02 T
(guments. Additional \337ag val-) 415.89 298.02 T
(ues have speci\336c meanings for request and list routines, and are documented with their) 126 284.02 T
(associated routines.) 126 270.02 T
-0.49 (All other bits are reserved. The high-order 16 bits are reserved for implementation-speci\336c) 126 244.02 P
(\337ags.) 126 230.02 T
1 F
(6.1.2) 93.93 198.02 T
0 F
(Memory Usage) 126 198.02 T
2 F
(The values for output ar) 126 180.02 T
(gument data types that are unbounded strings or unbounded) 241.03 180.02 T
-0.38 (sequences are returned as pointers to dynamically allocated memory \050see TBL. 13 on page) 126 166.02 P
-0.12 (98\051. In order to facilitate the freeing of all \322out-ar) 126 152.02 P
-0.12 (g memory\323, the request routines provide) 361.85 152.02 P
-0.1 (a mechanism for grouping, or keeping track of, this memory) 126 138.02 P
-0.1 (. If so speci\336ed, out-ar) 413.81 138.02 P
-0.1 (g mem-) 521.12 138.02 P
(ory is associated with the ar) 126 124.02 T
(gument list passed to the create request routine. When the list) 259.36 124.02 T
(is deleted the associated out-ar) 126 110.02 T
(g memory will automatically be freed.) 273 110.02 T
0 9 Q
(unsigned long) 132 621.02 T
(sizeof \050unsigned long\051) 240 621.02 T
(\337oat) 132 606.02 T
(sizeof \050\337oat\051) 240 606.02 T
(double) 132 591.02 T
(sizeof \050double\051) 240 591.02 T
(char) 132 576.02 T
(sizeof \050char\051) 240 576.02 T
(boolean) 132 561.02 T
(sizeof \050char\051) 240 561.02 T
(octet) 132 546.02 T
(sizeof \050char\051) 240 546.02 T
(string) 132 531.02 T
(strlen \050string\051 /* does NOT include \324\1340\325 byte! */) 240 531.02 T
(enum E {};) 132 516.02 T
(sizeof \050unsigned long\051) 240 516.02 T
(union U { } ;) 132 501.02 T
(sizeof \050U\051) 240 501.02 T
(struct S { };) 132 486.02 T
(sizeof \050S\051) 240 486.02 T
(Object) 132 471.02 T
(1) 240 471.02 T
(array N of type T1) 132 456.02 T
(Length \050T1\051 * N) 240 456.02 T
(sequence V of type T2) 132 441.02 T
-0.02 (Length \050T2\051 * V    /* V is the actual, dynamic, number of elements */) 240 441.02 P
72 672.98 558 686.02 C
126 680.04 558 680.04 2 L
0.25 H
2 Z
0 X
0 K
N
72 680.04 117 680.04 2 L
0 Z
N
0 0 612 792 C
72 649.02 558 662.98 C
72 654.99 558 654.99 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
(TBL. 15) 72 666.32 T
0 F
(C T) 126 666.32 T
(ype Lengths  \050Continued\051) 141.55 666.32 T
1 9 Q
(Data type: X) 132 636.02 T
(Length \050X\051) 240 636.02 T
126 631.02 513 631.02 2 L
V
0.5 H
0 Z
N
126 436.02 513 436.02 2 L
V
N
52 412.02 54 424.02 R
V
52 372.02 54 384.02 R
V
52 294.02 54 332.02 R
V
52 106.02 54 278.02 R
V
52 618.02 54 627.02 R
V
52 618.02 54 627.02 R
V
52 603.02 54 612.02 R
V
52 603.02 54 612.02 R
V
52 588.02 54 597.02 R
V
52 588.02 54 597.02 R
V
52 573.02 54 582.02 R
V
52 573.02 54 582.02 R
V
52 558.02 54 567.02 R
V
52 558.02 54 567.02 R
V
52 543.02 54 552.02 R
V
52 543.02 54 552.02 R
V
52 528.02 54 537.02 R
V
52 528.02 54 537.02 R
V
52 513.02 54 522.02 R
V
52 513.02 54 522.02 R
V
52 498.02 54 507.02 R
V
52 498.02 54 507.02 R
V
52 483.02 54 492.02 R
V
52 483.02 54 492.02 R
V
52 468.02 54 477.02 R
V
52 468.02 54 477.02 R
V
52 453.02 54 462.02 R
V
52 438.02 54 447.02 R
V
52 438.02 54 447.02 R
V
FMENDPAGE
%%EndPage: "107" 106
%%Page: "106" 106
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(Dynamic Invocation Interface) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(106) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
1 12 Q
0 X
(6.1.1) 75.93 678.02 T
0 F
(Common Data Structures) 108 678.02 T
2 F
(The type) 108 652.02 T
3 F
(NamedV) 153.3 652.02 T
(alue) 192.11 652.02 T
2 F
( is a well-known datatype in IDL. It can be used either as a parame-) 211.79 652.02 T
-0.44 (ter type directly or as a mechanism for describing ar) 108 638.02 P
-0.44 (guments to a request. The type NVList) 353.91 638.02 P
(is a pseudo-object useful for constructing parameter lists. The types are described in IDL) 108 624.02 T
(and C, respectively) 108 610.02 T
(, as:) 199.49 610.02 T
3 10 Q
(typedef unsigned long Flags;) 108 585.35 T
(struct NamedV) 108 561.35 T
(alue {) 165.39 561.35 T
(Identi\336er) 126 549.35 T
(name;) 198 549.35 T
(// argument name) 252 549.35 T
(any) 126 537.35 T
(argument;) 198 537.35 T
(// argument) 252 537.35 T
(long) 126 525.35 T
(len;) 198 525.35 T
(// length/count of argument value) 252 525.35 T
(Flags) 126 513.35 T
(arg_modes;) 198 513.35 T
(// argument mode \337ags) 252 513.35 T
(};) 108 501.35 T
5 F
(NamedValue * NVList;) 108 483.35 T
(/* C */) 486 483.35 T
2 12 Q
(The) 108 458.02 T
3 F
(NamedV) 129.65 458.02 T
(alue) 168.46 458.02 T
2 F
( and) 188.14 458.02 T
5 F
(NVList) 211.46 458.02 T
2 F
( structures are used in the request operations to describe) 254.63 458.02 T
-0.16 (ar) 108 444.02 P
-0.16 (guments and return values. They are also used in the context object routines to pass lists) 117.1 444.02 P
(of property names and values. Despite the above declaration for) 108 430.02 T
5 F
(NVList) 417.42 430.02 T
2 F
(, the) 460.59 430.02 T
5 F
(NVList) 484.24 430.02 T
2 F
-0.01 (structure is partially opaque and may only be created by using the ORB) 108 416.02 P
6 F
-0.01 (cr) 453.98 416.02 P
-0.01 (eate_list) 464.41 416.02 P
2 F
-0.01 ( opera-) 506.38 416.02 P
(tion.) 108 402.02 T
(A named value includes an ar) 108 376.02 T
(gument name, ar) 250 376.02 T
(gument value \050as an) 330.06 376.02 T
3 F
(any) 429.32 376.02 T
2 F
(\051, length of the) 446.26 376.02 T
(ar) 108 362.02 T
(gument, and a set of ar) 117.1 362.02 T
(gument mode \337ags. When named value structures are used to) 226.13 362.02 T
(describe ar) 108 348.02 T
(guments to a request, the names are the ar) 160.06 348.02 T
(gument identi\336ers speci\336ed in the) 360.69 348.02 T
(IDL de\336nition for a speci\336c operation.) 108 334.02 T
(As described in \2445.7 on page 89, an) 108 308.02 T
3 F
(any) 282.54 308.02 T
2 F
( consists of a) 299.49 308.02 T
6 F
(T) 364.78 308.02 T
(ypeCode) 371.89 308.02 T
2 F
( and a pointer to the data) 416.53 308.02 T
(value. The T) 108 294.02 T
(ypeCode is a well-known opaque type that can encode a description of any) 168.11 294.02 T
(type speci\336able in IDL. A full description of T) 108 280.02 T
(ypecodes is given in \2447.6 on page 138.) 331.34 280.02 T
(For most datatypes,) 108 254.02 T
3 F
(len) 205.28 254.02 T
2 F
( is the actual number of bytes that the value occupies. For object) 219.49 254.02 T
(references,) 108 240.02 T
3 F
(len) 163.27 240.02 T
2 F
( is 1. TBL. 15 on page 106 shows the length of data values for the C lan-) 177.48 240.02 T
-0.13 (guage binding. The behavior of a NamedV) 108 226.02 P
-0.13 (alue is unde\336ned if the) 311.41 226.02 P
3 F
-0.12 (len) 423.02 226.02 P
2 F
-0.13 ( value is inconsistent) 437.24 226.02 P
(with the T) 108 212.02 T
(ypeCode.) 156.46 212.02 T
54 182.98 540 196.02 C
108 190.04 540 190.04 2 L
0.25 H
2 Z
0 X
0 K
N
54 190.04 99 190.04 2 L
0 Z
N
0 0 612 792 C
54 159.02 540 172.98 C
54 164.99 540 164.99 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
(TBL. 15) 54 176.32 T
0 F
(C T) 108 176.32 T
(ype Lengths) 123.55 176.32 T
1 9 Q
(Data type: X) 114 146.02 T
(Length \050X\051) 222 146.02 T
0 F
(short) 114 131.02 T
(sizeof \050short\051) 222 131.02 T
(unsigned short) 114 116.02 T
(sizeof \050unsigned short\051) 222 116.02 T
(long) 114 101.02 T
(sizeof \050long\051) 222 101.02 T
108 141.02 495 141.02 2 L
V
0.5 H
0 Z
N
108 96.02 495 96.02 2 L
V
N
34 582.02 36 686.02 R
V
34 510.02 36 568.02 R
V
34 454.02 36 490.02 R
V
34 358.02 36 438.02 R
V
34 208.02 36 316.02 R
V
34 172.98 36 182.98 R
V
34 143.02 36 152.02 R
V
34 143.02 36 152.02 R
V
34 128.02 36 137.02 R
V
34 128.02 36 137.02 R
V
34 113.02 36 122.02 R
V
34 113.02 36 122.02 R
V
34 98.02 36 107.02 R
V
34 98.02 36 107.02 R
V
FMENDPAGE
%%EndPage: "106" 105
%%Page: "105" 105
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 378 558 378 2 L
7 X
V
2 Z
0 X
N
72 74.02 558 74.02 2 L
7 X
V
0.25 H
0 X
N
72 55.01 558 66.96 R
7 X
V
0 9 Q
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
-2.78 (105) 541.33 60.29 P
72 396 558 693 R
7 X
V
0 24 Q
0 X
-0.48 (6) 72 677 S
-0.48 (Dynamic Invocation Interface) 126 677 S
52 669 54 693 R
V
72 87.98 558 360 R
7 X
V
72 342.98 558 346 C
126 344.49 558 344.49 2 L
0.25 H
2 Z
0 X
0 K
N
72 344.49 117 344.49 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(6.1) 101.15 350.67 T
0 F
(Overview) 126 350.67 T
2 12 Q
(The ORB dynamic invocation interface allows dynamic creation and invocation of) 126 320.98 T
(requests to objects. A client using this interface to send a request to an object obtains the) 126 306.98 T
(same semantics as a client using the operation stub generated from the type speci\336cation.) 126 292.98 T
(A request is comprised of an object reference, an operation, and a list of parameters. The) 126 266.98 T
(ORB applies the implementation-hiding \050encapsulation\051 principle to requests.) 126 252.98 T
(In the dynamic invocation interface, parameters in a request are supplied as elements of a) 126 226.98 T
(list. Each element is an instance of a) 126 212.98 T
6 F
(NamedV) 303.54 212.98 T
(alue) 347.73 212.98 T
2 F
( \050see \2446.1.1 on page 106\051. Each param-) 369.06 212.98 T
(eter is passed in its native data form.) 126 198.98 T
(Parameters supplied to a request may be subject to run-time type checking upon request) 126 172.98 T
(invocation. Parameters must be supplied in the same order as the parameters de\336ned for) 126 158.98 T
(the operation in the Interface Repository) 126 144.98 T
(.) 319.41 144.98 T
52 316.98 54 360 R
V
52 262.98 54 274.98 R
V
52 208.98 54 220.98 R
V
FMENDPAGE
%%EndPage: "105" 104
%%Page: "104" 104
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(C Language Stub Mapping) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(104) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
FMENDPAGE
%%EndPage: "104" 103
%%Page: "103" 103
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(Pseudo-objects) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(103) 541.33 60.29 T
72 87.98 558 686.02 R
7 X
V
2 12 Q
0 X
-0.03 (Although operations on pseudo-objects are invoked in the usual way de\336ned by the C lan-) 126 678.02 P
-0.08 (guage mapping, there are restrictions on them. In general, a pseudo-object cannot be spec-) 126 664.02 P
(i\336ed as a parameter to an operation on an ordinary object. Pseudo-objects are also not) 126 650.02 T
-0.08 (accessible using the dynamic invocation interface, and do not have de\336nitions in the inter-) 126 636.02 P
(face repository) 126 622.02 T
(.) 196.82 622.02 T
-0.16 (Operations on pseudo-objects may take parameters that are not permitted in operations on) 126 596.02 P
(ordinary objects. For example, the) 126 582.02 T
6 F
(set_exception) 293.55 582.02 T
2 F
( operation on the Basic Object Adapter) 362.16 582.02 T
(pseudo-object takes a C) 126 568.02 T
5 F
(\050void) 243.25 568.02 T
(*\051) 282.23 568.02 T
2 F
( to specify the exception parameters \050see \2449.3.2 on) 296.62 568.02 T
(page 157 for details\051. Generally) 126 554.02 T
(, these parameters will be language-mapping speci\336c.) 277.43 554.02 T
(Because the programmer uses pseudo-objects in the same way as ordinary objects, some) 126 528.02 T
-0.46 (ORB implementations may choose to implement some pseudo-objects as ordinary objects.) 126 514.02 P
(For example, assuming it could be ef) 126 500.02 T
(\336cient enough, a context object might be imple-) 303.33 500.02 T
(mented as an ordinary object.) 126 486.02 T
52 550.02 54 576.02 R
V
FMENDPAGE
%%EndPage: "103" 102
%%Page: "102" 102
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(C Language Stub Mapping) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(102) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
2 12 Q
0 X
(Most object adapters are likely to provide method signatures that are similar in most) 108 678.02 T
-0.46 (respects to those of the client stubs. In particular) 108 664.02 P
-0.46 (, the mapping for the operation parameters) 336.03 664.02 P
(expressed in IDL should be the same as for the client side.) 108 650.02 T
(See \2449.3 on page 156 for the description of method signatures for implementations using) 108 624.02 T
(the Basic Object Adapter) 108 610.02 T
(.) 228.25 610.02 T
54 563.99 540 567.02 C
108 565.5 540 565.5 2 L
0.25 H
2 Z
0 X
0 K
N
54 565.5 99 565.5 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(5.21) 75.37 571.68 T
0 F
(Include Files) 108 571.68 T
2 12 Q
-0.22 (Multiple interfaces may be de\336ned in a single source \336le. By convention, each interface is) 108 545.99 P
(stored in a separate source \336le. All IDL compilers will, by default, generate a header \336le) 108 531.99 T
(named) 108 517.99 T
5 F
(Foo.h) 142.97 517.99 T
2 F
( from) 178.95 517.99 T
3 F
(Foo.idl) 208.26 517.99 T
2 F
(. This \336le should be) 240.5 517.99 T
3 F
(#include) 338.45 517.99 T
2 F
(d by clients and implementations) 378.36 517.99 T
(of the interfaces de\336ned in) 108 503.99 T
3 F
(Foo.idl) 238.9 503.99 T
2 F
(.) 271.13 503.99 T
(Inclusion of) 108 477.99 T
5 F
(Foo.h) 168.63 477.99 T
2 F
( is suf) 204.61 477.99 T
(\336cient to de\336ne all global names associated with the interfaces) 233.04 477.99 T
(in) 108 463.99 T
3 F
(Foo.idl) 120.33 463.99 T
2 F
( and any interfaces from which they are derived.) 152.57 463.99 T
54 417.97 540 420.99 C
108 419.48 540 419.48 2 L
0.25 H
2 Z
0 X
0 K
N
54 419.48 99 419.48 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(5.22) 75.37 425.66 T
0 F
(Pseudo-objects) 108 425.66 T
2 12 Q
-0.24 (In the C language mapping, there are several interfaces that are de\336ned as pseudo-objects;) 108 395.97 P
(TBL. 18 on page 172 lists the pseudo-objects. A client makes calls on a pseudo-object in) 108 381.97 T
(the same way as an ordinary ORB object. However) 108 367.97 T
(, the ORB may implement the pseudo-) 353.66 367.97 T
(object directly) 108 353.97 T
(, and there are restrictions on what a client may do with a pseudo-object.) 176.17 353.97 T
(The ORB itself is a pseudo-object with the following partial de\336nition \050see Chapter 8 for) 108 327.97 T
(the complete de\336nition\051:) 108 313.97 T
3 10 Q
(interface ORB {) 108 289.3 T
(string) 126 277.3 T
(object_to_string \050in Object obj\051;) 180 277.3 T
(Object) 126 265.3 T
(string_to_object \050in string str\051;) 180 265.3 T
(};) 108 253.3 T
2 12 Q
(This means that a C programmer may convert an object reference into its string form by) 108 227.97 T
(calling:) 108 213.97 T
5 10 Q
(Environment ev;) 108 189.3 T
(/* C */) 468 189.3 T
(char *str = ORB_object_to_string \050orbobj, &ev, obj\051;) 108 177.3 T
2 12 Q
(just as if the ORB were an ordinary object. The C library contains the routine) 108 151.97 T
5 F
(ORB_object_to_string) 108 137.97 T
2 F
(, and it it does not do a real invocation. The) 251.92 137.97 T
5 F
(orbobj) 463.45 137.97 T
2 F
( is an) 506.62 137.97 T
(object reference that speci\336es which ORB is of interest, since it is possible to choose) 108 123.97 T
(which ORB should be used to convert an object reference to a string \050see Chapter 8 for) 108 109.97 T
(details on this speci\336c operation\051.) 108 95.97 T
34 620.02 36 632.02 R
V
34 513.99 36 525.99 R
V
34 459.99 36 485.99 R
V
34 377.97 36 403.97 R
V
34 261.97 36 295.97 R
V
34 91.97 36 195.97 R
V
FMENDPAGE
%%EndPage: "102" 101
%%Page: "101" 101
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(Method Routine Signatures) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(101) 541.33 60.29 T
72 87.98 558 686.02 R
7 X
V
2 12 Q
0 X
(This interface de\336nes a single operation which returns no results and can raise a) 126 678.02 T
3 F
(BadCall) 512.37 678.02 T
2 F
(exception. The following user code shows how to invoke the operation and recover from) 126 664.02 T
(an exception:) 126 650.02 T
5 10 Q
(#include "exampleX.h") 126 625.35 T
(/* C */) 486 625.35 T
(Environment ev;) 126 601.35 T
(exampleX obj;) 126 589.35 T
(exampleX_BadCall *bc;) 126 577.35 T
(/*) 126 553.35 T
( * some code to initialize obj to a reference to an object supporting) 126 541.35 T
( * the exampleX interface) 126 529.35 T
( */) 126 517.35 T
(exampleX_op\050obj, &ev\051;) 126 493.35 T
(switch\050ev._major\051 {) 126 481.35 T
(case NO_EXCEPTION:) 126 469.35 T
(/* successful outcome*/) 233.94 469.35 T
(/* process out and inout arguments */) 144 457.35 T
(break;) 144 445.35 T
(case USER_EXCEPTION:) 126 433.35 T
(/* a user-def) 245.93 433.35 T
(ined exception */) 323.89 433.35 T
(if \050strcmp\050ex_exampleX_BadCall, exception_id\050&ev\051\051 == 0\051 {) 144 421.35 T
(bc = \050exampleX_BadCall *\051exception_value\050&ev\051;) 162 409.35 T
(fprintf\050stderr, "exampleX_op\050\051 failed - reason: %s\134n",) 162 397.35 T
(bc->reason\051;) 180 385.35 T
(else {) 162 373.35 T
(/* should never get here ... */) 216 373.35 T
(fprintf\050stderr, "unknown user-def) 180 361.35 T
(ined exception - %s\134n",) 377.89 361.35 T
(exception_id\050&ev\051\051;) 198 349.35 T
(}) 162 337.35 T
(break;) 162 325.35 T
(default:) 126 313.35 T
(/* standard exception */) 180 313.35 T
(/*) 144 301.35 T
( * exception_id\050\051 can be used to determine which particular) 144 289.35 T
( * standard exception was raised; the minor member of the struct) 144 277.35 T
( * associated with the exception \050as yielded by exception_value\050\051\051) 144 265.35 T
( * may provide additional system-specif) 144 253.35 T
(ic information about the) 377.87 253.35 T
( * exception) 144 241.35 T
( */) 144 229.35 T
(break;) 144 217.35 T
(}) 126 205.35 T
(exception_free\050&ev\051;) 126 193.35 T
(/* free any storage associated with exception */) 245.93 193.35 T
72 147.99 558 151.02 C
126 149.51 558 149.51 2 L
0.25 H
2 Z
0 X
0 K
N
72 149.51 117 149.51 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(5.20) 93.37 155.68 T
0 F
(Method Routine Signatures) 126 155.68 T
2 12 Q
(The signatures of the methods used to implement an object depend not only on the lan-) 126 129.99 T
-0.1 (guage binding, but also on the choice of object adapter) 126 115.99 P
-0.1 (. Dif) 386.88 115.99 P
-0.1 (ferent object adapters may pro-) 408.55 115.99 P
(vide additional parameters to access object adapter) 126 101.99 T
(-speci\336c features.) 369.56 101.99 T
52 622.02 54 686.02 R
V
52 574.02 54 608.02 R
V
52 514.02 54 548.02 R
V
52 346.02 54 500.02 R
V
52 310.02 54 332.02 R
V
52 214.02 54 296.02 R
V
52 125.99 54 200.02 R
V
FMENDPAGE
%%EndPage: "101" 100
%%Page: "100" 100
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(C Language Stub Mapping) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(100) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
5 12 Q
0 X
(exception_id\050\051) 108 678.02 T
2 F
( returns a pointer to the character string identifying the exception. If) 208.74 678.02 T
(invoked on an) 108 664.02 T
5 F
(Environment) 178.95 664.02 T
2 F
( which identi\336es a non-exception, \050) 258.11 664.02 T
5 F
(_major==NO_EX-) 427.32 664.02 T
(CEPTION) 108 650.02 T
2 F
(\051 a NULL is returned.) 158.37 650.02 T
5 F
(exception_value\050\051) 108 624.02 T
2 F
( returns a pointer to the structure corresponding to this excep-) 230.33 624.02 T
(tion. If invoked on an) 108 610.02 T
5 F
(Environment) 214.6 610.02 T
2 F
( which identi\336es a non-exception or an exception) 293.75 610.02 T
(for which there is no associated information, a NULL is returned.) 108 596.02 T
5 F
-0.71 (exception_free\050\051) 108 570.02 P
2 F
-0.3 ( returns any storage which was allocated in the construction of the) 223.14 570.02 P
5 F
(Environment) 108 556.02 T
2 F
(. It is permissible to invoke) 187.16 556.02 T
5 F
(exception_free\050\051) 320.75 556.02 T
2 F
( regardless of the) 435.89 556.02 T
(value of the) 108 542.02 T
5 F
(_major) 167.62 542.02 T
2 F
( \336eld.) 210.8 542.02 T
(Consider the following example:) 108 516.02 T
3 10 Q
(interface exampleX {) 108 491.35 T
(exception BadCall {) 126 479.35 T
(string<80> reason;) 126 467.35 T
(};) 126 455.35 T
(void op\050\051 raises\050BadCall\051;) 126 431.35 T
(};) 108 419.35 T
34 646.02 36 686.02 R
V
34 592.02 36 618.02 R
V
34 452.02 36 498.02 R
V
34 428.02 36 438.02 R
V
FMENDPAGE
%%EndPage: "100" 99
%%Page: "99" 99
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(Handling Exceptions) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(99) 546.89 60.29 T
72 87.98 558 686.02 R
7 X
V
72 381.99 558 385.02 C
126 383.5 558 383.5 2 L
0.25 H
2 Z
0 X
0 K
N
72 383.5 117 383.5 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(5.19) 93.37 389.68 T
0 F
(Handling Exceptions) 126 389.68 T
2 12 Q
(The) 126 359.99 T
5 F
(Environment) 147.65 359.99 T
2 F
( type is partially opaque; the C declaration contains at least the fol-) 226.8 359.99 T
(lowing:) 126 345.99 T
5 10 Q
(typedef struct Environment {) 126 321.33 T
(/* C */) 486 321.33 T
(exception_type _major;) 144 309.33 T
(...) 144 297.33 T
(} Environment;) 126 285.33 T
2 12 Q
-0.21 (Upon return from an invocation, the) 126 259.99 P
5 F
-0.51 (_major) 300.92 259.99 P
2 F
-0.21 ( \336eld indicates whether the invocation termi-) 344.1 259.99 P
(nated successfully;) 126 245.99 T
5 F
(_major) 219.93 245.99 T
2 F
( can have one of the values) 263.11 245.99 T
5 F
(NO_EXCEPTION) 396 245.99 T
2 F
(,) 482.35 245.99 T
5 F
-0.63 (USER_EXCEPTION) 126 231.99 P
2 F
-0.26 (, or) 226.74 231.99 P
5 F
-0.63 (SYSTEM_EXCEPTION) 245.21 231.99 P
2 F
-0.26 (; if the value is one of the latter two, then) 360.34 231.99 P
(any exception parameters signalled by the object can be accessed.) 126 217.99 T
-0.17 (Three functions are de\336ned on an) 126 191.99 P
5 F
-0.41 (Environment) 288.85 191.99 P
2 F
-0.17 ( structure for accessing exception infor-) 368.01 191.99 P
(mation; their signatures are:) 126 177.99 T
5 10 Q
(extern char *exception_id\050Environment *ev\051;) 126 153.33 T
(/* C */) 486 153.33 T
(extern void *exception_value\050Environment *ev\051;) 126 141.33 T
(extern void exception_free\050Environment *ev\051;) 126 129.33 T
126 434.02 567 440.02 C
0 0 612 792 C
0 8 Q
0 X
0 K
(1. As listed in TBL. 13 on page 98.) 144 428.68 T
72 651.98 558 665.02 C
126 659.04 558 659.04 2 L
0.25 H
2 Z
0 X
0 K
N
72 659.04 117 659.04 2 L
0 Z
N
0 0 612 792 C
72 628.02 558 641.98 C
72 633.99 558 633.99 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
(TBL. 14) 72 645.32 T
0 F
(Argument Passing Cases) 126 645.32 T
1 9 Q
(Case) 132 615.02 T
1 7 Q
(1) 153.48 618.62 T
1 9 Q
(Description) 177 615.02 T
0 F
(1) 146 600.02 T
(The client is responsible for providing storage and managing release of the storage. That is, the) 177 600.02 T
(system allocates storage which must be freed using ORBfree\050\051 for the following types and direc-) 177 589.02 T
(tions: string/out, string/return, sequence/out, sequence/return, array/return, any/inout, any/out,) 177 578.02 T
(any/return. For inout strings and sequences, the out result is constrained by the size of the type) 177 567.02 T
(on input.) 177 556.02 T
(2) 146 541.02 T
-0.2 (The client is responsible for providing the storage used to contain the object reference. When the) 177 541.02 P
(reference is no longer needed, the client uses the release function described in \2448.2.2 on page) 177 530.02 T
(145 to release the storage associated with the reference.) 177 519.02 T
(3) 146 504.02 T
(The ORB provides the storage for these returned parameters and results. The client is responsi-) 177 504.02 T
(ble for releasing the storage using ORBfree\050\051.) 177 493.02 T
(4) 146 478.02 T
-0.38 (The client provides the storage for the structure which contains the description of the sequence or) 177 478.02 P
-0.2 (any and the client manages release of the storage and the descriptor) 177 467.02 P
-0.2 (. The ORB provides storage) 448.1 467.02 P
-0.36 (for the values returned and puts the pointers to this storage in the descriptor structures. The client) 177 456.02 P
(is responsible for releasing this storage using ORBfree\050\051.) 177 445.02 T
126 610.02 567 610.02 2 L
V
0.5 H
0 Z
N
126 440.02 567 440.02 2 L
V
N
52 385.02 54 399.02 R
V
52 281.99 54 327.99 R
V
52 213.99 54 253.99 R
V
52 125.99 54 159.99 R
V
52 612.02 54 621.02 R
V
52 426.02 54 434.02 R
V
52 553.02 54 606.02 R
V
52 516.02 54 547.02 R
V
52 490.02 54 499.02 R
V
52 475.02 54 484.02 R
V
52 442.02 54 451.02 R
V
FMENDPAGE
%%EndPage: "99" 98
%%Page: "98" 98
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(C Language Stub Mapping) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(98) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
2 12 Q
0 X
(A client is responsible for providing storage for all ar) 108 454.02 T
(guments passed as) 363.27 454.02 T
3 F
(in) 454.87 454.02 T
2 F
( ar) 463.62 454.02 T
(guments. A) 475.72 454.02 T
-0.43 (client is responsible for providing storage for all) 108 440.02 P
3 F
-0.39 (out) 339.07 440.02 P
2 F
-0.43 ( ar) 354.36 440.02 P
-0.43 (guments and return results except in) 366.03 440.02 P
(the cases noted in TBL. 13 on page 98 and TBL. 14 on page 99.) 108 426.02 T
0 9 Q
(char) 114 621.02 T
(value) 186 621.02 T
(addr of variable to hold value) 267 621.02 T
(receive value) 411 621.02 T
(octet) 114 606.02 T
(value) 186 606.02 T
(addr of variable to hold value) 267 606.02 T
(receive value) 411 606.02 T
(enumeration) 114 591.02 T
(value) 186 591.02 T
(addr of variable to hold value) 267 591.02 T
(receive value) 411 591.02 T
(object refer-) 114 576.02 T
(ence) 114 565.02 T
(Object value) 186 570.52 T
(addr of variable to hold Object) 267 570.52 T
(receive value of Object) 411 570.52 T
(struct) 114 550.02 T
(addr of struct) 186 550.02 T
(addr of variable to hold struct) 267 550.02 T
(receive value of struct) 411 550.02 T
(union) 114 535.02 T
(addr of struct) 186 535.02 T
(addr of variable to hold struct) 267 535.02 T
(receive value of struct) 411 535.02 T
(string) 114 520.02 T
(addr of 1st char) 186 520.02 T
(addr of \050char *\051 variable) 267 520.02 T
(receive char *) 411 520.02 T
(sequence) 114 505.02 T
(addr of seq.) 186 505.02 T
(struct) 186 494.02 T
(addr of seq. struct) 267 499.52 T
(receive value of seq. struct) 411 499.52 T
(array) 114 479.02 T
(addr of 1st elem) 186 479.02 T
(addr of 1st elem) 267 479.02 T
(receive addr of 1st elem) 411 479.02 T
54 396.98 540 410.02 C
108 404.04 540 404.04 2 L
0.25 H
2 Z
0 X
0 K
N
54 404.04 99 404.04 2 L
0 Z
N
0 0 612 792 C
54 373.02 540 386.98 C
54 378.99 540 378.99 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
(TBL. 13) 54 390.32 T
0 F
(Client Argument Storage Responsibilities) 108 390.32 T
1 9 Q
(T) 114 360.02 T
(ype) 118.83 360.02 T
(Inout Param) 195 360.02 T
(Out Param) 267 360.02 T
(Return Result) 339 360.02 T
0 F
(short) 114 345.02 T
(1) 222.5 345.02 T
(1) 294.5 345.02 T
(1) 366.5 345.02 T
(long) 114 330.02 T
(1) 222.5 330.02 T
(1) 294.5 330.02 T
(1) 366.5 330.02 T
(unsigned short) 114 315.02 T
(1) 222.5 315.02 T
(1) 294.5 315.02 T
(1) 366.5 315.02 T
(unsigned long) 114 300.02 T
(1) 222.5 300.02 T
(1) 294.5 300.02 T
(1) 366.5 300.02 T
(\337oat) 114 285.02 T
(1) 222.5 285.02 T
(1) 294.5 285.02 T
(1) 366.5 285.02 T
(double) 114 270.02 T
(1) 222.5 270.02 T
(1) 294.5 270.02 T
(1) 366.5 270.02 T
(boolean) 114 255.02 T
(1) 222.5 255.02 T
(1) 294.5 255.02 T
(1) 366.5 255.02 T
(char) 114 240.02 T
(1) 222.5 240.02 T
(1) 294.5 240.02 T
(1) 366.5 240.02 T
(octet) 114 225.02 T
(1) 222.5 225.02 T
(1) 294.5 225.02 T
(1) 366.5 225.02 T
(enumeration) 114 210.02 T
(1) 222.5 210.02 T
(1) 294.5 210.02 T
(1) 366.5 210.02 T
(object reference) 114 195.02 T
(2) 222.5 195.02 T
(2) 294.5 195.02 T
(2) 366.5 195.02 T
(struct) 114 180.02 T
(1) 222.5 180.02 T
(1) 294.5 180.02 T
(1) 366.5 180.02 T
(union) 114 165.02 T
(1) 222.5 165.02 T
(1) 294.5 165.02 T
(1) 366.5 165.02 T
(string) 114 150.02 T
(1) 222.5 150.02 T
(3) 294.5 150.02 T
(3) 366.5 150.02 T
(sequence) 114 135.02 T
(1) 222.5 135.02 T
(4) 294.5 135.02 T
(4) 366.5 135.02 T
(array) 114 120.02 T
(1) 222.5 120.02 T
(1) 294.5 120.02 T
(3) 366.5 120.02 T
(any) 114 105.02 T
(4) 222.5 105.02 T
(4) 294.5 105.02 T
(4) 366.5 105.02 T
54 672.98 540 686.02 C
108 680.04 540 680.04 2 L
0.25 H
2 Z
0 X
0 K
N
54 680.04 99 680.04 2 L
0 Z
N
0 0 612 792 C
54 649.02 540 662.98 C
54 654.99 540 654.99 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
(TBL. 12) 54 666.32 T
0 F
(Argument and Result Passing  \050Continued\051) 108 666.32 T
1 9 Q
(Data T) 114 636.02 T
(ype) 140.8 636.02 T
(Pass In) 186 636.02 T
(Pass Out/Inout) 267 636.02 T
(Return Result) 411 636.02 T
108 631.02 531 631.02 2 L
V
0.5 H
0 Z
N
108 474.02 531 474.02 2 L
V
N
108 355.02 405 355.02 2 L
V
N
108 100.02 405 100.02 2 L
V
N
34 422.02 36 462.02 R
V
34 618.02 36 627.02 R
V
34 618.02 36 627.02 R
V
34 618.02 36 627.02 R
V
34 603.02 36 612.02 R
V
34 603.02 36 612.02 R
V
34 603.02 36 612.02 R
V
34 588.02 36 597.02 R
V
34 588.02 36 597.02 R
V
34 588.02 36 597.02 R
V
34 562.02 36 571.02 R
V
34 567.52 36 576.52 R
V
34 567.52 36 576.52 R
V
34 567.52 36 576.52 R
V
34 547.02 36 556.02 R
V
34 547.02 36 556.02 R
V
34 547.02 36 556.02 R
V
34 532.02 36 541.02 R
V
34 532.02 36 541.02 R
V
34 532.02 36 541.02 R
V
34 517.02 36 526.02 R
V
34 517.02 36 526.02 R
V
34 517.02 36 526.02 R
V
34 491.02 36 511.02 R
V
34 496.52 36 505.52 R
V
34 496.52 36 505.52 R
V
34 476.02 36 485.02 R
V
34 476.02 36 485.02 R
V
34 476.02 36 485.02 R
V
34 357.02 36 366.02 R
V
34 357.02 36 366.02 R
V
34 342.02 36 351.02 R
V
34 327.02 36 336.02 R
V
34 312.02 36 321.02 R
V
34 297.02 36 306.02 R
V
34 282.02 36 291.02 R
V
34 267.02 36 276.02 R
V
34 252.02 36 261.02 R
V
34 237.02 36 246.02 R
V
34 222.02 36 231.02 R
V
34 207.02 36 216.02 R
V
34 192.02 36 201.02 R
V
34 177.02 36 186.02 R
V
34 177.02 36 186.02 R
V
34 162.02 36 171.02 R
V
34 162.02 36 171.02 R
V
34 147.02 36 156.02 R
V
34 147.02 36 156.02 R
V
34 132.02 36 141.02 R
V
34 132.02 36 141.02 R
V
34 117.02 36 126.02 R
V
34 117.02 36 126.02 R
V
34 102.02 36 111.02 R
V
FMENDPAGE
%%EndPage: "98" 97
%%Page: "97" 97
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(Summary of Argument/Result Passing) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(97) 546.89 60.29 T
72 87.98 558 686.02 R
7 X
V
2 12 Q
0 X
(Consider the following interface:) 126 678.02 T
3 10 Q
(interface X {) 126 653.35 T
(struct y {) 144 641.35 T
(long a;) 162 629.35 T
(\337oat b;) 162 617.35 T
(};) 144 605.35 T
(long op1\050\051;) 144 581.35 T
(y op2\050\051;) 144 569.35 T
(}) 126 557.35 T
2 12 Q
(The following C declarations ensue from processing the speci\336cation:) 126 532.02 T
5 10 Q
(typedef Object X;) 126 507.35 T
(/* C */) 504 507.35 T
(typedef struct X_y {) 126 495.35 T
(long a;) 144 483.35 T
(f) 144 471.35 T
(loat b;) 150 471.35 T
(} X_y;) 126 459.35 T
(extern long X_op1\050X object, Environment *ev\051;) 126 435.35 T
(extern X_y X_op2\050X object, Environment *ev\051;) 126 423.35 T
2 12 Q
(For operation results of type unbounded) 126 398.02 T
3 F
(string) 321.2 398.02 T
2 F
(, unbounded) 348.53 398.02 T
3 F
(sequence) 410.82 398.02 T
2 F
(, or) 456.19 398.02 T
3 F
(array) 475.18 398.02 T
2 F
(, the ORB) 498.45 398.02 T
-0.02 (will allocate storage for the return value. The client may use and retain that storage inde\336-) 126 384.02 P
(nitely) 126 370.02 T
(, and must indicate when the value is no longer needed by calling the procedure) 152.54 370.02 T
5 F
(ORBfree\050\051) 126 356.02 T
2 F
( described in \2445.16 on page 95.) 190.76 356.02 T
72 309.99 558 313.02 C
126 311.5 558 311.5 2 L
0.25 H
2 Z
0 X
0 K
N
72 311.5 117 311.5 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(5.18) 93.37 317.68 T
0 F
(Summary of Argument/Result Passing) 126 317.68 T
2 12 Q
-0.4 (TBL. 12 on page 97 summarizes what a client passes as an ar) 126 291.99 P
-0.4 (gument to a stub and receives) 415.15 291.99 P
(as a result.) 126 277.99 T
72 248.96 558 261.99 C
126 256.02 558 256.02 2 L
0.25 H
2 Z
0 X
0 K
N
72 256.02 117 256.02 2 L
0 Z
N
0 0 612 792 C
72 224.99 558 238.96 C
72 230.97 558 230.97 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
(TBL. 12) 72 242.29 T
0 F
(Argument and Result Passing) 126 242.29 T
1 9 Q
(Data T) 132 211.99 T
(ype) 158.8 211.99 T
(Pass In) 204 211.99 T
(Pass Out/Inout) 285 211.99 T
(Return Result) 429 211.99 T
0 F
(short) 132 196.99 T
(value) 204 196.99 T
(addr of variable to hold value) 285 196.99 T
(receive value) 429 196.99 T
(long) 132 181.99 T
(value) 204 181.99 T
(addr of variable to hold value) 285 181.99 T
(receive value) 429 181.99 T
(unsigned short) 132 166.99 T
(value) 204 166.99 T
(addr of variable to hold value) 285 166.99 T
(receive value) 429 166.99 T
(unsigned long) 132 151.99 T
(value) 204 151.99 T
(addr of variable to hold value) 285 151.99 T
(receive value) 429 151.99 T
(\337oat) 132 136.99 T
(value) 204 136.99 T
(addr of variable to hold value) 285 136.99 T
(receive value) 429 136.99 T
(double) 132 121.99 T
(value) 204 121.99 T
(addr of variable to hold value) 285 121.99 T
(receive value) 429 121.99 T
(boolean) 132 106.99 T
(value) 204 106.99 T
(addr of variable to hold value) 285 106.99 T
(receive value) 429 106.99 T
126 206.99 549 206.99 2 L
V
0.5 H
0 Z
N
126 101.99 549 101.99 2 L
V
N
52 504.02 54 514.02 R
V
52 273.99 54 442.02 R
V
52 208.99 54 217.99 R
V
52 193.99 54 202.99 R
V
52 193.99 54 202.99 R
V
52 193.99 54 202.99 R
V
52 178.99 54 187.99 R
V
52 178.99 54 187.99 R
V
52 178.99 54 187.99 R
V
52 163.99 54 172.99 R
V
52 163.99 54 172.99 R
V
52 163.99 54 172.99 R
V
52 148.99 54 157.99 R
V
52 148.99 54 157.99 R
V
52 148.99 54 157.99 R
V
52 133.99 54 142.99 R
V
52 133.99 54 142.99 R
V
52 133.99 54 142.99 R
V
52 118.99 54 127.99 R
V
52 118.99 54 127.99 R
V
52 118.99 54 127.99 R
V
52 103.99 54 112.99 R
V
52 103.99 54 112.99 R
V
52 103.99 54 112.99 R
V
FMENDPAGE
%%EndPage: "97" 96
%%Page: "96" 96
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(C Language Stub Mapping) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(96) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
2 12 Q
0 X
(Client code for invoking the) 108 678.02 T
3 F
(bar) 246.25 678.02 T
2 F
( operation would look like:) 261.55 678.02 T
5 10 Q
(foo object;) 108 653.35 T
(/* C */) 486 653.35 T
(foo_Vector x;) 108 641.35 T
(long y;) 108 629.35 T
(Environment ev;) 108 617.35 T
(/* code to bind object to instance of foo */) 108 593.35 T
(foo_bar\050object, &ev, x, &y\051;) 108 569.35 T
2 12 Q
(For) 108 544.02 T
3 F
(out) 127.66 544.02 T
2 F
( parameters of type unbounded) 142.95 544.02 T
3 F
(string) 294.5 544.02 T
2 F
( or unbounded) 321.82 544.02 T
3 F
(sequence) 394.1 544.02 T
2 F
(, the ORB will allo-) 439.47 544.02 T
(cate storage for the output value. The client may use and retain that storage inde\336nitely) 108 530.02 T
(,) 525.25 530.02 T
-0.23 (and must indicate when the value is no longer needed by calling the procedure) 108 516.02 P
5 F
-0.55 (ORBfree) 483.86 516.02 P
2 F
-0.23 (,) 534.23 516.02 P
(whose signature is:) 108 502.02 T
5 10 Q
(extern void ORBfree \050void *storage\051;) 108 483.35 T
(/* C */) 486 483.35 T
2 12 Q
(The parameter to) 108 458.02 T
5 F
(ORBfree\050\051) 192.93 458.02 T
2 F
( is the pointer used to return the) 257.69 458.02 T
3 F
(out) 412.92 458.02 T
2 F
( parameter) 428.21 458.02 T
(.) 478.5 458.02 T
5 F
-1.3 (ORBfree\050\051) 108 444.02 P
2 F
-0.54 ( releases the ORB-allocated storage occupied by the) 172.76 444.02 P
3 F
-0.49 (out) 421.56 444.02 P
2 F
-0.54 ( parameter) 436.85 444.02 P
-0.54 (, including) 486.78 444.02 P
(storage indirectly referenced, such as in the case of a sequence of strings. If a client does) 108 430.02 T
(not call) 108 416.02 T
5 F
(ORBfree\050\051) 146.64 416.02 T
2 F
( before reusing the pointers that reference the) 211.41 416.02 T
3 F
(out) 431.88 416.02 T
2 F
( parameters, that) 447.17 416.02 T
(storage might be wasted.) 108 402.02 T
54 355.99 540 359.02 C
108 357.5 540 357.5 2 L
0.25 H
2 Z
0 X
0 K
N
54 357.5 99 357.5 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(5.17) 75.37 363.68 T
0 F
(Return Result Passing Considerations) 108 363.68 T
2 12 Q
(When an operation is de\336ned to return a non-void return result, the following rules hold:) 108 337.99 T
1 10 Q
(1.) 108 317.99 T
2 12 Q
(If the return result is one of the types) 126 317.99 T
3 F
(\337oat) 306.2 317.99 T
2 F
(,) 326.96 317.99 T
3 F
(double) 332.96 317.99 T
2 F
(,) 365.2 317.99 T
3 F
(long) 371.19 317.99 T
2 F
(,) 391.95 317.99 T
3 F
(short) 397.95 317.99 T
2 F
(,) 422.54 317.99 T
3 F
(unsigned long) 428.53 317.99 T
2 F
(,) 495.74 317.99 T
3 F
(unsigned short) 126 303.99 T
2 F
(,) 197.04 303.99 T
3 F
(char) 203.03 303.99 T
2 F
(,) 223.33 303.99 T
3 F
(boolean) 229.32 303.99 T
2 F
(,) 267.03 303.99 T
3 F
(octet) 273.03 303.99 T
2 F
(,) 296.52 303.99 T
3 F
(Object) 302.52 303.99 T
2 F
(, or an) 333.13 303.99 T
3 F
(enumeration) 366.43 303.99 T
2 F
(, then the value is) 425.45 303.99 T
(returned as the operation result.) 126 289.99 T
1 10 Q
(2.) 108 272.99 T
2 12 Q
-0.12 (If the return result is one of the types) 126 272.99 P
3 F
-0.1 (struct) 305.16 272.99 P
2 F
-0.12 (,) 332.48 272.99 P
3 F
-0.1 (union) 338.36 272.99 P
2 F
-0.12 (,) 365.14 272.99 P
3 F
-0.1 (sequence) 371.02 272.99 P
2 F
-0.12 (, or) 416.39 272.99 P
3 F
-0.1 (any) 435.14 272.99 P
2 F
-0.12 (, then the value of) 451.31 272.99 P
(the C struct representing that type is returned as the operation result.) 126 258.99 T
1 10 Q
(3.) 108 241.99 T
2 12 Q
(If the return result is of type) 126 241.99 T
3 F
(string) 263.56 241.99 T
2 F
(, then a pointer to the \336rst character of the string is) 290.89 241.99 T
(returned as the operation result.) 126 227.99 T
1 10 Q
(4.) 108 210.99 T
2 12 Q
(If the return result is of type) 126 210.99 T
3 F
(array) 263.56 210.99 T
2 F
(, then a pointer to the \336rst element of the array is) 286.84 210.99 T
(returned as the operation result.) 126 196.99 T
34 638.02 36 660.02 R
V
34 614.02 36 624.02 R
V
34 590.02 36 600.02 R
V
34 359.02 36 576.02 R
V
34 299.99 36 311.99 R
V
34 192.99 36 280.99 R
V
FMENDPAGE
%%EndPage: "96" 95
%%Page: "95" 95
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(Implicit Arguments to Operations) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(95) 546.89 60.29 T
72 87.98 558 686.02 R
7 X
V
72 668.99 558 672.02 C
126 670.5 558 670.5 2 L
0.25 H
2 Z
0 X
0 K
N
72 670.5 117 670.5 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(5.14) 93.37 676.68 T
0 F
(Implicit Arguments to Operations) 126 676.68 T
2 12 Q
(From the point of view of the C programmer) 126 650.99 T
(, all operations declared in an interface have) 340.05 650.99 T
(additional leading parameters preceding the operation-speci\336c parameters:) 126 636.99 T
1 10 Q
(1.) 126 616.99 T
2 12 Q
(The \336rst parameter to each operation is an) 144 616.99 T
5 F
(Object) 349.17 616.99 T
2 F
( input parameter; this parameter) 392.35 616.99 T
(designates the object to process the request.) 144 602.99 T
1 10 Q
(2.) 126 585.99 T
2 12 Q
(The second parameter to each operation is an \050) 144 585.99 T
5 F
(Environment *) 367.81 585.99 T
2 F
(\051 output parameter;) 461.36 585.99 T
(this parameter permits the return of exception information.) 144 571.99 T
1 10 Q
(3.) 126 554.99 T
2 12 Q
(If an operation in an IDL speci\336cation has a context speci\336cation, then a) 144 554.99 T
5 F
(Context) 495.07 554.99 T
2 F
(input parameter follows the \050) 144 540.99 T
5 F
(Environment *) 283.23 540.99 T
2 F
(\051 parameter and precedes any opera-) 376.78 540.99 T
(tion-speci\336c ar) 144 526.99 T
(guments.) 215.4 526.99 T
-0.2 (As described above, the) 126 500.99 P
5 F
-0.47 (Object) 242.78 500.99 P
2 F
-0.2 ( type is an opaque type. The) 285.96 500.99 P
5 F
-0.47 (Environment) 422.48 500.99 P
2 F
-0.2 ( type is par-) 501.64 500.99 P
(tially opaque; \2445.19 on page 99 provides a description of the non-opaque portion of the) 126 486.99 T
-0.01 (exception structure and an example of how to handle exceptions in client code. The) 126 472.99 P
5 F
-0.03 (Con-) 529.22 472.99 P
-1.07 (text) 126 458.99 P
2 F
-0.45 ( type is opaque; see Chapter 6 for more information on how to create and manipulate) 154.78 458.99 P
(context objects.) 126 444.99 T
72 398.97 558 401.99 C
126 400.48 558 400.48 2 L
0.25 H
2 Z
0 X
0 K
N
72 400.48 117 400.48 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(5.15) 93.37 406.66 T
0 F
(Interpretation of Functions with Empty Argument Lists) 126 406.66 T
2 12 Q
(A function declared with an empty ar) 126 380.97 T
(gument list is de\336ned to take) 304.98 380.97 T
4 F
(no) 446.24 380.97 T
2 F
( operation-speci\336c) 458.23 380.97 T
(ar) 126 366.97 T
(guments.) 135.1 366.97 T
72 320.94 558 323.97 C
126 322.46 558 322.46 2 L
0.25 H
2 Z
0 X
0 K
N
72 322.46 117 322.46 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(5.16) 93.37 328.64 T
0 F
(Argument Passing Considerations) 126 328.64 T
2 12 Q
-0.05 (For all IDL types \050except arrays\051, if the IDL signature speci\336es that an ar) 126 302.94 P
-0.05 (gument is an) 475.59 302.94 P
3 F
-0.04 (out) 539.75 302.94 P
2 F
(or) 126 288.94 T
3 F
(inout) 138.99 288.94 T
2 F
( parameter) 163.02 288.94 T
(, then the caller must always pass the address of a variable of that type) 213.49 288.94 T
(\050or the value of a pointer to that type\051; the callee must dereference the parameter to get to) 126 274.94 T
(the type. For arrays, the caller must pass the address of the \336rst element of the array) 126 260.94 T
(.) 526.92 260.94 T
-0.28 (For) 126 234.94 P
3 F
-0.25 (in) 145.38 234.94 P
2 F
-0.28 ( parameters, the value of the parameter must be passed for all of the basic types, enu-) 154.12 234.94 P
(meration types, and object references. For arrays, the address of the \336rst element of the) 126 220.94 T
(array must be passed. For all other structured types, the address of a variable of that type) 126 206.94 T
(must be passed.) 126 192.94 T
(Consider the following IDL speci\336cation:) 126 166.94 T
3 10 Q
(interface foo {) 126 142.28 T
(typedef long V) 144 130.28 T
(ector[25];) 200.02 130.28 T
(void bar\050out V) 144 106.28 T
(ector x, out long y\051;) 198.65 106.28 T
(};) 126 94.28 T
52 612.99 54 658.99 R
V
52 581.99 54 593.99 R
V
52 536.99 54 562.99 R
V
52 454.99 54 508.99 R
V
52 376.97 54 388.97 R
V
52 102.94 54 112.94 R
V
FMENDPAGE
%%EndPage: "95" 94
%%Page: "94" 94
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(C Language Stub Mapping) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(94) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
5 12 Q
0 X
(ORBfree\050\051) 108 678.02 T
2 F
(. If the pointer is non-NULL when a call is made, it is overwritten with a) 172.76 678.02 T
(pointer to the storage allocated by the stub.) 108 664.02 T
(Prior to passing) 108 638.02 T
5 F
(&s1) 186.29 638.02 T
2 F
( or) 207.88 638.02 T
5 F
(&s2) 223.87 638.02 T
2 F
( as an) 245.46 638.02 T
3 F
(inout) 275.76 638.02 T
2 F
( parameter) 299.8 638.02 T
(, the programmer must assign the) 350.27 638.02 T
(address of a character buf) 108 624.02 T
(fer containing a 0-byte terminated array to the variable. Upon) 230.99 624.02 T
(successful return from the invocation, the returned 0-byte terminated array is copied into) 108 610.02 T
-0.31 (the same buf) 108 596.02 P
-0.31 (fer) 168.46 596.02 P
-0.31 (. If it was a bounded string, then the size of the returned string is limited by) 181.11 596.02 P
(the declared size of the string type; if it was an unbounded string, then the size of the) 108 582.02 T
(returned string is limited by the size of the string passed as input. Due to this restriction,) 108 568.02 T
(use of) 108 554.02 T
3 F
(inout) 139.97 554.02 T
2 F
( string parameters is deprecated.) 164.01 554.02 T
54 507.99 540 511.02 C
108 509.5 540 509.5 2 L
0.25 H
2 Z
0 X
0 K
N
54 509.5 99 509.5 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(5.12) 75.37 515.68 T
0 F
(Mapping for Arrays) 108 515.68 T
2 12 Q
(IDL arrays map directly to C arrays. All array indices run from 0 to <) 108 489.99 T
5 F
(size) 441.51 489.99 T
2 F
( - 1>.) 470.3 489.99 T
-0.33 (If the return result to an operation is an array) 108 463.99 P
-0.33 (, the array storage is dynamically allocated by) 319.11 463.99 P
-0.08 (the stub; a pointer to the \336rst element of the dynamically allocated array is returned as the) 108 449.99 P
-0.42 (value of the client stub function. When the data is no longer needed, it is the programmer) 108 435.99 P
-0.42 (\325) 529.42 435.99 P
-0.42 (s) 532.76 435.99 P
(responsibility to return the dynamically allocated storage by calling) 108 421.99 T
5 F
(ORBfree\050\051) 434.78 421.99 T
2 F
(.) 499.55 421.99 T
54 375.97 540 378.99 C
108 377.48 540 377.48 2 L
0.25 H
2 Z
0 X
0 K
N
54 377.48 99 377.48 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(5.13) 75.37 383.66 T
0 F
(Mapping for Exception T) 108 383.66 T
(ypes) 258.88 383.66 T
2 12 Q
-0.39 (Each de\336ned exception type is de\336ned as a struct tag and a typedef with the C global name) 108 357.97 P
-0.34 (for the exception. An identi\336er for the exception, in string literal form, is also) 108 343.97 P
5 F
-0.82 (#def) 477.98 343.97 P
-0.82 (ine) 506.76 343.97 P
2 F
-0.34 (d.) 528.35 343.97 P
(For example:) 108 329.97 T
3 10 Q
(exception foo {) 108 305.3 T
(long dummy;) 126 293.3 T
(};) 108 281.3 T
2 12 Q
(yields the following C declarations:) 108 255.97 T
5 10 Q
(typedef struct foo {) 108 231.3 T
(/* C */) 486 231.3 T
(long dummy;) 126 219.3 T
(} foo;) 108 207.3 T
(#def) 108 195.3 T
(ine ex_foo <unique identif) 131.99 195.3 T
(ier for exception>) 287.9 195.3 T
2 12 Q
(The identi\336er for the exception uniquely identi\336es this exception type. For example, it) 108 169.97 T
(could be the Interface Repository identi\336er for the exception \050see \2447.5.10 on page 138\051.) 108 155.97 T
34 674.02 36 686.02 R
V
34 634.02 36 646.02 R
V
34 485.99 36 497.99 R
V
34 417.99 36 429.99 R
V
34 339.97 36 351.97 R
V
34 227.97 36 237.97 R
V
34 151.97 36 201.97 R
V
FMENDPAGE
%%EndPage: "94" 93
%%Page: "93" 93
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(Mapping for Strings) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(93) 546.89 60.29 T
72 87.98 558 686.02 R
7 X
V
3 F
0 X
(sequence<sequence<long>>) 126 679.35 T
2 12 Q
(generates a type of) 126 654.02 T
5 10 Q
(_IDL_SEQUENCE_sequence_long) 126 635.35 T
2 12 Q
(These generated type names may be used to declare instances of a sequence type.) 126 610.02 T
72 563.99 558 567.02 C
126 565.5 558 565.5 2 L
0.25 H
2 Z
0 X
0 K
N
72 565.5 117 565.5 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(5.1) 94.14 571.68 T
(1) 112.82 571.68 T
0 F
(Mapping for Strings) 126 571.68 T
2 12 Q
(IDL strings are mapped to 0-byte terminated character arrays; i.e. the length of the string) 126 545.99 T
(is encoded in the character array itself through the placement of the 0-byte. Note that the) 126 531.99 T
-0.13 (storage for C strings is one byte longer than the stated IDL bound. Consider the following) 126 517.99 P
(IDL declarations:) 126 503.99 T
3 10 Q
(typedef string<10> sten;) 126 479.33 T
(typedef string sinf;) 126 467.33 T
2 12 Q
(In C, this is converted to:) 126 441.99 T
5 10 Q
(typedef char *sten;) 126 417.33 T
(/* C */) 504 417.33 T
(typedef char *sinf;) 126 405.33 T
2 12 Q
(Instances of these types are declared as follows:) 126 379.99 T
5 10 Q
(sten s1 = NULL;) 126 355.33 T
(/* C */) 504 355.33 T
(sinf s2 = NULL;) 126 343.33 T
2 12 Q
(T) 126 317.99 T
(wo string types are the same type if their size ar) 132.49 317.99 T
(guments are identical. For example,) 361.43 317.99 T
5 10 Q
(const long SIZE = 25;) 126 293.33 T
(/* C */) 504 293.33 T
(typedef string<SIZE> sx;) 126 269.33 T
(typedef string<25> sy;) 126 257.33 T
2 12 Q
(declares) 126 231.99 T
3 F
(sx) 168.29 231.99 T
2 F
( and) 179.23 231.99 T
3 F
(sy) 202.54 231.99 T
2 F
( to be of the same type.) 213.48 231.99 T
-0.21 (Prior to passing) 126 205.99 P
5 F
-0.5 (s1) 203.67 205.99 P
2 F
-0.21 ( or) 218.06 205.99 P
5 F
-0.5 (s2) 233.63 205.99 P
2 F
-0.21 ( as an) 248.02 205.99 P
3 F
-0.19 (in) 277.7 205.99 P
2 F
-0.21 ( parameter) 286.45 205.99 P
-0.21 (, the programmer must assign the address of a) 336.7 205.99 P
(character buf) 126 191.99 T
(fer containing a 0-byte terminated string to the variable.) 188.71 191.99 T
(Prior to passing) 126 165.99 T
5 F
(&s1) 204.29 165.99 T
2 F
( or) 225.88 165.99 T
5 F
(&s2) 241.87 165.99 T
2 F
( as an) 263.46 165.99 T
3 F
(out) 293.76 165.99 T
2 F
( parameter \050or receiving an) 309.05 165.99 T
5 F
(sten) 441.93 165.99 T
2 F
( or) 470.71 165.99 T
5 F
(sinf) 486.7 165.99 T
2 F
( as the) 515.49 165.99 T
(return result\051, the programmer does nothing. The client stub will allocate storage for the) 126 151.99 T
(returned buf) 126 137.99 T
(fer; for bounded strings, it allocates a buf) 184.73 137.99 T
(fer of the speci\336ed size, while for) 382.37 137.99 T
(unbounded strings, it allocates a buf) 126 123.99 T
(fer big enough to hold the returned string. Upon suc-) 299.01 123.99 T
(cessful return from the invocation, the character pointer will contain the address of the) 126 109.99 T
(allocated buf) 126 95.99 T
(fer) 188.07 95.99 T
(. The client is responsible for freeing the allocated storage using) 200.72 95.99 T
52 650.02 54 686.02 R
V
52 513.99 54 539.99 R
V
52 463.99 54 473.99 R
V
52 413.99 54 423.99 R
V
52 351.99 54 361.99 R
V
52 201.99 54 239.99 R
V
52 161.99 54 173.99 R
V
52 133.99 54 145.99 R
V
FMENDPAGE
%%EndPage: "93" 92
%%Page: "92" 92
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(C Language Stub Mapping) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(92) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
2 12 Q
0 X
(T) 108 678.02 T
(wo sequence types are the same type if their sequence element type and size ar) 114.49 678.02 T
(guments) 491.96 678.02 T
(are identical. For example,) 108 664.02 T
3 10 Q
(const long SIZE = 25;) 108 639.35 T
(typedef long seqtype;) 108 627.35 T
(typedef sequence<long, SIZE> s1;) 108 603.35 T
(typedef sequence<long, 25> s2;) 108 591.35 T
(typedef sequence<seqtype, SIZE> s3;) 108 579.35 T
(typedef sequence<seqtype, 25> s4;) 108 567.35 T
2 12 Q
(declares) 108 542.02 T
3 F
(s1) 150.29 542.02 T
2 F
(,) 161.23 542.02 T
3 F
(s2) 167.22 542.02 T
2 F
(,) 178.16 542.02 T
3 F
(s3) 184.16 542.02 T
2 F
(, and) 195.1 542.02 T
3 F
(s4) 221.41 542.02 T
2 F
( to be of the same type.) 232.35 542.02 T
(The IDL type) 108 516.02 T
3 10 Q
(sequence<type,size>) 108 497.35 T
2 12 Q
(maps to) 108 472.02 T
5 10 Q
(#ifndef _IDL_SEQUENCE_type_def) 108 447.35 T
(ined) 287.9 447.35 T
(/* C */) 486 447.35 T
(#def) 108 435.35 T
(ine _IDL_SEQUENCE_type_def) 131.99 435.35 T
(ined) 287.9 435.35 T
(typedef struct {) 108 423.35 T
(unsigned long _maximum;) 126 411.35 T
(unsigned long _length;) 126 399.35 T
(type *_buffer;) 126 387.35 T
(} _IDL_SEQUENCE_type;) 108 375.35 T
(#endif) 108 363.35 T
(/* _IDL_SEQUENCE_type_def) 162 363.35 T
(ined */) 311.92 363.35 T
2 12 Q
-0.27 (The) 108 338.02 P
5 F
-0.64 (ifdef) 129.38 338.02 P
2 F
-0.27 (\325) 166.02 338.02 P
-0.27 (s are needed to prevent duplicate de\336nition where the same type is used more) 169.35 338.02 P
(than once. The type name used in the C mapping is the type name of the ef) 108 324.02 T
(fective type,) 466.53 324.02 T
(e.g. in) 108 310.02 T
5 10 Q
(typedef long FRED;) 108 285.35 T
(/* C */) 486 285.35 T
(typedef sequence<FRED,10> FredSeq;) 108 273.35 T
2 12 Q
(the sequence is mapped onto) 108 248.02 T
5 F
(struct { ... } _IDL_SEQUENCE_long;) 248.9 248.02 T
2 F
(If the) 108 222.02 T
3 F
(type) 136.64 222.02 T
2 F
( in) 156.86 222.02 T
3 10 Q
(sequence<type,size>) 108 203.35 T
2 12 Q
(consists of more than one identi\336er \050e.g. unsigned long\051, then the generated type name) 108 178.02 T
(consists of the string \322_IDL_SEQUENCE_\323 concatenated to the string consisting of the) 108 164.02 T
(concatenation of each identi\336er separated by underscores \050e.g. \322unsigned_long\323\051.) 108 150.02 T
(If the) 108 124.02 T
3 F
(type) 136.64 124.02 T
2 F
( is a) 156.86 124.02 T
3 F
(string) 179.18 124.02 T
2 F
(, the string \322string\323 is used to generate the type name. If the) 206.5 124.02 T
3 F
(type) 495.29 124.02 T
2 F
( is a) 515.51 124.02 T
3 F
(sequence) 108 110.02 T
2 F
(, the string \322sequence\323 is used to generate the type name, recursively) 153.37 110.02 T
(. For exam-) 482.66 110.02 T
(ple) 108 96.02 T
34 538.02 36 550.02 R
V
34 432.02 36 454.02 R
V
34 334.02 36 418.02 R
V
34 282.02 36 292.02 R
V
34 92.02 36 256.02 R
V
FMENDPAGE
%%EndPage: "92" 91
%%Page: "91" 91
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(Mapping for Sequence T) 126 736.18 T
(ypes) 223.92 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(91) 546.89 60.29 T
72 87.98 558 686.02 R
7 X
V
72 668.99 558 672.02 C
126 670.5 558 670.5 2 L
0.25 H
2 Z
0 X
0 K
N
72 670.5 117 670.5 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(5.10) 93.37 676.68 T
0 F
(Mapping for Sequence T) 126 676.68 T
(ypes) 278.45 676.68 T
2 12 Q
(The IDL data type) 126 650.99 T
3 F
(sequence) 217.26 650.99 T
2 F
( permits passing of unbounded arrays between objects. Con-) 262.63 650.99 T
(sider the following IDL declaration:) 126 636.99 T
3 10 Q
(typedef sequence<long,10> vec10;) 126 618.33 T
2 12 Q
(In C, this is converted to:) 126 592.99 T
5 10 Q
(typedef struct {) 126 568.33 T
(/* C */) 504 568.33 T
(unsigned long _maximum;) 144 556.33 T
(unsigned long _length;) 144 544.33 T
(long *_buffer;) 144 532.33 T
(} vec10;) 126 520.33 T
2 12 Q
(An instance of this type is declared as follows:) 126 494.99 T
5 10 Q
(vec10 x = {10L, 0L, \050long *\051NULL\051;) 126 476.33 T
(/* C */) 504 476.33 T
2 12 Q
-0.18 (Prior to passing) 126 450.99 P
5 F
-0.43 (x) 203.75 450.99 P
2 F
-0.18 ( as an) 210.95 450.99 P
5 F
-0.43 (in) 240.71 450.99 P
2 F
-0.18 ( parameter) 255.1 450.99 P
-0.18 (, the programmer must set the) 305.39 450.99 P
5 F
-0.43 (_buffer) 450.54 450.99 P
2 F
-0.18 ( member to) 500.91 450.99 P
(point to a) 126 436.99 T
5 F
(long) 174.31 436.99 T
2 F
( array of 10 elements, and must set the) 203.09 436.99 T
5 F
(_length) 390.96 436.99 T
2 F
( member to the actual) 441.33 436.99 T
(number of elements to transmit.) 126 422.99 T
(Prior to passing) 126 396.99 T
5 F
(&x) 204.29 396.99 T
2 F
( as an) 218.68 396.99 T
5 F
(out) 248.99 396.99 T
2 F
( parameter \050or receiving a) 270.58 396.99 T
5 F
(vec10) 397.46 396.99 T
2 F
( as the function return\051,) 433.44 396.99 T
-0.18 (the programmer does nothing. The client stub will allocate storage for the returned buf) 126 382.99 P
-0.18 (fer;) 538.53 382.99 P
(for bounded sequences, it allocates a buf) 126 368.99 T
(fer of the speci\336ed size, while for unbounded) 320.63 368.99 T
(sequences, it allocates a buf) 126 354.99 T
(fer big enough to hold what was returned by the object. Upon) 259.34 354.99 T
-0.21 (successful return from the invocation, the) 126 340.99 P
5 F
-0.51 (_maximum) 326.91 340.99 P
2 F
-0.21 ( member will contain the size of the) 384.48 340.99 P
(allocated array) 126 326.99 T
(, the) 196.15 326.99 T
5 F
(_buffer) 219.8 326.99 T
2 F
( member will point at the allocated storage, and the) 270.17 326.99 T
5 F
-0.2 (_length) 126 312.99 P
2 F
-0.08 ( member will contain the number of values that were returned in the) 176.37 312.99 P
5 F
-0.2 (_buffer) 504.71 312.99 P
2 F
(member) 126 298.99 T
(. The client is responsible for freeing the allocated storage using) 164.64 298.99 T
5 F
(ORBfree\050\051) 475.08 298.99 T
2 F
(.) 539.84 298.99 T
-0.16 (The current contents of the) 126 284.99 P
5 F
-0.39 (_buffer) 257.42 284.99 P
2 F
-0.16 ( member is overwritten with a pointer to the storage) 307.79 284.99 P
(allocated by the stub.) 126 270.99 T
(Prior to passing) 126 244.99 T
5 F
(&x) 204.29 244.99 T
2 F
( as an) 218.68 244.99 T
3 F
(inout) 248.99 244.99 T
2 F
( parameter) 273.03 244.99 T
(, the programmer must set the) 323.49 244.99 T
5 F
(_buffer) 469.73 244.99 T
2 F
( mem-) 520.1 244.99 T
-0.2 (ber to point to a) 126 230.99 P
5 F
-0.47 (long) 203.97 230.99 P
2 F
-0.2 ( array of 10 elements. For an unbounded sequence, the programmer) 232.75 230.99 P
4 F
(must) 126 216.99 T
2 F
( set the) 148.66 216.99 T
5 F
(_maximum) 185.63 216.99 T
2 F
( member to the actual size of the array) 243.2 216.99 T
(. The) 426.27 216.99 T
5 F
(_length) 453.91 216.99 T
2 F
( member) 504.28 216.99 T
-0 (must be set to the actual number of elements to transmit. Upon successful return from the) 126 202.99 P
-0.41 (invocation, the) 126 188.99 P
5 F
-0.99 (_length) 199.46 188.99 P
2 F
-0.41 ( member will contain the number of values that were copied into) 249.84 188.99 P
(the buf) 126 174.99 T
(fer pointed to by the) 159.43 174.99 T
5 F
(_buffer) 259.69 174.99 T
2 F
( member) 310.06 174.99 T
(. The number of values returned is con-) 351.7 174.99 T
(strained by the value of the) 126 160.99 T
5 F
(_maximum) 259.23 160.99 T
2 F
( member) 316.8 160.99 T
(.) 358.44 160.99 T
(For bounded sequences, it is an error to set the) 126 134.99 T
5 F
(_length) 352.17 134.99 T
2 F
( or) 402.54 134.99 T
5 F
(_maximum) 418.53 134.99 T
2 F
( member to a) 476.1 134.99 T
(value lar) 126 120.99 T
(ger than the speci) 167.41 120.99 T
(fied bound.) 251.68 120.99 T
52 646.99 54 658.99 R
V
52 564.99 54 574.99 R
V
52 516.99 54 526.99 R
V
52 432.99 54 482.99 R
V
52 378.99 54 404.99 R
V
52 280.99 54 348.99 R
V
52 212.99 54 252.99 R
V
52 116.99 54 196.99 R
V
FMENDPAGE
%%EndPage: "91" 90
%%Page: "90" 90
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(C Language Stub Mapping) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(90) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
54 668.99 540 672.02 C
108 670.5 540 670.5 2 L
0.25 H
2 Z
0 X
0 K
N
54 670.5 99 670.5 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(5.8) 83.15 676.68 T
0 F
(Mapping for Structure T) 108 676.68 T
(ypes) 254.21 676.68 T
2 12 Q
(IDL structures map directly onto C) 108 650.99 T
5 F
(struct) 279.22 650.99 T
2 F
(s. Note that all IDL types that map to C) 322.39 650.99 T
5 F
(struct) 108 636.99 T
2 F
(s may potentially include padding.) 151.18 636.99 T
54 590.97 540 593.99 C
108 592.48 540 592.48 2 L
0.25 H
2 Z
0 X
0 K
N
54 592.48 99 592.48 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(5.9) 83.15 598.66 T
0 F
(Mapping for Union T) 108 598.66 T
(ypes) 233.99 598.66 T
2 12 Q
(IDL discriminated unions are mapped onto C) 108 572.97 T
5 F
(struct) 328.19 572.97 T
2 F
(s. Consider the following IDL dec-) 371.36 572.97 T
(laration:) 108 558.97 T
3 10 Q
(union Foo switch \050long\051 {) 108 534.3 T
(case 1: long x;) 126 522.3 T
(case 2: \337oat y;) 126 510.3 T
(default: char z;) 126 498.3 T
(};) 108 486.3 T
2 12 Q
(This is equivalent to the following) 108 460.97 T
6 F
(struct) 275.91 460.97 T
2 F
( in C:) 305.88 460.97 T
5 10 Q
(typedef struct {) 108 436.3 T
(/* C */) 468 436.3 T
(long _d;) 126 424.3 T
(union {) 126 412.3 T
(long x;) 144 400.3 T
(f) 144 388.3 T
(loat y;) 150 388.3 T
(char z;) 144 376.3 T
(} _u;) 126 364.3 T
(} Foo;) 108 352.3 T
2 12 Q
-0.3 (The discriminator in the struct is always referred to as) 108 326.97 P
5 F
-0.73 (_d) 366.78 326.97 P
2 F
-0.3 (; the union in the struct is always) 381.18 326.97 P
(referred to as) 108 312.97 T
5 F
(_u.) 174.26 312.97 T
2 F
(Reference to union elements is as in normal C:) 108 286.97 T
5 10 Q
(Foo *v;) 108 262.3 T
(/* C */) 468 262.3 T
(/* make a call that returns a pointer to a Foo in v */) 108 238.3 T
(switch\050v->_d\051 {) 108 214.3 T
(case 1:) 126 202.3 T
(printf\050"x = %ld\134n", v->_u.x\051; break;) 180 202.3 T
(case 2:) 126 190.3 T
(printf\050"y = %f\134n", v->_u.y\051; break;) 180 190.3 T
(default:) 126 178.3 T
(printf\050"z = %c\134n", v->_u.z\051; break;) 180 178.3 T
(}) 108 166.3 T
34 632.99 36 686.02 R
V
34 568.97 36 580.97 R
V
34 432.97 36 442.97 R
V
34 308.97 36 334.97 R
V
34 258.97 36 268.97 R
V
34 174.97 36 208.97 R
V
FMENDPAGE
%%EndPage: "90" 89
%%Page: "89" 89
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(Mapping for Constants) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(89) 546.89 60.29 T
72 87.98 558 686.02 R
7 X
V
72 668.99 558 672.02 C
126 670.5 558 670.5 2 L
0.25 H
2 Z
0 X
0 K
N
72 670.5 117 670.5 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(5.6) 101.15 676.68 T
0 F
(Mapping for Constants) 126 676.68 T
2 12 Q
-0.26 (Constant identi\336ers can be referenced at any point in the user) 126 650.99 P
-0.26 (\325) 417.61 650.99 P
-0.26 (s code where a literal of that) 420.94 650.99 P
(type is legal. In C, these constants are) 126 636.99 T
5 F
(#def) 309.87 636.99 T
(ine) 338.65 636.99 T
2 F
(d.) 360.24 636.99 T
(The fact that constants are) 126 610.99 T
5 F
(#def) 254.89 610.99 T
(ine) 283.68 610.99 T
2 F
(d may lead to ambiguities in code. All names which) 305.27 610.99 T
(are mandated by the mappings for any of the structured types below start with an under-) 126 596.99 T
(score.) 126 582.99 T
72 536.97 558 539.99 C
126 538.48 558 538.48 2 L
0.25 H
2 Z
0 X
0 K
N
72 538.48 117 538.48 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(5.7) 101.15 544.66 T
0 F
(Mapping for Basic Data T) 126 544.66 T
(ypes) 283.09 544.66 T
2 12 Q
(The basic data types have the mappings shown in TBL. 1) 126 518.97 T
(1 on page 89. Note that the) 400.37 518.97 T
5 F
(unsigned char) 126 504.97 T
2 F
( mapping of the IDL) 219.55 504.97 T
3 F
(boolean) 321.14 504.97 T
2 F
( types de\336nes only the values 1 \050TRUE\051) 358.85 504.97 T
(and 0 \050F) 126 490.97 T
(ALSE\051; other values produce unde\336ned behavior) 165.09 490.97 T
(.) 399.92 490.97 T
(Each enumerator in an) 126 232.97 T
3 F
(enum) 237.24 232.97 T
2 F
( is) 263.47 232.97 T
5 F
(#def) 277.46 232.97 T
(ine) 306.25 232.97 T
2 F
(d with an appropriate) 327.84 232.97 T
5 F
(unsigned) 433.09 232.97 T
(long) 493.66 232.97 T
2 F
( value) 522.44 232.97 T
(conforming to the ordering constraints described in \2444.7.2.3 on page 70.) 126 218.97 T
(T) 126 192.97 T
(ypeCodes are described in \2447.6 on page 138. The) 132.49 192.97 T
5 F
(_value) 371.97 192.97 T
2 F
( member for an) 415.15 192.97 T
3 F
(any) 491.75 192.97 T
2 F
( is a) 508.7 192.97 T
(pointer to the actual value of the datum.) 126 178.97 T
72 461.94 558 474.97 C
126 468.99 558 468.99 2 L
0.25 H
2 Z
0 X
0 K
N
72 468.99 117 468.99 2 L
0 Z
N
0 0 612 792 C
72 437.97 558 451.94 C
72 443.94 558 443.94 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
(TBL. 1) 72 455.27 T
(1) 101.99 455.27 T
0 F
(Data T) 126 455.27 T
(ype Mappings) 155.44 455.27 T
1 9 Q
(IDL) 132 424.97 T
(C) 204 424.97 T
0 F
(short) 132 409.97 T
(short) 204 409.97 T
(long) 132 394.97 T
(long) 204 394.97 T
-0.72 (unsigned short) 132 379.97 P
(unsigned short) 204 379.97 T
(unsigned long) 132 364.97 T
(unsigned long) 204 364.97 T
(\337oat) 132 349.97 T
(\337oat) 204 349.97 T
(double) 132 334.97 T
(double) 204 334.97 T
(char) 132 319.97 T
(char) 204 319.97 T
(boolean) 132 304.97 T
(unsigned char) 204 304.97 T
(octet) 132 289.97 T
(unsigned char) 204 289.97 T
(enum) 132 274.97 T
(unsigned long) 204 274.97 T
(any) 132 259.97 T
(typedef struct any { T) 204 259.97 T
(ypeCode _type; void *_value; } any;) 287.93 259.97 T
126 419.97 495 419.97 2 L
V
0.5 H
0 Z
N
126 254.97 495 254.97 2 L
V
N
52 672.02 54 686.02 R
V
52 606.99 54 644.99 R
V
52 578.99 54 590.99 R
V
52 148.97 54 526.97 R
V
52 406.97 54 415.97 R
V
52 391.97 54 400.97 R
V
52 376.97 54 385.97 R
V
52 361.97 54 370.97 R
V
52 346.97 54 355.97 R
V
52 331.97 54 340.97 R
V
52 316.97 54 325.97 R
V
52 301.97 54 310.97 R
V
52 301.97 54 310.97 R
V
52 286.97 54 295.97 R
V
52 271.97 54 280.97 R
V
52 256.97 54 265.97 R
V
52 256.97 54 265.97 R
V
FMENDPAGE
%%EndPage: "89" 88
%%Page: "88" 88
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(C Language Stub Mapping) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(88) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
54 668.99 540 672.02 C
108 670.5 540 670.5 2 L
0.25 H
2 Z
0 X
0 K
N
54 670.5 99 670.5 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(5.5) 83.15 676.68 T
0 F
(Mapping for Attributes) 108 676.68 T
2 12 Q
(The mapping for attributes is best explained through a couple of examples. Consider the) 108 646.99 T
(following speci\336cation:) 108 632.99 T
3 10 Q
(interface foo {) 108 608.33 T
(struct position_t {) 126 596.33 T
(\337oat x, y;) 144 584.33 T
(};) 126 572.33 T
(attribute \337oat radius;) 126 548.33 T
(readonly attribute position_t position;) 126 536.33 T
(};) 108 524.33 T
2 12 Q
(This is exactly equivalent to the following illegal IDL speci\336cation:) 108 498.99 T
3 10 Q
(interface foo {) 108 474.33 T
(struct position_t {) 126 462.33 T
(\337oat x, y;) 144 450.33 T
(};) 126 438.33 T
(\337oat) 126 414.33 T
(_get_radius\050\051;) 180 414.33 T
(void) 126 402.33 T
(_set_radius\050in \337oat r\051;) 180 402.33 T
(position_t) 126 390.33 T
(_get_position\050\051;) 180 390.33 T
(};) 108 378.33 T
2 12 Q
(This latter speci\336cation is illegal since IDL identi\336ers are not permitted to start with the) 108 352.99 T
(underscore \050) 108 338.99 T
3 F
(_) 167.61 338.99 T
2 F
(\051 character) 173.08 338.99 T
(.) 223.35 338.99 T
(The language mapping for attributes then becomes the language mapping for these equiv-) 108 312.99 T
(alent operations. More speci\336cally) 108 298.99 T
(, the function signatures generated for the above opera-) 273.1 298.99 T
(tions are as follows:) 108 284.99 T
5 10 Q
(typedef struct foo_position_t {) 108 260.33 T
(/* C */) 468 260.33 T
(f) 126 248.33 T
(loat x, y;) 132 248.33 T
(} foo_position_t;) 108 236.33 T
(extern f) 108 212.33 T
(loat foo__get_radius\050foo o, Environment *ev\051;) 155.97 212.33 T
(extern void foo__set_radius\050foo o, Environment *ev, f) 108 200.33 T
(loat r\051;) 425.83 200.33 T
(extern foo_position_t foo__get_position\050foo o, Environment *ev\051;) 108 188.33 T
2 12 Q
(Note that two underscore characters \050) 108 162.99 T
5 F
(__) 287.51 162.99 T
2 F
(\051 separate the name of the interface from the) 301.9 162.99 T
(words \322) 108 148.99 T
5 F
(get) 145.63 148.99 T
2 F
(\323 or \322) 167.22 148.99 T
5 F
(set) 193.86 148.99 T
2 F
(\323 in the names of the functions.) 215.45 148.99 T
-0.43 (If the \322) 108 122.99 P
5 F
-1.04 (set) 141.1 122.99 P
2 F
-0.43 (\323 accessor function fails to set the attribute value, the method should return one) 162.68 122.99 P
(of the standard exceptions de\336ned in \2444.13 on page 79.) 108 108.99 T
34 374.99 36 640.99 R
V
34 232.99 36 266.99 R
V
34 184.99 36 218.99 R
V
34 104.99 36 116.99 R
V
FMENDPAGE
%%EndPage: "88" 87
%%Page: "87" 87
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(Inheritance and Operation Names) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(87) 546.89 60.29 T
72 87.98 558 686.02 R
7 X
V
2 12 Q
0 X
(This is equivalent to the following C declaration:) 126 678.02 T
5 10 Q
(#include "example1.h") 126 653.35 T
(/* C */) 504 653.35 T
(typedef Object example2;) 126 629.35 T
(extern example1 example2_op2\050example2 o, Environment *ev\051;) 126 617.35 T
2 12 Q
(A C fragment for invoking such an operation is as follows:) 126 592.02 T
5 10 Q
(#include "example2.h") 126 567.35 T
(/* C */) 504 567.35 T
(example1 ex1;) 126 543.35 T
(example2 ex2;) 126 531.35 T
(Environment ev;) 126 519.35 T
(/* code for binding ex2 */) 126 495.35 T
(ex1 = example2_op2\050ex2, &ev\051;) 126 471.35 T
72 425.99 558 429.02 C
126 427.5 558 427.5 2 L
0.25 H
2 Z
0 X
0 K
N
72 427.5 117 427.5 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(5.4) 101.15 433.68 T
0 F
(Inheritance and Operation Names) 126 433.68 T
2 12 Q
(IDL permits the speci\336cation of interfaces that inherit operations from other interfaces.) 126 407.99 T
(Consider the following example:) 126 393.99 T
3 10 Q
(interface example3 : example1 {) 126 369.33 T
(void op3\050in long arg3, out long arg4\051;) 144 357.33 T
(};) 126 345.33 T
2 12 Q
(This is equivalent to the following C declarations:) 126 319.99 T
5 10 Q
(typedef Object example3;) 126 295.33 T
(/* C */) 504 295.33 T
(extern long example3_op1\050example3 o, Environment *ev, long arg1\051;) 126 283.33 T
(extern void example3_op3\050) 126 271.33 T
(example3 o,) 144 259.33 T
(Environment *ev,) 144 247.33 T
(long arg3,) 144 235.33 T
(long *arg4) 144 223.33 T
(\051;) 126 211.33 T
2 12 Q
-0.37 (As a result, an object written in C can access) 126 185.99 P
3 F
-0.34 (op1) 339.8 185.99 P
2 F
-0.37 ( as if it was directly declared in) 357.29 185.99 P
3 F
-0.34 (example3) 507.54 185.99 P
2 F
-0.37 (.) 552.37 185.99 P
(Of course, the programmer could also invoke) 126 171.99 T
5 F
(example1_op1) 346.5 171.99 T
2 F
( on an) 432.85 171.99 T
5 F
(Object) 465.16 171.99 T
2 F
( of type) 508.34 171.99 T
5 F
-0.66 (example3) 126 157.99 P
2 F
-0.28 (; the virtual nature of operations in interface de\336nitions will cause invocations) 183.57 157.99 P
(of either function to cause the same method to be) 126 143.99 T
(invoked.) 365.16 143.99 T
52 650.02 54 660.02 R
V
52 614.02 54 636.02 R
V
52 564.02 54 574.02 R
V
52 516.02 54 526.02 R
V
52 468.02 54 478.02 R
V
52 139.99 54 301.99 R
V
FMENDPAGE
%%EndPage: "87" 86
%%Page: "86" 86
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(C Language Stub Mapping) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(86) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
2 12 Q
0 X
(Note that the use of underscores to replace the \322) 108 678.02 T
3 F
(::) 338.14 678.02 T
2 F
(\323 separators can lead to ambiguity if the) 344.69 678.02 T
(IDL speci\336cation contains identi\336ers with underscores in them. Consider the following) 108 664.02 T
(example:) 108 650.02 T
3 10 Q
(typedef long foo_bar;) 108 625.35 T
(interface foo {) 108 613.35 T
(typedef short bar;) 126 601.35 T
(/* A legal IDL statement, but ambiguous in C */) 234 601.35 T
(\245 \245 \245) 126 589.35 T
(};) 108 577.35 T
2 12 Q
(Due to such ambiguities, it is advisable to avoid the indiscriminate use of underscores in) 108 552.02 T
(identi\336ers.) 108 538.02 T
54 491.99 540 495.02 C
108 493.5 540 493.5 2 L
0.25 H
2 Z
0 X
0 K
N
54 493.5 99 493.5 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(5.3) 83.15 499.68 T
0 F
(Mapping for Interfaces) 108 499.68 T
2 12 Q
(All interfaces must be de\336ned at global scope \050) 108 473.99 T
4 F
(no) 333.84 473.99 T
2 F
( nested interfaces\051. The mapping for an) 345.83 473.99 T
(interface declaration is as follows:) 108 459.99 T
3 10 Q
(interface example1 {) 108 435.33 T
(long op1\050in long arg1\051;) 126 423.33 T
(};) 108 411.33 T
2 12 Q
(The preceding example generates the following C declarations) 108 385.99 T
2 10 Q
(1) 408.1 390.79 T
2 12 Q
(:) 413.1 385.99 T
5 10 Q
(typedef Object example1;) 108 361.33 T
(/* C */) 486 361.33 T
(extern long example1_op1\050example1 o, Environment *ev, long arg1\051;) 108 349.33 T
2 12 Q
(All object references \050actually typed interface references to an object\051 are of the well-) 108 323.99 T
-0.27 (known, opaque type) 108 309.99 P
5 F
-0.64 (Object) 207.13 309.99 P
2 F
-0.27 (. The representation of Object is a pointer) 250.31 309.99 P
-0.27 (. T) 447.63 309.99 P
-0.27 (o permit the pro-) 459.85 309.99 P
(grammer to decorate a program with typed references, a type with the name of the inter-) 108 295.99 T
-0.23 (face is de\336ned to be an) 108 281.99 P
5 F
-0.55 (Object) 219.87 281.99 P
2 F
-0.23 (. The literal) 263.05 281.99 P
5 F
-0.55 (OBJECT_NIL) 320.99 281.99 P
2 F
-0.23 ( is legal wherever an) 392.95 281.99 P
5 F
-0.55 (Object) 494.05 281.99 P
2 F
(may be used; it is guaranteed to pass the) 108 267.99 T
6 F
(is_nil) 304.2 267.99 T
2 F
( operation de\336ned in \2448.2.3 on page 146.) 331.53 267.99 T
(IDL permits speci\336cations in which ar) 108 241.99 T
(guments, return results, or components of con-) 291.99 241.99 T
(structed types may be interface references. Consider the following example:) 108 227.99 T
3 10 Q
(#include "example1.idl") 108 203.33 T
(interface example2 {) 108 179.33 T
(example1 op2\050\051;) 126 167.33 T
(};) 108 155.33 T
54 101.98 540 132.01 C
108 105.01 252 105.01 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
2 10 Q
0 X
0 K
(1.) 108 95.32 T
( \2445.14 on page 95 describes the additional arguments added to an operation in the C mapping.) 126 95.32 T
34 305.99 36 367.99 R
V
34 263.99 36 289.99 R
V
34 199.99 36 235.99 R
V
34 91.98 36 101.98 R
V
FMENDPAGE
%%EndPage: "86" 85
%%Page: "85" 85
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(Scoped Names) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(85) 546.89 60.29 T
72 87.98 558 686.02 R
7 X
V
2 12 Q
0 X
(It is not necessary for a language mapping to use the pseudo-object approach. However) 126 678.02 T
(,) 544.52 678.02 T
(this document de\336nes interfaces in subsequent chapters using IDL wherever possible. A) 126 664.02 T
(language mapping must de\336ne how these interfaces are accessed, either by de\336ning them) 126 650.02 T
(as pseudo-objects and supporting a mapping similar to ordinary objects, by de\336ning lan-) 126 636.02 T
(guage-speci\336c interfaces for them, or in some other way) 126 622.02 T
(.) 395.34 622.02 T
1 F
(5.1.9) 93.93 590.02 T
0 F
(Language Stub Mapping) 126 590.02 T
2 F
(The remainder of this chapter is the C language stub mapping. Subsequent chapters will) 126 572.02 T
(discuss additional ORB interfaces. Although attempts have been made to separate the) 126 558.02 T
(mapping-speci\336c details from the ORB-generic concepts, the reader is cautioned that it) 126 544.02 T
(has not always been possible to separate them. A future revision of this document will) 126 530.02 T
(restructure this information to clarify which concepts are applicable to any programming) 126 516.02 T
(language mapping, and which concepts are speci\336c to the C language mapping.) 126 502.02 T
72 455.99 558 459.02 C
126 457.5 558 457.5 2 L
0.25 H
2 Z
0 X
0 K
N
72 457.5 117 457.5 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(5.2) 101.15 463.68 T
0 F
(Scoped Names) 126 463.68 T
2 12 Q
(The C programmer must always use the global name for a type, constant, exception, or) 126 437.99 T
-0.14 (operation. The C global name corresponding to an IDL global name is derived by convert-) 126 423.99 P
(ing occurrences of \322) 126 409.99 T
3 F
(::) 222.91 409.99 T
2 F
(\323 to \322) 229.46 409.99 T
5 F
(_) 255.43 409.99 T
2 F
(\323 \050an underscore\051 and eliminating the leading underscore.) 262.63 409.99 T
(Consider the following example:) 126 383.99 T
3 10 Q
(typedef string<256> \336lename_t;) 126 359.33 T
(interface example0 {) 126 347.33 T
(enum color {red, green, blue};) 144 335.33 T
(union bar switch \050enum foo {room, bell}\051 { ... };) 144 323.33 T
(\245 \245 \245) 144 311.33 T
(};) 126 299.33 T
2 12 Q
(Code to use this interface would look as follows:) 126 273.99 T
5 10 Q
(#include "example0.h") 126 249.33 T
(/* C */) 504 249.33 T
(f) 126 225.33 T
(ilename_t FN;) 132 225.33 T
(example0_color C = example0_red;) 126 213.33 T
(example0_bar myUnion;) 126 201.33 T
(switch \050myUnion._d\051 {) 126 177.33 T
(case example0_bar_room: \245 \245 \245) 144 165.33 T
(case example0_bar_bell: \245 \245 \245) 144 153.33 T
(};) 126 141.33 T
52 459.02 54 686.02 R
V
52 405.99 54 417.99 R
V
52 245.99 54 281.99 R
V
52 149.99 54 171.99 R
V
FMENDPAGE
%%EndPage: "85" 84
%%Page: "84" 84
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(C Language Stub Mapping) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(84) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
2 12 Q
0 X
(occurred. If the programming language has a model of exceptions that can accommodate) 108 678.02 T
(ORB exceptions, that would likely be the most convenient choice; if it does not, some) 108 664.02 T
-0.45 (other means must be used, for example, passing additional parameters to the operation that) 108 650.02 P
(receive the exception status.) 108 636.02 T
(It is commonly the case that the programmer associates speci\336c code to handle each kind) 108 610.02 T
(of exception. It is desirable to make that association as convenient as possible.) 108 596.02 T
(When an exception has been raised, it must be possible to access the parameters of the) 108 570.02 T
(exception. If the language exception mechanism allows for parameters, that mechanism) 108 556.02 T
(could be used. Otherwise, some other means of obtaining the exception values must be) 108 542.02 T
(provided.) 108 528.02 T
1 F
(5.1.7) 75.93 496.02 T
0 F
(Attributes) 108 496.02 T
2 F
(The ORB models attributes as a pair of operations, one to set and one to get the attribute) 108 478.02 T
(value. The language mapping de\336nes the means of expressing these operations. One rea-) 108 464.02 T
-0.27 (son for distinguishing attributes from pairs of operations is to allow the language mapping) 108 450.02 P
-0.29 (to de\336ne the most natural way for accessing them. Some possible choices include de\336ning) 108 436.02 P
(two operations for each attribute, de\336ning two operations that can set or get, respectively) 108 422.02 T
(,) 533.91 422.02 T
(any attribute, de\336ning operations that can set or get groups of attributes, etc.) 108 408.02 T
1 F
(5.1.8) 75.93 376.02 T
0 F
(ORB Interfaces) 108 376.02 T
2 F
(Most of a language mapping is concerned with how the programmer) 108 358.02 T
(-de\336ned objects and) 436.19 358.02 T
-0.28 (data are accessed. Programmers who use the ORB must also access some interfaces imple-) 108 344.02 P
-0.17 (mented directly by the ORB, for example, to convert an object reference to a string. A lan-) 108 330.02 P
(guage mapping must also specify how these interfaces appear in the particular) 108 316.02 T
(programming language.) 108 302.02 T
(V) 108 276.02 T
(arious approaches may be taken, including de\336ning a set of library routines, allowing) 115.33 276.02 T
-0.08 (additional ORB-related operations on objects, or de\336ning interfaces that are similar to the) 108 262.02 P
(language mapping for ordinary objects.) 108 248.02 T
-0.03 (The last approach is called de\336ning pseudo-objects. A pseudo-object has an interface that) 108 222.02 P
(can \050with a few exceptions\051 be de\336ned in IDL, but is not necessarily implemented as an) 108 208.02 T
-0 (ORB object.Using stubs a client of a pseudo-object writes calls to it in the same way as if) 108 194.02 P
-0.08 (it were an ordinary object. Pseudo-object operations cannot be invoked with the Dynamic) 108 180.02 P
(Invocation Interface. However) 108 166.02 T
(, the ORB may recognize such calls as special and handle) 254.38 166.02 T
(them directly) 108 152.02 T
(. One advantage of pseudo-objects is that the interface can be expressed in) 170.85 152.02 T
-0.17 (IDL independent of the particular language mapping, and the programmer can understand) 108 138.02 P
(how to write calls by knowing the language mapping for the invocations of ordinary) 108 124.02 T
(objects.) 108 110.02 T
34 106.02 36 686.02 R
V
FMENDPAGE
%%EndPage: "84" 83
%%Page: "83" 83
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(Requirements for a Language Mapping) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(83) 546.89 60.29 T
72 87.98 558 686.02 R
7 X
V
2 12 Q
0 X
(gram does not interpret the values of that type. The language-speci\336c representation is) 126 678.02 T
(independent of the ORB representation of an object reference, so that programs are not) 126 664.02 T
(ORB-dependent. In an object-oriented programming language, it may be convenient to) 126 650.02 T
-0.44 (represent an ORB object as a programming language object. Any correspondence between) 126 636.02 P
-0.5 (the programming language object types and the IDL types including inheritance, operation) 126 622.02 P
(names, etc., is up to the language mapping.) 126 608.02 T
-0.24 (There are only three uses that a program can make of an object reference: it may specify it) 126 582.02 P
(as a parameter to an operation \050including receiving it as an output parameter\051, it can) 126 568.02 T
(invoke an operation on it, or it can perform an ORB operation \050including object adapter) 126 554.02 T
(operations\051 on it.) 126 540.02 T
1 F
(5.1.5) 93.93 508.02 T
0 F
(Invocation of Operations) 126 508.02 T
2 F
(An operation invocation requires the speci\336cation of the object to be invoked, the opera-) 126 490.02 T
(tion to be performed, and the parameters to be supplied. There are a variety of possible) 126 476.02 T
(mappings, depending to a lar) 126 462.02 T
(ge extent on the procedure mechanism in the particular lan-) 264.69 462.02 T
(guage. Some possible choices for language mapping of invocation include: interface-spe-) 126 448.02 T
-0.05 (ci\336c stub routines, a single general-purpose routine, a set of calls to construct a parameter) 126 434.02 P
-0.39 (list and initiate the operation, or mapping ORB operations to operations on objects de\336ned) 126 420.02 P
(in an object-oriented programming language.) 126 406.02 T
(The mapping must de\336ne how parameters are associated with the call, and how the opera-) 126 380.02 T
(tion name is speci\336ed. It is also necessary to specify the ef) 126 366.02 T
(fect of the call on the \337ow of) 406.25 366.02 T
(control in the program, including when an operation completes normally and when an) 126 352.02 T
(exception is raised.) 126 338.02 T
(The most natural mapping would be to model a call on an ORB object as the correspond-) 126 312.02 T
(ing call in the particular language. However) 126 298.02 T
(, this may not always be possible for lan-) 336.35 298.02 T
(guages where the type system or call mechanism is not powerful enough to handle ORB) 126 284.02 T
(objects. In this case, multiple calls may be required. For example, in C, it is necessary to) 126 270.02 T
(have a separate interface for dynamic construction of calls, since C does not permit dis-) 126 256.02 T
(covery of new types at runtime. In LISP) 126 242.02 T
(, however) 317.2 242.02 T
(, it may be possible make a language) 364.01 242.02 T
(mapping that is the same for objects whether or not they were known at compile time.) 126 228.02 T
-0.25 (In addition to de\336ning how an operation is expressed, it is necessary to specify the storage) 126 202.02 P
(allocation policy for parameters, for example, what happens to storage of input parame-) 126 188.02 T
(ters, and how and where output parameters are allocated. It is also necessary to describe) 126 174.02 T
(how a return value is handled, for operations that have one.) 126 160.02 T
1 F
(5.1.6) 93.93 128.02 T
0 F
(Exceptions) 126 128.02 T
2 F
(There are two aspects to the mapping of exceptions into a particular language. First is the) 126 110.02 T
(means for handling an exception when it occurs, including deciding which exception) 126 96.02 T
52 92.02 54 686.02 R
V
FMENDPAGE
%%EndPage: "83" 82
%%Page: "82" 82
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(C Language Stub Mapping) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(82) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
2 12 Q
0 X
(\245) 108 678.02 T
(exceptions, including what happens when an operation raises an exception and how) 126 678.02 T
(the exception parameters are accessed) 126 664.02 T
(\245) 108 647.02 T
(access to attributes) 126 647.02 T
(\245) 108 630.02 T
(signatures for the operations de\336ned by the ORB, such as the dynamic invocation) 126 630.02 T
(interface, the object adapters, etc.) 126 616.02 T
(A complete language mapping will allow a programmer to have access to all ORB func-) 108 590.02 T
(tionality in a way that is convenient for the particular programming language. T) 108 576.02 T
(o support) 489.89 576.02 T
-0.11 (source portability) 108 562.02 P
-0.11 (, all ORB implementations must support the same mapping for a particu-) 191.39 562.02 P
(lar language.) 108 548.02 T
1 F
(5.1.1) 75.93 516.02 T
0 F
(Basic Data T) 108 516.02 T
(ypes) 175.99 516.02 T
2 F
(A language mapping must de\336ne the means of expressing all of the data types de\336ned in) 108 498.02 T
-0 (\2444.7.1 on page 66. The ORB de\336nes the range of values supported, but the language map-) 108 484.02 P
(ping de\336nes how a programmer sees those values. For example, the C mapping might) 108 470.02 T
(de\336ne TRUE as 1 and F) 108 456.02 T
(ALSE as 0, whereas the LISP mapping might de\336ne TRUE as T) 222.71 456.02 T
(and F) 108 442.02 T
(ALSE as NIL. The mapping must specify the means to construct and operate on) 134.1 442.02 T
(these data types in the programming language.) 108 428.02 T
1 F
(5.1.2) 75.93 396.02 T
0 F
(Constructed Data T) 108 396.02 T
(ypes) 211.32 396.02 T
2 F
(A language mapping must de\336ne the means of expressing the constructed data types) 108 378.02 T
(de\336ned in \2444.7.2 on page 68 through \2444.7.4 on page 71. The ORB de\336nes aggregates of) 108 364.02 T
(basic data types that are supported, but the language mapping de\336nes how a programmer) 108 350.02 T
(sees those aggregates. For example, the C mapping might de\336ne an IDL struct as a C) 108 336.02 T
(struct, whereas the LISP mapping might de\336ne an IDL struct as a list. The mapping must) 108 322.02 T
(specify the means to construct and operate on these data types in the programming lan-) 108 308.02 T
(guage.) 108 294.02 T
1 F
(5.1.3) 75.93 262.02 T
0 F
(Constants) 108 262.02 T
2 F
(IDL de\336nitions may contain named constant values that are useful as parameters for cer-) 108 244.02 T
-0.39 (tain operations. The language mapping should provide the means to access these constants) 108 230.02 P
(by name.) 108 216.02 T
1 F
(5.1.4) 75.93 184.02 T
0 F
(Objects) 108 184.02 T
2 F
-0 (There are two parts of de\336ning the mapping of ORB objects to a particular language. The) 108 166.02 P
(\336rst speci\336es how an object is represented in the program and passed as a parameter to) 108 152.02 T
(operations. The second is how an object is invoked.) 108 138.02 T
-0.28 (The representation of an object reference in a particular language is generally opaque, that) 108 112.02 P
(is, some language-speci\336c data type is used to represent the object reference, but the pro-) 108 98.02 T
34 94.02 36 686.02 R
V
FMENDPAGE
%%EndPage: "82" 81
%%Page: "81" 81
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 378 558 378 2 L
7 X
V
2 Z
0 X
N
72 74.02 558 74.02 2 L
7 X
V
0.25 H
0 X
N
72 55.01 558 66.96 R
7 X
V
0 9 Q
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
-2.78 (81) 546.89 60.29 P
72 396 558 693 R
7 X
V
0 24 Q
0 X
-0.48 (5) 72 677 S
-0.48 (C Language Stub Mapping) 126 677 S
52 669 54 693 R
V
0 684 63 729 R
7 X
1 K
V
0.5 H
0 Z
N
72 87.98 558 360 R
0 K
V
2 12 Q
0 X
(The CORBA architecture is independent of the programming language used to construct) 126 352 T
(clients or implementations. In order to use the ORB, it is necessary for programmers to) 126 338 T
(know how to access ORB functionality from their particular programming languages.) 126 324 T
(This chapter de\336nes the mapping to the C programming language as the \336rst language) 126 298 T
(required by OMG; it is expected that additional language mappings will be de\336ned.) 126 284 T
72 237.98 558 241 C
126 239.49 558 239.49 2 L
0.25 H
2 Z
0 X
0 K
N
72 239.49 117 239.49 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(5.1) 101.15 245.67 T
0 F
(Requirements for a Language Mapping) 126 245.67 T
2 12 Q
(All language mappings have approximately the same structure. They must de\336ne the) 126 215.98 T
(means of expressing in the language:) 126 201.98 T
(\245) 126 181.98 T
(all IDL basic data types) 144 181.98 T
(\245) 126 164.98 T
(all IDL constructed data types) 144 164.98 T
(\245) 126 147.98 T
(references to constants de\336ned in IDL) 144 147.98 T
(\245) 126 130.98 T
(references to objects de\336ned in IDL) 144 130.98 T
(\245) 126 113.98 T
(invocations of operations, including passing parameters and receiving results) 144 113.98 T
52 320 54 360 R
V
52 109.98 54 255 R
V
FMENDPAGE
%%EndPage: "81" 80
%%Page: "80" 80
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(IDL Syntax and Semantics) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(80) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
3 10 Q
0 X
(module StExcep{) 108 679.35 T
(#de\336ne ex_body {unsigned long minor; completion_status completed;}) 126 655.35 T
(enum completion_status {YES, NO, MA) 126 631.35 T
(YBE};) 277.82 631.35 T
(enum exception_type {NO_EXCEPTION, USER_EXCEPTION, SYSTEM_EXCEPTION};) 126 619.35 T
(exception UNKNOWN) 126 595.35 T
(ex_body;) 252 595.35 T
(// the unknown exception) 306 595.35 T
(exception BAD_P) 126 583.35 T
(ARAM) 193.71 583.35 T
(ex_body;) 252 583.35 T
(// an invalid parameter was passed) 306 583.35 T
(exception NO_MEMOR) 126 571.35 T
(Y) 214.5 571.35 T
(ex_body;) 252 571.35 T
(// dynamic memory allocation failure) 306 571.35 T
(exception IMP_LIMIT) 126 559.35 T
(ex_body;) 252 559.35 T
(// vioilated implementation limit) 306 559.35 T
(exception COMM_F) 126 547.35 T
(AILURE) 201.6 547.35 T
(ex_body;) 252 547.35 T
(// communication failure) 306 547.35 T
(exception INV_OBJREF) 126 535.35 T
(ex_body;) 252 535.35 T
(// invalid object reference) 306 535.35 T
(exception NO_PERMISSION) 126 523.35 T
(ex_body;) 252 523.35 T
(// no permission for attempted op.) 306 523.35 T
(exception INTERNAL) 126 511.35 T
(ex_body;) 252 511.35 T
(// ORB internal error) 306 511.35 T
(exception MARSHAL) 126 499.35 T
(ex_body;) 252 499.35 T
(// error marshalling param/result) 306 499.35 T
(exception INITIALIZE) 126 487.35 T
(ex_body;) 252 487.35 T
(// ORB initialization failure) 306 487.35 T
(exception NO_IMPLEMENT) 126 475.35 T
(ex_body;) 252 475.35 T
(// operation implementation unavailable) 306 475.35 T
(exception BAD_TYPECODE) 126 463.35 T
(ex_body;) 252 463.35 T
(// bad typecode) 306 463.35 T
(exception BAD_OPERA) 126 451.35 T
(TION) 217.39 451.35 T
(ex_body;) 252 451.35 T
(// invalid operation) 306 451.35 T
(exception NO_RESOURCES) 126 439.35 T
(ex_body;) 252 439.35 T
(// insuf\336cient resources for req.) 306 439.35 T
(exception NO_RESPONSE) 126 427.35 T
(ex_body;) 252 427.35 T
(// response to req. not yet available) 306 427.35 T
(exception PERSIST_ST) 126 415.35 T
(ORE) 216.5 415.35 T
(ex_body;) 252 415.35 T
(// persistent storage failure) 306 415.35 T
(exception BAD_INV_ORDER) 126 403.35 T
(ex_body;) 252 403.35 T
(// routine invocations out of order) 306 403.35 T
(exception TRANSIENT) 126 391.35 T
(ex_body;) 252 391.35 T
(// transient failure - reissue request) 306 391.35 T
(exception FREE_MEM) 126 379.35 T
(ex_body;) 252 379.35 T
(// cannot free memory) 306 379.35 T
(exception INV_IDENT) 126 367.35 T
(ex_body;) 252 367.35 T
(// invalid identi\336er syntax) 306 367.35 T
(exception INV_FLAG) 126 355.35 T
(ex_body;) 252 355.35 T
(// invalid \337ag was speci\336ed) 306 355.35 T
(exception INTF_REPOS) 126 343.35 T
(ex_body;) 252 343.35 T
(// error accessing interface repository) 306 343.35 T
(exception CONTEXT) 126 331.35 T
(ex_body;) 252 331.35 T
(// error processing context object) 306 331.35 T
(exception OBJ_ADAPTER) 126 319.35 T
(ex_body;) 252 319.35 T
(// failure detected by object adapter) 306 319.35 T
(exception DA) 126 307.35 T
(T) 177.77 307.35 T
(A_CONVERSION) 182.18 307.35 T
(ex_body;) 252 307.35 T
(// data conversion error) 306 307.35 T
(};) 108 295.35 T
34 676.02 36 686.02 R
V
34 292.02 36 662.02 R
V
FMENDPAGE
%%EndPage: "80" 79
%%Page: "79" 79
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(Standard Exceptions) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(79) 546.89 60.29 T
72 87.98 558 686.02 R
7 X
V
72 668.99 558 672.02 C
126 670.5 558 670.5 2 L
0.25 H
2 Z
0 X
0 K
N
72 670.5 117 670.5 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(4.13) 93.37 676.68 T
0 F
(Standard Exceptions) 126 676.68 T
2 12 Q
(This section presents the standard exceptions de\336ned for the ORB. These exception iden-) 126 646.99 T
(ti\336ers may be returned as a result of any operation invocation, regardless of the interface) 126 632.99 T
(speci\336cation. Standard exceptions may not be listed in) 126 618.99 T
3 F
(raises) 390.17 618.99 T
2 F
( expressions.) 418.6 618.99 T
(In order to bound the complexity in handling the standard exceptions, the set of standard) 126 592.99 T
-0.14 (exceptions should be kept to a tractable size. This constraint forces the de\336nition of equiv-) 126 578.99 P
(alence classes of exceptions rather than enumerating many similar exceptions. For exam-) 126 564.99 T
-0.45 (ple, an operation invocation can fail at many dif) 126 550.99 P
-0.45 (ferent points due to the inability to allocate) 352.37 550.99 P
(dynamic memory) 126 536.99 T
(. Rather than enumerate several dif) 209.5 536.99 T
(ferent exceptions corresponding to) 377.14 536.99 T
(the dif) 126 522.99 T
(ferent ways that memory allocation failure causes the exception \050during marshal-) 156.76 522.99 T
(ling, unmarshalling, in the client, in the object implementation, allocating network pack-) 126 508.99 T
-0.31 (ets, ...\051, a single exception corresponding to dynamic memory allocation failure is de\336ned.) 126 494.99 P
(Each standard exception includes a minor code to designate the subcategory of the excep-) 126 480.99 T
(tion; the assignment of values to the minor codes is left to each ORB implementation.) 126 466.99 T
(Each standard exception also includes a) 126 440.99 T
3 F
(completion_status) 319.85 440.99 T
2 F
( code which takes one of the) 406.74 440.99 T
(values {YES, NO, MA) 126 426.99 T
(YBE}. These have the following meanings:) 235.58 426.99 T
(YES) 126 400.99 T
(The object implementation has completed processing prior to) 252 400.99 T
(the exception being raised.) 252 386.99 T
(NO) 126 360.99 T
(The object implementation was never initiated prior to the) 252 360.99 T
(exception being raised.) 252 346.99 T
(MA) 126 320.99 T
(YBE) 144.22 320.99 T
(The status of implementation completion is indeterminate.) 252 320.99 T
(The standard exceptions are de\336ned below) 126 294.99 T
(.) 330.06 294.99 T
52 672.02 54 686.02 R
V
52 588.99 54 626.99 R
V
52 560.99 54 572.99 R
V
52 532.99 54 544.99 R
V
52 290.99 54 516.99 R
V
FMENDPAGE
%%EndPage: "79" 78
%%Page: "78" 78
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(IDL Syntax and Semantics) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(78) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
2 12 Q
0 X
(Inheritance introduces multiple global IDL names for the inherited identi\336ers. Consider) 108 678.02 T
(the following example:) 108 664.02 T
3 10 Q
(interface A {) 108 639.35 T
(exception E {) 126 627.35 T
(long L;) 144 615.35 T
(};) 126 603.35 T
(void f\050\051 raises\050E\051;) 126 591.35 T
(};) 108 579.35 T
(interface B: A {) 108 555.35 T
(void g\050\051 raises\050E\051;) 126 543.35 T
(};) 108 531.35 T
2 12 Q
(In this example, the exception is known by the global names) 108 506.02 T
3 F
(::A::E) 401.14 506.02 T
2 F
( and) 427.9 506.02 T
3 F
(::B::E) 451.21 506.02 T
2 F
(.) 477.97 506.02 T
(Ambiguity can arise in speci\336cations due to the nested naming scopes. For example:) 108 486.02 T
3 10 Q
(interface A {) 108 467.35 T
(typedef string<128> string_t;) 126 455.35 T
(};) 108 443.35 T
(interface B {) 108 419.35 T
(typedef string<256> string_t;) 126 407.35 T
(};) 108 395.35 T
(interface C: A, B {) 108 371.35 T
(attribute string_t T) 126 359.35 T
(itle;) 198.26 359.35 T
(/* AMBIGUOUS!!! */) 270 359.35 T
(};) 108 347.35 T
2 12 Q
(The attribute declaration in C is ambiguous, since the compiler does not know which) 108 322.02 T
3 F
(string_t) 108 308.02 T
2 F
( is desired. Ambiguous declarations yield compilation errors.) 144.06 308.02 T
54 261.99 540 265.02 C
108 263.5 540 263.5 2 L
0.25 H
2 Z
0 X
0 K
N
54 263.5 99 263.5 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(4.12) 75.37 269.68 T
0 F
(Dif) 108 269.68 T
(ferences from C++) 124.85 269.68 T
2 12 Q
(The IDL grammar) 108 243.99 T
(, while attempting to conform to the C++ syntax, is somewhat more) 195.44 243.99 T
(restrictive. The current restrictions are as follows:) 108 229.99 T
(\245) 108 209.99 T
(A function return type is mandatory) 126 209.99 T
(.) 297.43 209.99 T
(\245) 108 192.99 T
(A name must be supplied with each formal parameter to an operation declaration.) 126 192.99 T
(\245) 108 175.99 T
(A parameter list consisting of the single token) 126 175.99 T
3 F
(void) 349.86 175.99 T
2 F
( is) 370.08 175.99 T
4 F
(not) 384.07 175.99 T
2 F
( permitted as a synonym for) 399.4 175.99 T
(an empty parameter list.) 126 161.99 T
(\245) 108 144.99 T
(T) 126 144.99 T
(ags are required for structures, discriminated unions, and enumerations.) 132.49 144.99 T
(\245) 108 127.99 T
(Integer types cannot be de\336ned as simply int or unsigned; they must be declared) 126 127.99 T
(explicitly as) 126 113.99 T
3 F
(short) 187.3 113.99 T
2 F
( or) 211.88 113.99 T
3 F
(long) 227.87 113.99 T
2 F
(.) 248.63 113.99 T
(\245) 108 96.99 T
3 F
(char) 126 96.99 T
2 F
( cannot be quali\336ed by) 146.77 96.99 T
3 F
(signed) 259.03 96.99 T
2 F
( or) 290.73 96.99 T
3 F
(unsigned) 306.72 96.99 T
2 F
( keywords.) 350.43 96.99 T
34 576.02 36 646.02 R
V
34 540.02 36 562.02 R
V
34 482.02 36 514.02 R
V
34 304.02 36 316.02 R
V
34 225.99 36 251.99 R
V
FMENDPAGE
%%EndPage: "78" 77
%%Page: "77" 77
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(Names and Scoping) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(77) 546.89 60.29 T
72 87.98 558 686.02 R
7 X
V
2 12 Q
0 X
-0.23 (T) 126 678.02 P
-0.23 (ype names de\336ned in a scope are available for immediate use within that scope. In partic-) 132.49 678.02 P
(ular) 126 664.02 T
(, see \2444.7.2 on page 68 on cycles in type de\336nitions.) 144.17 664.02 T
-0.35 (A name can be used in an unquali\336ed form within a particular scope; it will be resolved by) 126 638.02 P
(successively searching farther out in enclosing scopes. Once an unquali\336ed name is used) 126 624.02 T
(in a scope, it cannot be rede\336ned\321i.e. if one has used a name de\336ned in an enclosing) 126 610.02 T
(scope in the current scope, one cannot then rede\336ne a version of the name in the current) 126 596.02 T
(scope. Such rede\336nitions yield a compilation error) 126 582.02 T
(.) 367.51 582.02 T
(A quali\336ed name \050one of the form <scoped-name::<identi\336er>\051 is resolved by \336rst resolv-) 126 556.02 T
(ing the quali\336er <scoped-name> to a scope S, and then locating the de\336nition of <identi-) 126 542.02 T
-0.31 (\336er> within S. The identi\336er must be directly de\336ned in S or \050if S is an interface\051 inherited) 126 528.02 P
(into S. The <identi\336er> is not searched for in enclosing scopes.) 126 514.02 T
(When a quali\336ed name begins with \322::\323, the resolution process starts with the smallest) 126 488.02 T
(enclosing module, and locates subsequent identi\336ers in the quali\336ed name by the rule) 126 474.02 T
(described in the previous paragraph.) 126 460.02 T
-0.22 (Every IDL de\336nition in a \336le has a global name within that \336le. The global name for a def-) 126 434.02 P
(inition is constructed as follows.) 126 420.02 T
-0.22 (Prior to starting to scan a \336le containing an IDL speci\336cation, the name of the current root) 126 394.02 P
-0 (is initially empty \050\322\323\051 and the name of the current scope is initially empty \050\322\323\051. Whenever) 126 380.02 P
-0.45 (a) 126 366.02 P
3 F
-0.41 (module) 133.87 366.02 P
2 F
-0.45 ( keyword is encountered, the string \322::\323 and the associated identi\336er are appended) 168.85 366.02 P
(to the name of the current root; upon detection of the termination of the) 126 352.02 T
3 F
(module) 471.76 352.02 T
2 F
(, the trail-) 506.73 352.02 T
(ing \322::\323 and identi\336er are deleted from the name of the current root. Whenever an) 126 338.02 T
3 F
-0.22 (interface) 126 324.02 P
2 F
-0.24 (,) 166.99 324.02 P
3 F
-0.22 (struct) 172.75 324.02 P
2 F
-0.24 (,) 200.07 324.02 P
3 F
-0.22 (union) 205.83 324.02 P
2 F
-0.24 (, or) 232.6 324.02 P
3 F
-0.22 (exception) 251.11 324.02 P
2 F
-0.24 ( keyword is encountered, the string \322::\323 and the associ-) 297.02 324.02 P
(ated identi\336er are appended to the name of the current scope; upon detection of the termi-) 126 310.02 T
-0.47 (nation of the) 126 296.02 P
3 F
-0.43 (interface) 188.2 296.02 P
2 F
-0.47 (,) 229.2 296.02 P
3 F
-0.43 (struct) 234.72 296.02 P
2 F
-0.47 (,) 262.04 296.02 P
3 F
-0.43 (union) 267.56 296.02 P
2 F
-0.47 (, or) 294.33 296.02 P
3 F
-0.43 (exception) 312.37 296.02 P
2 F
-0.47 (, the trailing \322::\323 and identi\336er are deleted) 358.28 296.02 P
(from the name of the current scope. Additionally) 126 282.02 T
(, a new) 359.72 282.02 T
(, unnamed, scope is entered when) 393.24 282.02 T
-0.1 (the parameters of an operation declaration are processed; this allows the parameter names) 126 268.02 P
(to duplicate other identi\336ers; when parameter processing has completed, the unnamed) 126 254.02 T
(scope is exited.) 126 240.02 T
(The global name of an IDL de\336nition is the concatenation of the current root, the current) 126 214.02 T
(scope, a \322::\323, and the <> which is the local name for that de\336nition.) 126 200.02 T
(Inheritance produces shadow copies of the inherited identi\336ers\321i.e., it introduces names) 126 174.02 T
-0.38 (into the derived interface, but these names are considered to be semantically \322the same\323 as) 126 160.02 P
(the original de\336nition. T) 126 146.02 T
(wo shadow copies of the same original \050as results from the dia-) 242.43 146.02 T
-0.07 (mond shape in FIG. 1) 126 132.02 P
-0.07 (1 on page 61\051 introduce a single name into the derived interface and) 229.54 132.02 P
(don\325) 126 118.02 T
(t con\337ict with each other) 147.77 118.02 T
(.) 266.36 118.02 T
52 320.02 54 686.02 R
V
52 278.02 54 304.02 R
V
52 170.02 54 248.02 R
V
FMENDPAGE
%%EndPage: "77" 76
%%Page: "76" 76
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(IDL Syntax and Semantics) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(76) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
2 12 Q
0 X
(rules; the accessor function names are guaranteed) 108 678.02 T
4 F
(not) 348.79 678.02 T
2 F
( to collide with any legal operation) 364.12 678.02 T
(names speci\336able in IDL.) 108 664.02 T
(Attribute operations return errors by means of standard exceptions.) 108 638.02 T
(Attributes are inherited. An attribute name) 108 612.02 T
4 F
(cannot) 314.85 612.02 T
2 F
( be rede\336ned to be a dif) 347.5 612.02 T
(ferent type. See) 460.52 612.02 T
(\2444.1) 108 598.02 T
(1 on page 76 for more information on rede\336nition constraints and the handling of) 128.54 598.02 T
(ambiguity) 108 584.02 T
(.) 155.87 584.02 T
54 537.99 540 541.02 C
108 539.5 540 539.5 2 L
0.25 H
2 Z
0 X
0 K
N
54 539.5 99 539.5 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(4.1) 76.14 545.68 T
(1) 94.82 545.68 T
0 F
(Names and Scoping) 108 545.68 T
2 12 Q
(An entire IDL \336le forms a naming scope. In addition, the following kinds of de\336nitions) 108 519.99 T
(form nested scopes:) 108 505.99 T
(\245) 108 485.99 T
(module) 126 485.99 T
(\245) 108 468.99 T
(interface) 126 468.99 T
(\245) 108 451.99 T
(structure) 126 451.99 T
(\245) 108 434.99 T
(union) 126 434.99 T
(\245) 108 417.99 T
(operation) 126 417.99 T
(\245) 108 400.99 T
(exception) 126 400.99 T
(Identi\336ers for the following kinds of de\336nitions are scoped:) 108 374.99 T
(\245) 108 354.99 T
(types) 126 354.99 T
(\245) 108 337.99 T
(constants) 126 337.99 T
(\245) 108 320.99 T
(enumeration values) 126 320.99 T
(\245) 108 303.99 T
(exceptions) 126 303.99 T
(\245) 108 286.99 T
(interfaces) 126 286.99 T
(\245) 108 269.99 T
(attributes) 126 269.99 T
(\245) 108 252.99 T
(operations) 126 252.99 T
-0.16 (An identi\336er can only be de\336ned once in a scope. However) 108 226.99 P
-0.16 (, identi\336ers can be rede\336ned in) 390.06 226.99 P
(nested scopes.) 108 212.99 T
-0.08 (Due to possible restrictions imposed by future language bindings, IDL identi\336ers are case) 108 186.99 P
(insensitive\321i.e. two identi\336ers that dif) 108 172.99 T
(fer only in the case of their characters are consid-) 295.01 172.99 T
-0.41 (ered rede\336nitions of one another) 108 158.99 P
-0.41 (. However) 261.57 158.99 P
-0.41 (, all references to a de\336nition must use the same) 310.63 158.99 P
(case as the de\336ning occurrence. \050This allows natural mappings to case-sensitive lan-) 108 144.99 T
(guages.\051) 108 130.99 T
34 580.02 36 686.02 R
V
34 370.99 36 527.99 R
V
34 126.99 36 260.99 R
V
FMENDPAGE
%%EndPage: "76" 75
%%Page: "75" 75
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(Attribute Declaration) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(75) 546.89 60.29 T
69 87.98 555 686.02 R
7 X
V
2 12 Q
0 X
-0.35 (alphabetic character) 123 678.02 P
-0.35 (. An asterisk may only be used as the last character of the string. Some) 218.22 678.02 P
(implementations may use the period character to partition the name space.) 123 664.02 T
(The mechanism by which a client associates values with the context identi\336ers is) 123 638.02 T
(described in Chapter 6.) 123 624.02 T
69 577.99 555 581.02 C
123 579.5 555 579.5 2 L
0.25 H
2 Z
0 X
0 K
N
69 579.5 114 579.5 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(4.10) 90.37 585.68 T
0 F
(Attribute Declaration) 123 585.68 T
2 12 Q
(An interface can have attributes as well as operations; as such, attributes are de\336ned as) 123 559.99 T
(part of an interface. An attribute de\336nition is logically equivalent to declaring a pair of) 123 545.99 T
-0.09 (accessor functions; one to retrieve the value of the attribute and one to set the value of the) 123 531.99 P
(attribute.) 123 517.99 T
(The syntax for) 123 491.99 T
3 F
(attribute) 195.94 491.99 T
2 F
( declaration is:) 235.28 491.99 T
3 10 Q
(<attr_dcl>) 123 473.33 T
(::=) 231 473.33 T
([ \322readonly\323 ] \322attribute\323 <simple_type_spec> <declarators>) 249 473.33 T
2 12 Q
-0.23 (The optional) 123 447.99 P
3 F
-0.21 (readonly) 186.49 447.99 P
2 F
-0.23 ( keyword indicates that there is only a single accessor function\321the) 227.49 447.99 P
(retrieve value function. Consider the following example:) 123 433.99 T
3 10 Q
(interface foo {) 123 409.33 T
(enum material_t {rubber) 141 397.33 T
(, glass};) 234.83 397.33 T
(struct position_t {) 141 385.33 T
(\337oat x, y;) 159 373.33 T
(};) 141 361.33 T
(attribute \337oat radius;) 141 337.33 T
(attribute material_t material;) 141 325.33 T
(readonly attribute position_t position;) 141 313.33 T
(\245 \245 \245) 141 289.33 T
(};) 123 277.33 T
2 12 Q
(The attribute declarations are equivalent to the following pseudo-speci\336cation fragment:) 123 251.99 T
3 10 Q
(\245 \245 \245) 123 227.33 T
(\337oat) 123 215.33 T
(_get_radius \050\051;) 177 215.33 T
(void) 123 203.33 T
(_set_radius \050in \337oat r\051;) 177 203.33 T
(material_t) 123 191.33 T
(_get_material \050\051;) 177 191.33 T
(void) 123 179.33 T
(_set_material \050in material_t m\051;) 177 179.33 T
(position_t) 123 167.33 T
(_get_position \050\051;) 177 167.33 T
(\245 \245 \245) 123 155.33 T
2 12 Q
(The actual accessor function names are language-mapping speci\336c; the C mappings are) 123 129.99 T
(described in \2445.5 on page 88. Only the attribute name is subject to IDL) 123 115.99 T
(\325) 462.67 115.99 T
(s name scoping) 466 115.99 T
49 634.02 51 686.02 R
V
49 111.99 51 595.02 R
V
FMENDPAGE
%%EndPage: "75" 74
%%Page: "74" 74
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(IDL Syntax and Semantics) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(74) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
2 12 Q
0 X
-0.03 (It is expected that an implementation will) 108 678.02 P
4 F
-0.03 (not) 309.99 678.02 P
2 F
-0.03 ( attempt to modify an) 325.32 678.02 P
3 F
-0.03 (in) 431.43 678.02 P
2 F
-0.03 ( parameter) 440.18 678.02 P
-0.03 (. The abil-) 490.43 678.02 P
(ity to even attempt to do so is language-mapping speci\336c; the ef) 108 664.02 T
(fect of such an action is) 414.59 664.02 T
(unde\336ned.) 108 650.02 T
-0.23 (If an exception is raised as a result of an invocation, the values of the return result and any) 108 624.02 P
3 F
(out) 108 610.02 T
2 F
( and) 123.29 610.02 T
3 F
(inout) 146.61 610.02 T
2 F
( parameters are unde\336ned.) 170.64 610.02 T
-0.35 (When an unbounded) 108 584.02 P
3 F
-0.32 (string) 209.2 584.02 P
2 F
-0.35 ( or) 236.52 584.02 P
3 F
-0.32 (sequence) 251.8 584.02 P
2 F
-0.35 ( is passed as an) 297.17 584.02 P
3 F
-0.32 (inout) 371.68 584.02 P
2 F
-0.35 ( parameter) 395.71 584.02 P
-0.35 (, the returned value) 445.83 584.02 P
(cannot be longer than the input value.) 108 570.02 T
1 F
(4.9.3) 75.93 538.02 T
0 F
(Raises Expressions) 108 538.02 T
2 F
(A) 108 520.02 T
3 F
(raises) 119.66 520.02 T
2 F
( expression speci\336es which exceptions may be raised as a result of an invocation) 148.09 520.02 T
(of the operation. The syntax for its speci\336cation is as follows:) 108 506.02 T
3 10 Q
(<raises_expr>) 108 487.35 T
(::=) 216 487.35 T
(\322raises\323 \322\050\323 <scoped_name> { \322,\323 <scoped_name> }) 234 487.35 T
7 8 Q
(*) 435.81 491.35 T
3 10 Q
( \322\051\323) 439.81 487.35 T
2 12 Q
(The) 108 462.02 T
3 F
(<scoped_name>) 129.65 462.02 T
2 F
(\325s in the) 206.73 462.02 T
3 F
(raises) 248.37 462.02 T
2 F
( expression must be previously defined exceptions.) 276.81 462.02 T
(In addition to any operation-speci\336c exceptions speci\336ed in the) 108 436.02 T
3 F
(raises) 414.79 436.02 T
2 F
( expression, there) 443.23 436.02 T
(are a standard set of exceptions that may be signalled by the ORB. These standard excep-) 108 422.02 T
-0.43 (tions are described in \2444.13 on page 79. However) 108 408.02 P
-0.43 (, standard exceptions may) 341.9 408.02 P
4 F
-0.43 (not) 467.76 408.02 P
2 F
-0.43 ( be listed in) 483.08 408.02 P
(a) 108 394.02 T
3 F
(raises) 116.32 394.02 T
2 F
( expression.) 144.76 394.02 T
-0.25 (The absence of a) 108 368.02 P
3 F
-0.22 (raises) 190.93 368.02 P
2 F
-0.25 ( expression on an operation implies that there are no operation-spe-) 219.37 368.02 P
-0.07 (ci\336c exceptions. Invocations of such an operation are still liable to receive one of the stan-) 108 354.02 P
(dard exceptions.) 108 340.02 T
1 F
(4.9.4) 75.93 308.02 T
0 F
(Context Expressions) 108 308.02 T
2 F
(A) 108 290.02 T
3 F
(context) 119.66 290.02 T
2 F
( expression speci\336es which elements of the client\325) 154.63 290.02 T
(s context may af) 394.8 290.02 T
(fect the per-) 473.52 290.02 T
(formance of a request by the object. The syntax for its speci\336cation is as follows:) 108 276.02 T
3 10 Q
(<context_expr>) 108 257.35 T
(::=) 216 257.35 T
(\322context\323 \322\050\323 <string_literal> { \322,\323 <string_literal> }) 234 257.35 T
7 8 Q
(*) 430.32 261.35 T
3 10 Q
( \322\051\323) 434.32 257.35 T
2 12 Q
(The runtime system guarantees to make the value \050if any\051 associated with each) 108 232.02 T
3 F
(<string_literal>) 108 218.02 T
2 F
( in the client\325s context available to the object implementation when the) 178.52 218.02 T
(request is delivered. The ORB and/or object is free to use information in this) 108 204.02 T
4 F
(r) 478.75 204.02 T
(equest con-) 482.97 204.02 T
(text) 108 190.02 T
2 F
( during request resolution and performance.) 125.32 190.02 T
(The absence of a context expression indicates that there is no request context associated) 108 164.02 T
(with requests for this operation.) 108 150.02 T
(Each) 108 124.02 T
3 F
(string_literal) 134.97 124.02 T
2 F
( is an arbitrarily long sequence of alphabetic, digit, period \050\322.\323\051, under-) 194.01 124.02 T
(score \050\322_\323\051, and asterisk \050\322*\323\051 characters. The \336rst character of the string must be an) 108 110.02 T
34 660.02 36 686.02 R
V
34 516.02 36 632.02 R
V
34 432.02 36 494.02 R
V
34 364.02 36 416.02 R
V
34 214.02 36 298.02 R
V
34 106.02 36 172.02 R
V
FMENDPAGE
%%EndPage: "74" 73
%%Page: "73" 73
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(Operation Declaration) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(73) 546.89 60.29 T
72 87.98 558 686.02 R
7 X
V
2 12 Q
0 X
(\245) 126 678.02 T
-0.09 (An optional context expression which indicates which elements of the request context) 144 678.02 P
(may be consulted by the method that implements the operation. Context expressions) 144 664.02 T
(are described in \2444.9.4 on page 74.) 144 650.02 T
-0.45 (Some implementations and/or language mappings may require operation-speci\336c pragmas) 126 624.02 P
(to immediately precede the af) 126 610.02 T
(fected operation declaration.) 268.34 610.02 T
1 F
(4.9.1) 93.93 578.02 T
0 F
(Operation Attribute) 126 578.02 T
2 F
(The operation attribute speci\336es which invocation semantics the communication service) 126 560.02 T
(must provide for invocations of a particular operation. An operation attribute is optional.) 126 546.02 T
(The syntax for its speci\336cation is as follows:) 126 532.02 T
3 10 Q
(<op_attribute>) 126 513.35 T
(::=) 234 513.35 T
(\322oneway\323) 252 513.35 T
2 12 Q
-0.49 (When a client invokes an operation with the) 126 488.02 P
3 F
-0.44 (oneway) 336.63 488.02 P
2 F
-0.49 ( attribute, the invocation semantics are) 372.71 488.02 P
-0.04 (best-ef) 126 474.02 P
-0.04 (fort, which does not guarantee delivery of the call; best-ef) 158.42 474.02 P
-0.04 (fort implies that the oper-) 435.59 474.02 P
(ation will be invoked at most once. An operation with the) 126 460.02 T
3 F
(oneway) 405.16 460.02 T
2 F
( attribute must not con-) 441.23 460.02 T
-0.08 (tain any output parameters and must specify a) 126 446.02 P
3 F
-0.08 (void) 348.5 446.02 P
2 F
-0.08 ( return type. An operation de\336ned with) 368.72 446.02 P
-0.1 (the) 126 432.02 P
3 F
-0.1 (oneway) 143.55 432.02 P
2 F
-0.1 ( attribute may not include a raises expression; invocation of such an operation,) 179.63 432.02 P
(however) 126 418.02 T
(, may raise a standard exception.) 166.81 418.02 T
(If an) 126 392.02 T
3 F
(<op_attribute>) 151.31 392.02 T
2 F
( is not speci\336ed, the invocation semantics is at-most-once if an excep-) 219.62 392.02 T
(tion is raised; the semantics are exactly-once if the operation invocation returns success-) 126 378.02 T
(fully) 126 364.02 T
(.) 147.88 364.02 T
1 F
(4.9.2) 93.93 332.02 T
0 F
(Parameter Declarations) 126 332.02 T
2 F
(Parameter declarations in IDL operation declarations have the following syntax:) 126 314.02 T
3 10 Q
(<parameter_dcls>) 126 295.35 T
(::=) 234 295.35 T
(\322\050\323 <param_dcl> { \322,\323 <param_dcl> }) 252 295.35 T
7 8 Q
(*) 392.31 299.35 T
3 10 Q
( \322\051\323) 396.31 295.35 T
(|) 234 283.35 T
(\322\050\323 \322\051\323) 252 283.35 T
(<param_dcl>) 126 265.35 T
(::=) 234 265.35 T
(<param_attribute> <simple_type_spec> <declarator>) 252 265.35 T
(<param_attribute>) 126 247.35 T
(::=) 234 247.35 T
(\322in\323) 252 247.35 T
(|) 234 235.35 T
(\322out\323) 252 235.35 T
(|) 234 223.35 T
(\322inout\323) 252 223.35 T
2 12 Q
-0.09 (A parameter declaration must have a d) 126 198.02 P
-0.09 (irectional attribute that informs the communication) 310.67 198.02 P
(service in both the client and the server of the direction in which the parameter is to be) 126 184.02 T
(passed. The directional attributes are:) 126 170.02 T
(\245) 126 150.02 T
3 F
(in) 144 150.02 T
2 F
( - the parameter is passed from client to server) 152.74 150.02 T
(.) 374.24 150.02 T
(\245) 126 133.02 T
3 F
(out) 144 133.02 T
2 F
( - the parameter is passed from server to client.) 159.29 133.02 T
(\245) 126 116.02 T
3 F
(inout) 144 116.02 T
2 F
( - the parameter is passed in both directions.) 168.04 116.02 T
52 646.02 54 658.02 R
V
52 484.02 54 520.02 R
V
52 414.02 54 454.02 R
V
52 374.02 54 386.02 R
V
52 220.02 54 302.02 R
V
FMENDPAGE
%%EndPage: "73" 72
%%Page: "72" 72
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(IDL Syntax and Semantics) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(72) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
54 668.99 540 672.02 C
108 670.5 540 670.5 2 L
0.25 H
2 Z
0 X
0 K
N
54 670.5 99 670.5 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(4.8) 83.15 676.68 T
0 F
(Exception Declaration) 108 676.68 T
2 12 Q
(Exception declarations permit the declaration of struct-like data structures which may be) 108 650.99 T
(returned to indicate that an exceptional condition has occurred during the performance of) 108 636.99 T
(a request. The syntax is as follows:) 108 622.99 T
3 10 Q
(<except_dcl>) 108 604.33 T
(::=) 216 604.33 T
(\322exception\323 <identi\336er> \322{\322 <member>* \322}\323) 234 604.33 T
2 12 Q
(Each exception is characterized by its IDL identi\336er) 108 578.99 T
(, an exception type identi\336er) 357.65 578.99 T
(, and the) 494.08 578.99 T
(type of the associated return value \050as speci\336ed by the) 108 564.99 T
3 F
(<member>) 370.46 564.99 T
2 F
(s in its declaration. If an) 420.21 564.99 T
-0.29 (exception is returned as the outcome to a request, then the value of the exception identi\336er) 108 550.99 P
(is accessible to the programmer for determining which particular exception was raised.) 108 536.99 T
(If an exception is declared with members, a programmer will be able to access the values) 108 510.99 T
-0 (of those members when an exception is raised. If no members are speci\336ed, no additional) 108 496.99 P
(information is accessible when an exception is raised.) 108 482.99 T
(A set of standard exceptions is de\336ned corresponding to standard runtime errors which) 108 456.99 T
-0.43 (may occur during the execution of a request. These standard exceptions are documented in) 108 442.99 P
(\2444.13 on page 79.) 108 428.99 T
54 382.97 540 385.99 C
108 384.48 540 384.48 2 L
0.25 H
2 Z
0 X
0 K
N
54 384.48 99 384.48 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(4.9) 83.15 390.66 T
0 F
(Operation Declaration) 108 390.66 T
2 12 Q
(Operation declarations in IDL are similar to C function declarations. The syntax is:) 108 364.97 T
3 10 Q
(<op_dcl>) 108 346.3 T
(::=) 216 346.3 T
([ <op_attribute> ] <op_type_spec> <identi\336er> <parameter_dcls>) 234 346.3 T
([ <raises_expr> ] [ <context_expr> ]) 252 334.3 T
(<op_type_spec>) 108 316.3 T
(::=) 216 316.3 T
(<simple_type_spec>) 234 316.3 T
(|) 216 304.3 T
(\322void\323) 234 304.3 T
2 12 Q
(An operation declaration consists of:) 108 278.97 T
(\245) 108 258.97 T
(An optional operation attribute that speci\336es which invocation semantics the commu-) 126 258.97 T
-0.45 (nication system should provide when the operation is invoked. Operation attributes are) 126 244.97 P
(described in \2444.9.1 on page 73.) 126 230.97 T
(\245) 108 213.97 T
(The type of the operation\325) 126 213.97 T
(s return result; the type may be any type which can be) 250.58 213.97 T
(de\336ned in IDL. Operations that do not return a result must specify the) 126 199.97 T
3 F
(void) 463.77 199.97 T
2 F
( type.) 483.99 199.97 T
(\245) 108 182.97 T
(An identi\336er that names the operation in the scope of the interface in which it is) 126 182.97 T
(de\336ned.) 126 168.97 T
(\245) 108 151.97 T
(A parameter list that speci\336es zero or more parameter declarations for the operation.) 126 151.97 T
(Parameter declaration is described in \2444.9.2 on page 73.) 126 137.97 T
(\245) 108 120.97 T
(An optional raises expression which indicates which exceptions may be raised as a) 126 120.97 T
(result of an invocation of this operation. Raises expressions are described in Section) 126 106.97 T
(\2444.9.3 on page 74.) 126 92.97 T
34 532.99 36 610.99 R
V
34 452.99 36 464.99 R
V
34 385.99 36 436.99 R
V
34 300.97 36 352.97 R
V
34 226.97 36 238.97 R
V
34 164.97 36 190.97 R
V
34 88.97 36 145.97 R
V
FMENDPAGE
%%EndPage: "72" 71
%%Page: "71" 71
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(T) 126 736.18 T
(ype Declaration) 131 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(71) 546.89 60.29 T
72 87.98 558 686.02 R
7 X
V
2 12 Q
0 X
-0.09 (If no maximum size is speci\336ed, size of the sequence is unspeci\336ed \050unbounded\051. Prior to) 126 678.02 P
(passing such a sequence as a function ar) 126 664.02 T
(gument \050or as a \336eld in a structure or union\051, the) 318.63 664.02 T
(length of the sequence, the maximum size of the sequence, and the address of a buf) 126 650.02 T
(fer to) 525.14 650.02 T
(hold the sequence must be set in a language-mapping dependent manner) 126 636.02 T
(. After receiving) 472.42 636.02 T
(such a sequence result from an operation invocation, the length of the returned sequence) 126 622.02 T
(will have been set; this value may be obtained in a language-mapping dependent manner) 126 608.02 T
(.) 550.7 608.02 T
1 11 Q
(4.7.3.2) 87 582.68 T
0 F
(Strings) 126 582.68 T
2 12 Q
(IDL de\336nes the string type) 126 566.02 T
3 F
(string) 257.58 566.02 T
2 F
( consisting of all possible 8-bit quantities except null. A) 284.9 566.02 T
(string is similar to a sequence of char) 126 552.02 T
(. As with sequences of any type, prior to passing a) 304.21 552.02 T
-0.04 (string as a function ar) 126 538.02 P
-0.04 (gument \050or as a \336eld in a structure or union\051, the length of the string) 229.54 538.02 P
(must be set in a language-mapping dependent manner) 126 524.02 T
(. The syntax is:) 383.49 524.02 T
3 10 Q
(<string_type>) 126 505.35 T
(::=) 234 505.35 T
(\322string\323 \322<\323 <positive_int_const> \322>\323) 252 505.35 T
(|) 234 493.35 T
(\322string\323) 252 493.35 T
2 12 Q
-0.16 (The ar) 126 468.02 P
-0.16 (gument to the string declaration is the maximum size of the string. If a positive inte-) 156.6 468.02 P
(ger maximum size is speci\336ed, the string is termed a bounded string; if no maximum size) 126 454.02 T
(is speci\336ed, the string is termed an unbounded string.) 126 440.02 T
(Strings are singled out as a separate type because many languages have special built-in) 126 414.02 T
-0.23 (functions or standard library functions for string manipulation. A separate string) 126 400.02 P
-0.23 (type may) 511.17 400.02 P
(permit substantial optimization in the handling of strings compared to what can be done) 126 386.02 T
(with sequences of general types.) 126 372.02 T
1 F
(4.7.4) 93.93 340.02 T
0 F
(Complex Declarator) 126 340.02 T
1 11 Q
(4.7.4.1) 87 314.68 T
0 F
(Arrays) 126 314.68 T
2 12 Q
(IDL de\336nes multidimensional, \336xed-size arrays. An) 126 298.02 T
(array includes explicit sizes for each) 378.5 298.02 T
(dimension.) 126 284.02 T
(The syntax for arrays is:) 126 258.02 T
3 10 Q
(<array_declarator>) 126 239.35 T
(::=) 234 239.35 T
(<identi\336er> <\336xed_array_size>) 252 239.35 T
7 8 Q
(+) 371.82 243.35 T
3 10 Q
(<\336xed_array_size>) 126 221.35 T
(::=) 234 221.35 T
(\322[\323 <positive_int_const> \322]\323) 252 221.35 T
2 12 Q
(The array size \050in each dimension\051 is \336xed at compile time. When an array is passed as a) 126 196.02 T
(parameter in an operation invocation, all elements of the array are transmitted.) 126 182.02 T
-0.1 (The implementation of array indices is language mapping speci\336c; passing an array index) 126 156.02 P
(as a parameter may yield incorrect results.) 126 142.02 T
52 674.02 54 686.02 R
V
52 604.02 54 616.02 R
V
52 562.02 54 574.02 R
V
52 490.02 54 512.02 R
V
52 410.02 54 462.02 R
V
52 294.02 54 306.02 R
V
52 218.02 54 246.02 R
V
52 178.02 54 190.02 R
V
FMENDPAGE
%%EndPage: "71" 70
%%Page: "70" 70
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(IDL Syntax and Semantics) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(70) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
2 12 Q
0 X
(\245) 108 678.02 T
(if a default) 126 678.02 T
3 F
(case) 180.95 678.02 T
2 F
( label was speci\336ed, the value of the element associated with the) 202.83 678.02 T
(default) 126 664.02 T
3 F
(case) 162.3 664.02 T
2 F
( label;) 184.18 664.02 T
(\245) 108 647.02 T
(no additional value.) 126 647.02 T
(Access to the discriminator and the related element is language-mapping dependent.) 108 621.02 T
1 11 Q
(4.7.2.3) 69 595.68 T
0 F
(Enumerations) 108 595.68 T
2 12 Q
(Enumerated types consist of ordered lists of identi\336ers. The syntax is:) 108 579.02 T
3 10 Q
(<enum_type>) 108 560.35 T
(::=) 216 560.35 T
(\322enum\323 <identi\336er> \322{\323 <enumerator> { \322,\323 <enumerator> }) 234 560.35 T
7 8 Q
(*) 461.74 564.35 T
3 10 Q
( \322}\323) 465.74 560.35 T
(<enumerator>) 108 542.35 T
(::=) 216 542.35 T
(<identi\336er>) 234 542.35 T
2 12 Q
-0.42 (A maximum of 2) 108 517.02 P
2 8 Q
-0.28 (32) 189.01 521.02 P
2 12 Q
-0.42 ( identi\336ers may be speci\336ed in an enumeration; as such, the enumerated) 197.01 517.02 P
(names must be mapped to a native data type capable of representing a maximally-sized) 108 503.02 T
(enumeration. The order in which the identi\336ers are named in the speci\336cation of an enu-) 108 489.02 T
-0.49 (meration de\336nes the relative order of the identi\336ers. Any language mapping which permits) 108 475.02 P
(two enumerators to be compared or de\336nes successor/predecessor functions on enumera-) 108 461.02 T
(tors must conform to this ordering relation. The) 108 447.02 T
3 F
(<identi\336er>) 339.52 447.02 T
2 F
( following the) 392.54 447.02 T
3 F
(enum) 462.84 447.02 T
2 F
( keyword) 489.07 447.02 T
(de\336nes a new legal type. Enumerated types may also be named using a) 108 433.02 T
3 F
(typedef) 451.08 433.02 T
2 F
( declara-) 486.06 433.02 T
(tion.) 108 419.02 T
1 F
(4.7.3) 75.93 387.02 T
0 F
(T) 108 387.02 T
(emplate T) 114 387.02 T
(ypes) 166.66 387.02 T
2 F
(The template types are:) 108 361.02 T
3 10 Q
(<template_type_spec>) 108 342.35 T
(::=) 216 342.35 T
(<sequence_type>) 234 342.35 T
(|) 216 330.35 T
(<string_type>) 234 330.35 T
1 11 Q
(4.7.3.1) 69 305.68 T
0 F
(Sequences) 108 305.68 T
2 12 Q
-0.1 (IDL de\336nes the sequence type) 108 289.02 P
3 F
-0.09 (sequence) 255.71 289.02 P
2 F
-0.1 (. A sequence is a one-dimensional array with two) 301.08 289.02 P
(characteristics: a maximum size \050which is \336xed at compile time\051 and a length \050which is) 108 275.02 T
(determined at run time\051.) 108 261.02 T
(The syntax is:) 108 235.02 T
3 10 Q
(<sequence_type>) 108 216.35 T
(::=) 216 216.35 T
(\322sequence\323 \322<\323 <simple_type_spec> \322,\323 <positive_int_const> \322>\323) 234 216.35 T
(|) 216 204.35 T
(\322sequence\323 \322<\323 <simple_type_spec> \322>\323) 234 204.35 T
2 12 Q
(The second parameter in a sequence declaration indicates the maximum size of the) 108 179.02 T
-0.05 (sequence. If a positive integer constant is speci\336ed for the maximum size, the sequence is) 108 165.02 P
(termed a bounded sequence. Prior to passing a bounded sequence as a function ar) 108 151.02 T
(gument) 498.15 151.02 T
(\050or as a \336eld in a structure or union\051, the length of the sequence must be set in a language-) 108 137.02 T
(mapping dependent manner) 108 123.02 T
(. After receiving a sequence result from an operation invoca-) 240.57 123.02 T
-0.02 (tion, the length of the returned sequence will have been set; this value may be obtained in) 108 109.02 P
(a language-mapping dependent manner) 108 95.02 T
(.) 296.19 95.02 T
34 660.02 36 686.02 R
V
34 592.02 36 629.02 R
V
34 539.02 36 567.02 R
V
34 327.02 36 349.02 R
V
34 175.02 36 223.02 R
V
34 147.02 36 159.02 R
V
FMENDPAGE
%%EndPage: "70" 69
%%Page: "69" 69
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(T) 126 736.18 T
(ype Declaration) 131 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(69) 546.89 60.29 T
72 87.98 558 686.02 R
7 X
V
3 F
0 X
(|) 234 679.35 T
(<enum_type>) 252 679.35 T
(|) 234 667.35 T
(<scoped_name>) 252 667.35 T
(<switch_body>) 126 649.35 T
(::=) 234 649.35 T
(<case>) 252 649.35 T
7 8 Q
(+) 279.8 653.35 T
3 10 Q
(<case>) 126 631.35 T
(::=) 234 631.35 T
(<case_label>) 252 631.35 T
7 8 Q
(+) 303.04 635.35 T
3 10 Q
( <element_spec> \322;\323) 307.43 631.35 T
(<case_label>) 126 613.35 T
(::=) 234 613.35 T
(\322case\323 <const_exp> \322:\323) 252 613.35 T
(|) 234 601.35 T
(\322default\323 \322:\323) 252 601.35 T
(<element_spec>) 126 583.35 T
(::=) 234 583.35 T
(<type_spec> <declarator>) 252 583.35 T
2 12 Q
(IDL unions are a cross between the C) 126 558.02 T
5 F
(union) 309.19 558.02 T
2 F
( and) 345.17 558.02 T
5 F
(switch) 368.48 558.02 T
2 F
( statements. IDL unions must) 411.66 558.02 T
(be discriminated; that is, the union header must specify a typed tag \336eld that determines) 126 544.02 T
(which union member to use for the current instance of a call. The) 126 530.02 T
3 F
(<identi\336er>) 442.42 530.02 T
2 F
( following) 495.45 530.02 T
(the) 126 516.02 T
3 F
(union) 143.65 516.02 T
2 F
( keyword de\336nes a new legal type. Union types may also be named using a) 170.42 516.02 T
3 F
(typedef) 126 502.02 T
2 F
( declaration. The) 160.97 502.02 T
3 F
(<const_exp>) 244.9 502.02 T
2 F
( in a) 305.04 502.02 T
3 F
(<case_label>) 328.69 502.02 T
2 F
( must be consistent with the) 389.94 502.02 T
3 F
(<switch_type_spec>) 126 488.02 T
2 F
(. A) 221.67 488.02 T
3 F
(default) 239.33 488.02 T
2 F
( case can appear at most once. The) 271.56 488.02 T
3 F
(<scoped_name>) 441.08 488.02 T
2 F
( in the) 518.16 488.02 T
3 F
(<switch_type_spec>) 126 474.02 T
2 F
( production must be a previously de\336ned) 221.67 474.02 T
3 F
(integer) 420.55 474.02 T
2 F
(,) 452.86 474.02 T
3 F
(char) 458.85 474.02 T
2 F
(,) 479.15 474.02 T
3 F
(boolean) 485.14 474.02 T
2 F
( or) 522.85 474.02 T
3 F
(enum) 126 460.02 T
2 F
( type.) 152.23 460.02 T
(Case labels must match or be automatically castable to the de\336ned type of the discrimina-) 126 434.02 T
(tor) 126 420.02 T
(. The complete set of matching rules are shown in TBL. 10 on page 69.) 138.66 420.02 T
-0.16 (Name scoping rules require that the element declarators in a particular union be unique. If) 126 212.02 P
(the) 126 198.02 T
3 F
(<switch_type_spec>) 143.65 198.02 T
2 F
( is an) 239.33 198.02 T
3 F
(<enum_type>) 267.64 198.02 T
2 F
(, the identi\336er for the enumeration is in the) 331.05 198.02 T
(scope of the union; as a result, it must be distinct from the element declarators.) 126 184.02 T
(It is not required that all possible values of the union discriminator be listed in the) 126 158.02 T
3 F
-0.14 (<switch_body>) 126 144.02 P
2 F
-0.16 (. The value of a union is the value of the discriminator together with one of) 197.06 144.02 P
(the following:) 126 130.02 T
(\245) 126 110.02 T
-0.11 (if the discriminator value was explicitly listed in a) 144 110.02 P
3 F
-0.1 (case) 386.55 110.02 P
2 F
-0.11 ( statement, the value of the ele-) 408.42 110.02 P
(ment associated with that) 144 96.02 T
3 F
(case) 268.59 96.02 T
2 F
( statement;) 290.46 96.02 T
72 390.98 558 404.02 C
126 398.04 558 398.04 2 L
0.25 H
2 Z
0 X
0 K
N
72 398.04 117 398.04 2 L
0 Z
N
0 0 612 792 C
72 367.02 558 380.98 C
72 372.99 558 372.99 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
(TBL. 10) 72 384.32 T
0 F
(Case Label Matching) 126 384.32 T
1 9 Q
(Discriminator) 132 354.02 T
( T) 132 344.02 T
(ype) 139.32 344.02 T
(Matched By) 289.78 344.02 T
0 F
(long) 132 329.02 T
(any integer value in the value range of long) 204 329.02 T
(short) 132 314.02 T
(any integer value in the value range of short) 204 314.02 T
(unsigned long) 132 299.02 T
(any integer value in the value range of unsigned long) 204 299.02 T
(unsigned short) 132 284.02 T
(any integer value in the value range of unsigned short) 204 284.02 T
(char) 132 269.02 T
(char) 204 269.02 T
(boolean) 132 254.02 T
(TRUE or F) 204 254.02 T
(ALSE) 246.45 254.02 T
(enum) 132 239.02 T
(any enumerator for the discriminator enum type) 204 239.02 T
126 339.02 432 339.02 2 L
V
0.5 H
0 Z
N
126 234.02 432 234.02 2 L
V
N
52 554.02 54 686.02 R
V
52 498.02 54 510.02 R
V
52 92.02 54 428.02 R
V
52 326.02 54 335.02 R
V
52 311.02 54 320.02 R
V
52 296.02 54 305.02 R
V
52 281.02 54 290.02 R
V
52 266.02 54 275.02 R
V
52 251.02 54 260.02 R
V
52 236.02 54 245.02 R
V
FMENDPAGE
%%EndPage: "69" 68
%%Page: "68" 68
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(IDL Syntax and Semantics) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(68) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
1 11 Q
0 X
(4.7.1.6) 69 678.68 T
0 F
(Any T) 108 678.68 T
(ype) 136.09 678.68 T
2 12 Q
-0.35 (The) 108 662.02 P
3 F
-0.32 (any) 129.3 662.02 P
2 F
-0.35 ( type permits the speci\336cation of values that can express any IDL type. If used in a) 146.24 662.02 P
(request, an) 108 648.02 T
3 F
(any) 162.95 648.02 T
2 F
( must satisfy the constraints speci\336ed in Appendix A.) 179.9 648.02 T
1 F
(4.7.2) 75.93 616.02 T
0 F
(Constructed T) 108 616.02 T
(ypes) 182.66 616.02 T
2 F
(The constructed types are:) 108 598.02 T
3 10 Q
(<constr_type_spec>) 108 579.35 T
(::=) 216 579.35 T
(<struct_type>) 234 579.35 T
(|) 216 567.35 T
(<union_type>) 234 567.35 T
(|) 216 555.35 T
(<enum_type>) 234 555.35 T
2 12 Q
-0.08 (Although it is syntactically possible to generate recursive type speci\336cations in IDL, such) 108 530.02 P
-0.09 (recursion is semantically constrained. The only permissible form of recursive type speci\336-) 108 516.02 P
(cation is through the use of the) 108 502.02 T
3 F
(sequence) 258.9 502.02 T
2 F
( template type. For example, the following is) 304.27 502.02 T
(legal:) 108 488.02 T
3 10 Q
(struct foo {) 108 463.35 T
(long value;) 126 451.35 T
(sequence<foo> chain;) 126 439.35 T
(}) 108 427.35 T
2 12 Q
(See \2444.7.3.1 on page 70 for details of the) 108 402.02 T
3 F
(sequence) 307.86 402.02 T
2 F
( template type.) 353.23 402.02 T
1 11 Q
(4.7.2.1) 69 376.68 T
0 F
(Structures) 108 376.68 T
2 12 Q
(The structure syntax is:) 108 360.02 T
3 10 Q
(<struct_type>) 108 341.35 T
(::=) 216 341.35 T
(\322struct\323 <identi\336er> \322{\323 <member_list> \322}\323) 234 341.35 T
(<member_list>) 108 323.35 T
(::=) 216 323.35 T
(<member>) 234 323.35 T
7 8 Q
(+) 275.46 327.35 T
3 10 Q
(<member>) 108 305.35 T
(::=) 216 305.35 T
(<type_spec> <declarators> \322;\323) 234 305.35 T
2 12 Q
(The) 108 280.02 T
3 F
(<identi\336er>) 129.65 280.02 T
2 F
( in) 182.67 280.02 T
3 F
(<struct_type>) 198 280.02 T
2 F
( de\336nes a new legal type. Structure types may also be) 262.5 280.02 T
(named using a) 108 266.02 T
3 F
(typedef) 180.28 266.02 T
2 F
( declaration.) 215.26 266.02 T
(Name scoping rules require that the member declarators in a particular structure be) 108 240.02 T
(unique. The value of a) 108 226.02 T
3 F
(struct) 218.58 226.02 T
2 F
( is the value of all of its members.) 245.9 226.02 T
1 11 Q
(4.7.2.2) 69 200.68 T
0 F
(Discriminated Unions) 108 200.68 T
2 12 Q
(The discriminated) 108 184.02 T
3 F
(union) 197.94 184.02 T
2 F
( syntax is:) 224.71 184.02 T
3 10 Q
(<union_type>) 108 165.35 T
(::=) 216 165.35 T
(\322union\323 <identi\336er> \322switch\323 \322\050\323 <switch_type_spec> \322\051\323) 234 165.35 T
(\322{\323 <switch_body> \322}\323) 252 153.35 T
(<switch_type_spec>) 108 135.35 T
(::=) 216 135.35 T
(<integer_type>) 234 135.35 T
(|) 216 123.35 T
(<char_type>) 234 123.35 T
(|) 216 111.35 T
(<boolean_type>) 234 111.35 T
34 644.02 36 686.02 R
V
34 398.02 36 586.02 R
V
34 302.02 36 348.02 R
V
34 108.02 36 172.02 R
V
FMENDPAGE
%%EndPage: "68" 67
%%Page: "67" 67
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(T) 126 736.18 T
(ype Declaration) 131 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(67) 546.89 60.29 T
72 87.98 558 686.02 R
7 X
V
2 12 Q
0 X
(to the client if an attempt is made to convert an illegal value. The standard exceptions) 126 678.02 T
(which are to be signalled in such situations are de\336ned in \2444.13 on page 79.) 126 664.02 T
1 11 Q
(4.7.1.1) 87 638.68 T
0 F
(Integer T) 126 638.68 T
(ypes) 169.36 638.68 T
2 12 Q
(IDL supports) 126 622.02 T
3 F
(long) 192.62 622.02 T
2 F
( and) 213.38 622.02 T
3 F
(short) 236.7 622.02 T
2 F
( signed and) 261.29 622.02 T
3 F
(unsigned) 318.91 622.02 T
2 F
( integer data types.) 362.63 622.02 T
3 F
(long) 456.23 622.02 T
2 F
( represents the) 476.99 622.02 T
(range -) 126 608.02 T
(2) 159.63 608.02 T
2 8 Q
(31) 165.63 612.02 T
2 12 Q
(..) 176.62 608.02 T
(2) 185.62 608.02 T
2 8 Q
(31) 191.61 612.02 T
2 12 Q
(-) 202.61 608.02 T
(1 while) 209.6 608.02 T
3 F
(unsigned long) 248.24 608.02 T
2 F
( represents the range 0 .. 2) 315.45 608.02 T
2 8 Q
(32) 441.35 612.02 T
2 12 Q
( - 1.) 449.34 608.02 T
3 F
(short) 471.33 608.02 T
2 F
( represents) 495.91 608.02 T
(the range -) 126 594.02 T
(2) 177.28 594.02 T
2 8 Q
(15) 183.28 598.02 T
2 12 Q
( .. 2) 191.28 594.02 T
2 8 Q
(15) 209.27 598.02 T
2 12 Q
( - 1, while) 217.26 594.02 T
3 F
(unsigned) 268.89 594.02 T
(short) 315.61 594.02 T
2 F
(represents the range 0 .. 2) 342.93 594.02 T
2 8 Q
(16) 465.83 598.02 T
2 12 Q
( - 1.) 473.82 594.02 T
1 11 Q
(4.7.1.2) 87 568.68 T
0 F
(Floating-Point T) 126 568.68 T
(ypes) 202.94 568.68 T
2 12 Q
(IDL \337oating-point types are) 126 552.02 T
3 F
(\337oat) 263.24 552.02 T
2 F
( and) 284 552.02 T
3 F
(double) 307.32 552.02 T
2 F
(. The) 339.55 552.02 T
3 F
(\337oat) 367.2 552.02 T
2 F
( type represents IEEE single-preci-) 387.96 552.02 T
(sion \337oating point numbers; the) 126 538.02 T
3 F
(double) 281.59 538.02 T
2 F
( type represents IEEE double-precision \337oating) 313.83 538.02 T
(point numbers.The IEEE \337oating point standard speci\336cation \050) 126 524.02 T
4 F
(IEEE Standar) 427.14 524.02 T
(d for Binary) 493.66 524.02 T
-0.14 (Floating-Point Arithmetic) 126 510.02 P
2 F
-0.14 (, ANSI/IEEE Std 754-1985\051 should be consulted for more infor-) 250.8 510.02 P
(mation on the precision af) 126 496.02 T
(forded by these types.) 251.03 496.02 T
(Implementations that do not fully support the value set of the IEEE 754 \337oating-point) 126 470.02 T
(standard must completely specify their deviance from the standard.) 126 456.02 T
1 11 Q
(4.7.1.3) 87 430.68 T
0 F
(Char T) 126 430.68 T
(ype) 158.97 430.68 T
2 12 Q
(IDL de\336nes a) 126 404.02 T
3 F
(char) 194.28 404.02 T
2 F
( data type consisting of 8-bit quantities.) 215.05 404.02 T
-0.33 (The ISO Latin-1 \0508859.1\051 character set standard de\336nes the meaning and representation of) 126 378.02 P
(all possible graphic characters \050i.e., the space, alphabetic, digit and graphic characters) 126 364.02 T
(de\336ned in TBL. 2 on page 47, TBL. 3 on page 48, and TBL. 4 on page 48\051. The meaning) 126 350.02 T
(and representation of the null and formatting characters \050see TBL. 5 on page 50\051 is the) 126 336.02 T
-0.33 (numerical value of the character as de\336ned in the ASCII \050ISO 646\051 standard. The meaning) 126 322.02 P
(of all other characters is implementation-dependent.) 126 308.02 T
(During transmission, characters may be converted to other appropriate forms as required) 126 282.02 T
(by a particular language binding. Such conversions may change the representation of a) 126 268.02 T
(character but maintain the character) 126 254.02 T
(\325) 298.29 254.02 T
(s meaning. For example, a character may be con-) 301.62 254.02 T
(verted to and from the appropriate representation in international character sets.) 126 240.02 T
1 11 Q
(4.7.1.4) 87 214.68 T
0 F
(Boolean T) 126 214.68 T
(ype) 175.47 214.68 T
2 12 Q
(The) 126 198.02 T
3 F
(boolean) 147.65 198.02 T
2 F
( data type is used to denote a data item that can only take one of the values) 185.35 198.02 T
(TRUE and F) 126 184.02 T
(ALSE.) 186.41 184.02 T
1 11 Q
(4.7.1.5) 87 158.68 T
0 F
(Octet T) 126 158.68 T
(ype) 161.42 158.68 T
2 12 Q
(The) 126 142.02 T
3 F
(octet) 147.65 142.02 T
2 F
( type is an 8-bit quantity that is guaranteed not to under) 171.14 142.02 T
(go any conversion when) 436.42 142.02 T
(transmitted by the communication system.) 126 128.02 T
52 660.02 54 672.02 R
V
52 466.02 54 504.02 R
V
52 400.02 54 438.02 R
V
52 318.02 54 330.02 R
V
52 211.02 54 248.02 R
V
52 124.02 54 136.02 R
V
FMENDPAGE
%%EndPage: "67" 66
%%Page: "66" 66
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(IDL Syntax and Semantics) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(66) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
3 10 Q
0 X
(<constr_type_spec>) 108 679.35 T
(::=) 216 679.35 T
(<struct_type>) 234 679.35 T
(|) 216 667.35 T
(<union_type>) 234 667.35 T
(|) 216 655.35 T
(<enum_type>) 234 655.35 T
(<declarators>) 108 637.35 T
(::=) 216 637.35 T
(<declarator> { \322,\323 <declarator> }) 234 637.35 T
7 8 Q
(*) 358.37 641.35 T
3 10 Q
(<declarator>) 108 619.35 T
(::=) 216 619.35 T
(<simple_declarator>) 234 619.35 T
(|) 216 607.35 T
(<complex_declarator>) 234 607.35 T
(<simple_declarator>) 108 589.35 T
(::=) 216 589.35 T
(<identi\336er>) 234 589.35 T
(<complex_declarator>) 108 571.35 T
(::=) 216 571.35 T
(<array_declarator>) 234 571.35 T
2 12 Q
(The) 108 546.02 T
3 F
(<scoped_name>) 129.65 546.02 T
2 F
( in) 206.73 546.02 T
3 F
(<simple_type_spec>) 222.06 546.02 T
2 F
( must be a previously de\336ned type.) 318.28 546.02 T
-0.09 (As seen above, IDL type speci\336ers consist of scalar data types and type constructors. IDL) 108 520.02 P
(type speci\336ers can be used in operation declarations to assign data types to operation) 108 506.02 T
(parameters. The next sections describe basic and constructed type speci\336ers.) 108 492.02 T
1 F
(4.7.1) 75.93 460.02 T
0 F
(Basic T) 108 460.02 T
(ypes) 147.33 460.02 T
2 F
(The syntax for the supported basic types is as follows:) 108 442.02 T
3 10 Q
(<\337oating_pt_type>) 108 423.35 T
(::=) 216 423.35 T
(\322\337oat\323) 234 423.35 T
(|) 216 411.35 T
(\322double\323) 234 411.35 T
(<integer_type>) 108 393.35 T
(::=) 216 393.35 T
(<signed_int>) 234 393.35 T
(|) 216 381.35 T
(<unsigned_int>) 234 381.35 T
(<signed_int>) 108 363.35 T
(::=) 216 363.35 T
(<signed_long_int>) 234 363.35 T
(|) 216 351.35 T
(<signed_short_int>) 234 351.35 T
(<signed_long_int>) 108 333.35 T
(::=) 216 333.35 T
(\322long\323) 234 333.35 T
(<signed_short_int>) 108 315.35 T
(::=) 216 315.35 T
(\322short\323) 234 315.35 T
(<unsigned_int>) 108 297.35 T
(::=) 216 297.35 T
(<unsigned_long_int>) 234 297.35 T
(|) 216 285.35 T
(<unsigned_short_int>) 234 285.35 T
(<unsigned_long_int>) 108 267.35 T
(::=) 216 267.35 T
(\322unsigned\323 \322long\323) 234 267.35 T
(<unsigned_short_int>) 108 249.35 T
(::=) 216 249.35 T
(\322unsigned\323 \322short\323) 234 249.35 T
(<char_type>) 108 231.35 T
(::=) 216 231.35 T
(\322char\323) 234 231.35 T
(<boolean_type>) 108 213.35 T
(::=) 216 213.35 T
(\322boolean\323) 234 213.35 T
(<octet_type>) 108 195.35 T
(::=) 216 195.35 T
(\322octet\323) 234 195.35 T
(<any_type>) 108 177.35 T
(::=) 216 177.35 T
(\322any\323) 234 177.35 T
2 12 Q
-0.21 (Each IDL data type is mapped to a native data type via the appropriate language mapping.) 108 152.02 P
(Conversion errors between IDL data types and the native types to which they are mapped) 108 138.02 T
(can occur during the performance of an operation invocation. The invocation mechanism) 108 124.02 T
-0.25 (\050client stub, dynamic invocation engine, and skeletons\051 may signal an exception condition) 108 110.02 P
34 568.02 36 686.02 R
V
34 516.02 36 528.02 R
V
34 174.02 36 430.02 R
V
34 106.02 36 132.02 R
V
FMENDPAGE
%%EndPage: "66" 65
%%Page: "65" 65
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(T) 126 736.18 T
(ype Declaration) 131 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(65) 546.89 60.29 T
72 87.98 558 686.02 R
7 X
V
2 12 Q
0 X
(The \322>>\323 binary operator indicates that the value of the left operand should be shifted) 126 678.02 T
-0.09 (right the number of bits speci\336ed by the right operand, with 0 \336ll for the vacated bits. The) 126 664.02 P
(right operand must be in the range 0 <= right operand < 32.) 126 650.02 T
(The \322&\323 binary operator indicates that the logical, bitwise AND of the left and right oper-) 126 624.02 T
(ands should be generated.) 126 610.02 T
-0.28 (The \322|\323 binary operator indicates that the logical, bitwise OR of the left and right operands) 126 584.02 P
(should be generated.) 126 570.02 T
-0.45 (The \322^\323 binary operator indicates that the logical, bitwise EXCLUSIVE-OR of the left and) 126 544.02 P
(right operands should be generated.) 126 530.02 T
3 F
(<positive_int_const>) 126 504.02 T
2 F
(must evaluate to a positive integer constant.) 226.58 504.02 T
72 457.99 558 461.02 C
126 459.5 558 459.5 2 L
0.25 H
2 Z
0 X
0 K
N
72 459.5 117 459.5 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(4.7) 101.15 465.68 T
0 F
(T) 126 465.68 T
(ype Declaration) 133.78 465.68 T
2 12 Q
(IDL provides constructs for naming data types; that is, it provides C language-like decla-) 126 439.99 T
-0.31 (rations that associate an identi\336er with a type. IDL uses the) 126 425.99 P
3 F
-0.29 (typedef) 409.68 425.99 P
2 F
-0.31 ( keyword to associate a) 444.66 425.99 P
-0.18 (name with a data type; a name is also associated with a data type via the) 126 411.99 P
3 F
-0.17 (struct) 472.15 411.99 P
2 F
-0.18 (,) 499.47 411.99 P
3 F
-0.17 (union) 505.28 411.99 P
2 F
-0.18 (, and) 532.05 411.99 P
3 F
(enum) 126 397.99 T
2 F
( declarations; the syntax is:) 152.23 397.99 T
3 10 Q
(<type_dcl>) 126 379.33 T
(::=) 234 379.33 T
(\322typedef\323 <type_declarator>) 252 379.33 T
(|) 234 367.33 T
(<struct_type>) 252 367.33 T
(|) 234 355.33 T
(<union_type>) 252 355.33 T
(|) 234 343.33 T
(<enum_type>) 252 343.33 T
(<type_declarator>) 126 325.33 T
(::=) 234 325.33 T
(<type_spec> <declarators>) 252 325.33 T
2 12 Q
(For type declarations, IDL de\336nes a set of type speci\336ers to represent typed values. The) 126 299.99 T
(syntax is as follows:) 126 285.99 T
3 10 Q
(<type_spec>) 126 267.33 T
(::=) 234 267.33 T
(<simple_type_spec>) 252 267.33 T
(|) 234 255.33 T
(<constr_type_spec>) 252 255.33 T
(<simple_type_spec>) 126 237.33 T
(::=) 234 237.33 T
(<base_type_spec>) 252 237.33 T
(|) 234 225.33 T
(<template_type_spec>) 252 225.33 T
(|) 234 213.33 T
(<scoped_name>) 252 213.33 T
(<base_type_spec>) 126 195.33 T
(::=) 234 195.33 T
(<\337oating_pt_type>) 252 195.33 T
(|) 234 183.33 T
(<integer_type>) 252 183.33 T
(|) 234 171.33 T
(<char_type>) 252 171.33 T
(|) 234 159.33 T
(<boolean_type>) 252 159.33 T
(|) 234 147.33 T
(<octet_type>) 252 147.33 T
(|) 234 135.33 T
(<any_type>) 252 135.33 T
(<template_type_spec>) 126 117.33 T
(::=) 234 117.33 T
(<sequence_type>) 252 117.33 T
(|) 234 105.33 T
(<string_type>) 252 105.33 T
52 620.02 54 632.02 R
V
52 580.02 54 592.02 R
V
52 540.02 54 552.02 R
V
52 321.99 54 385.99 R
V
52 101.99 54 273.99 R
V
FMENDPAGE
%%EndPage: "65" 64
%%Page: "64" 64
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(IDL Syntax and Semantics) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(64) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
3 10 Q
0 X
(<positive_int_const>) 108 679.35 T
(::=) 216 679.35 T
(<const_exp>) 234 679.35 T
1 12 Q
(4.6.2) 75.93 648.02 T
0 F
(Semantics) 108 648.02 T
2 F
-0.31 (The) 108 630.02 P
3 F
-0.28 (<scoped_name>) 129.34 630.02 P
2 F
-0.31 ( in the) 206.43 630.02 P
3 F
-0.28 (<const_type>) 238.49 630.02 P
2 F
-0.31 ( production must be a previously de\336ned name of) 301.9 630.02 P
(an) 108 616.02 T
3 F
(<integer_) 122.32 616.02 T
(type>) 166.32 616.02 T
2 F
(,) 192.29 616.02 T
3 F
(<char_type>) 198.29 616.02 T
2 F
(,) 256.24 616.02 T
3 F
(<boolean_type>) 262.23 616.02 T
2 F
(,) 337.12 616.02 T
3 F
(<\337oating_pt_type>) 343.12 616.02 T
2 F
(, or) 430.56 616.02 T
3 F
(<string_type>) 449.55 616.02 T
2 F
( con-) 514.05 616.02 T
(stant.) 108 602.02 T
(Mixed type expressions \050e.g. integers mixed with \337oats\051 are illegal.) 108 576.02 T
(An integer constant expression is evaluated as unsigned long unless it contains a negated) 108 550.02 T
(integer literal or the name of an integer constant with a negative value. In the latter case,) 108 536.02 T
(the constant expression is evaluated as signed long. The computed value is coerced back) 108 522.02 T
(to the tar) 108 508.02 T
(get type in constant initializers. It is an error if the computed value exceeds the) 150.42 508.02 T
-0.32 (precision of the tar) 108 494.02 P
-0.32 (get type. It is an error if any intermediate value exceeds the range of the) 197.09 494.02 P
(evaluated-as type \050long or unsigned long\051.) 108 480.02 T
(All \337oating-point literals are double, all \337oating-point constants are coerced to double,) 108 454.02 T
-0.18 (and all \337oating-point expressions are computed as doubles. The computed double value is) 108 440.02 P
-0.17 (coerced back to the tar) 108 426.02 P
-0.17 (get type in constant initializers. It is an error if this coercion fails or) 215.65 426.02 P
(if any intermediate values \050when evaluating the expression\051 exceed the range of double.) 108 412.02 T
-0.34 (Unary \050+   \320\051 and binary \050*   /   +   \320\051 operators are applicable in \337oating-point expressions.) 108 386.02 P
-0.04 (Unary \050+   \320   ~\051 and binary \050*   /   %   +   \320   <<   >>   &   |   ^\051 operators are applicable in) 108 372.02 P
(integer expressions.) 108 358.02 T
(The \322~\323 unary operator indicates that the bit-complement of the expression to which it is) 108 332.02 T
-0.12 (applied should be generated. For the purposes of such expressions, the values are 2\325) 108 318.02 P
-0.12 (s com-) 507.81 318.02 P
(plement numbers. As such, the complement can be generated as follows:) 108 304.02 T
3 F
(long) 108 278.02 T
2 F
(\320\050value+1\051) 234 278.02 T
3 F
(unsigned long) 108 252.02 T
2 F
(\0502**32 \320 1\051 \320 value) 234 252.02 T
(The \322%\323 binary operator yields the remainder from the division of the \336rst expression by) 108 226.02 T
(the second. If the second operand of \322%\323 is 0, the result is unde\336ned; otherwise) 108 212.02 T
3 10 Q
(\050a/b\051*b + a%b) 108 193.35 T
2 12 Q
(is equal to a. If both operands are nonnegative, then the remainder is nonnegative; if not,) 108 168.02 T
(the sign of the remainder is implementation dependent.) 108 154.02 T
(The \322<<\323binary operator indicates that the value of the left operand should be shifted left) 108 128.02 T
-0.09 (the number of bits speci\336ed by the right operand, with 0 \336ll for the vacated bits. The right) 108 114.02 P
(operand must be in the range 0 <= right operand < 32.) 108 100.02 T
34 676.02 36 686.02 R
V
34 572.02 36 624.02 R
V
34 368.02 36 394.02 R
V
34 124.02 36 286.02 R
V
FMENDPAGE
%%EndPage: "64" 63
%%Page: "63" 63
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(Constant Declaration) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(63) 546.89 60.29 T
72 87.98 558 686.02 R
7 X
V
1 12 Q
0 X
(4.6.1) 93.93 678.02 T
0 F
(Syntax) 126 678.02 T
2 F
(The syntax for a constant declaration is:) 126 660.02 T
3 10 Q
(<const_dcl>) 126 641.35 T
(::=) 234 641.35 T
(\322const\323 <const_type> <identi\336er> \322=\323 <const_exp>) 252 641.35 T
(<const_type>) 126 623.35 T
(::=) 234 623.35 T
(<integer_type>) 252 623.35 T
(|) 234 611.35 T
(<char_type>) 252 611.35 T
(|) 234 599.35 T
(<boolean_type>) 252 599.35 T
(|) 234 587.35 T
(<\337oating_pt_type>) 252 587.35 T
(|) 234 575.35 T
(<string_type>) 252 575.35 T
(|) 234 563.35 T
(<scoped_name>) 252 563.35 T
(<const_exp>) 126 545.35 T
(::=) 234 545.35 T
(<or_expr>) 252 545.35 T
(<or_expr>) 126 527.35 T
(::=) 234 527.35 T
(<xor_expr>) 252 527.35 T
(|) 234 515.35 T
(<or_expr> \322|\323 <xor_expr>) 252 515.35 T
(<xor_expr>) 126 497.35 T
(::=) 234 497.35 T
(<and_expr>) 252 497.35 T
(|) 234 485.35 T
(<xor_expr> \322^\323 <and_expr>) 252 485.35 T
(<and_expr>) 126 467.35 T
(::=) 234 467.35 T
(<shift_expr>) 252 467.35 T
(|) 234 455.35 T
(<and_expr> \322&\323 <shift_expr>) 252 455.35 T
(<shift_expr>) 126 437.35 T
(::=) 234 437.35 T
(<add_expr>) 252 437.35 T
(|) 234 425.35 T
(<shift_expr> \322>>\323 <add_expr>) 252 425.35 T
(|) 234 413.35 T
(<shift_expr> \322<<\323 <add_expr>) 252 413.35 T
(<add_expr>) 126 395.35 T
(::=) 234 395.35 T
(<mult_expr>) 252 395.35 T
(|) 234 383.35 T
(<add_expr> \322+\323 <mult_expr>) 252 383.35 T
(|) 234 371.35 T
(<add_expr> \322-\323 <mult_expr>) 252 371.35 T
(<mult_expr>) 126 353.35 T
(::=) 234 353.35 T
(<unary_expr>) 252 353.35 T
(|) 234 341.35 T
(<mult_expr> \322*\323 <unary_expr>) 252 341.35 T
(|) 234 329.35 T
(<mult_expr> \322/\323 <unary_expr>) 252 329.35 T
(|) 234 317.35 T
(<mult_expr> \322%\323 <unary_expr>) 252 317.35 T
(<unary_expr>) 126 299.35 T
(::=) 234 299.35 T
(<unary_operator> <primary_expr>) 252 299.35 T
(|) 234 287.35 T
(<primary_expr>) 252 287.35 T
(<unary_operator>) 126 269.35 T
(::=) 234 269.35 T
(\322-\323) 252 269.35 T
(|) 234 257.35 T
(\322+\323) 252 257.35 T
(|) 234 245.35 T
(\322~\323) 252 245.35 T
(<primary_expr>) 126 227.35 T
(::=) 234 227.35 T
(<scoped_name>) 252 227.35 T
(|) 234 215.35 T
(<literal>) 252 215.35 T
(|) 234 203.35 T
(\322\050\323 <const_exp> \322\051\323) 252 203.35 T
(<literal>) 126 185.35 T
(::=) 234 185.35 T
(<integer_literal>) 252 185.35 T
(|) 234 173.35 T
(<string_literal>) 252 173.35 T
(|) 234 161.35 T
(<character_literal>) 252 161.35 T
(|) 234 149.35 T
(<\337oating_pt_literal>) 252 149.35 T
(|) 234 137.35 T
(<boolean_literal>) 252 137.35 T
(<boolean_literal>) 126 119.35 T
(::=) 234 119.35 T
(\322TRUE\323) 252 119.35 T
(|) 234 107.35 T
(\322F) 252 107.35 T
(ALSE\323) 260.65 107.35 T
52 104.02 54 648.02 R
V
FMENDPAGE
%%EndPage: "63" 62
%%Page: "62" 62
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(IDL Syntax and Semantics) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(62) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
2 12 Q
0 X
-0.22 (References to constants, types, and exceptions are bound to an interface when it is de\336ned) 108 678.02 P
(i.e., replaced with the equivalent global) 108 664.02 T
3 F
(<scoped_name>) 300.19 664.02 T
2 F
(s. This guarantees that the syntax) 377.28 664.02 T
(and semantics of an interface are not changed when the interface is a base class for a) 108 650.02 T
(derived class. Consider the following example:) 108 636.02 T
3 10 Q
(const long L = 3;) 108 611.35 T
(interface A {) 108 587.35 T
(void f \050in \337oat s[L]\051;) 126 575.35 T
(// s has 3 \337oats) 270 575.35 T
(};) 108 563.35 T
(interface B {) 108 539.35 T
(const long L = 4;) 126 527.35 T
(};) 108 515.35 T
(interface C: B, A {) 108 491.35 T
(}) 177.22 491.35 T
(// what is f\050\051\325) 270 491.35 T
(s signature?) 317.06 491.35 T
2 12 Q
(The early binding of constants, types, and exceptions at interface de\336nition guarantees) 108 466.02 T
(that the signature of operation) 108 452.02 T
3 F
(f) 254.9 452.02 T
2 F
( in interface) 258.17 452.02 T
3 F
(C) 318.45 452.02 T
2 F
( is) 325.55 452.02 T
3 10 Q
(void f\050in \337oat s[3]\051;) 108 433.35 T
2 12 Q
(which is identical to that in interface) 108 408.02 T
3 F
(A) 286.21 408.02 T
2 F
(. This rule also prevents rede\336nition of a constant,) 293.31 408.02 T
(type, or exception in the derived interface from af) 108 394.02 T
(fecting the operations and attributes) 346.58 394.02 T
(inherited from a base interface.) 108 380.02 T
(Interface inheritance causes all identi\336ers in the closure of the inheritance tree to be) 108 354.02 T
(imported into the current naming scope. A type name, constant name, enumeration value) 108 340.02 T
(name, or exception name from an enclosing scope can be rede\336ned in the current scope.) 108 326.02 T
(An attempt to use an ambiguous name without quali\336cation is a compilation error) 108 312.02 T
(.) 499.77 312.02 T
-0.1 (Operation names are used at runtime by both the stub and dynamic interfaces. As a result,) 108 286.02 P
(all operations that might apply to a particular object must have unique names. This) 108 272.02 T
-0.43 (requirement prohibits rede\336ning an operation name in a derived class, as well as inheriting) 108 258.02 P
(two operations with the same name.) 108 244.02 T
1 F
(NOTE) 69.28 218.02 T
4 F
(It is anticipated that futur) 108 218.02 T
(e r) 230.84 218.02 T
(evisions of the language may r) 243.38 218.02 T
(elax this rule in some way) 389.85 218.02 T
(,) 514.11 218.02 T
-0.26 (per) 108 204.02 P
-0.26 (haps allowing overloading or pr) 123.77 204.02 P
-0.26 (oviding some means to distinguish operations with the) 278.21 204.02 P
(same name.) 108 190.02 T
54 143.99 540 147.02 C
108 145.5 540 145.5 2 L
0.25 H
2 Z
0 X
0 K
N
54 145.5 99 145.5 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(4.6) 83.15 151.68 T
0 F
(Constant Declaration) 108 151.68 T
2 12 Q
(This section describes the syntax for constant declarations.) 108 125.99 T
34 646.02 36 686.02 R
V
34 608.02 36 618.02 R
V
34 560.02 36 594.02 R
V
34 512.02 36 546.02 R
V
34 147.02 36 498.02 R
V
FMENDPAGE
%%EndPage: "62" 61
%%Page: "61" 61
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(Inheritance) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(61) 546.89 60.29 T
72 87.98 558 686.02 R
7 X
V
2 12 Q
0 X
-0.18 (An interface is called a direct base if it is mentioned in the) 126 678.02 P
3 F
-0.17 (<inheritance_spec>) 406.41 678.02 P
2 F
-0.18 ( and an indi-) 498.26 678.02 P
(rect base if it is not a direct base but is a base interface of one of the interfaces mentioned) 126 664.02 T
(in the) 126 650.02 T
3 F
(<inheritance_spec>) 155.98 650.02 T
2 F
(.) 247.83 650.02 T
(An interface may be derived from any number of base interfaces. Such use of more than) 126 624.02 T
-0.29 (one direct base interface is often called multiple inheritance. The order of derivation is not) 126 610.02 P
(signi\336cant.) 126 596.02 T
(An interface may not be speci\336ed as a direct base interface of a derived interface more) 126 570.02 T
(than once; it may be an indirect base interface more than once. Consider the following) 126 556.02 T
(example:) 126 542.02 T
3 10 Q
(interface A { ... }) 126 517.35 T
(interface B: A { ... }) 126 505.35 T
(interface C: A { ... }) 126 493.35 T
(interface D: B, C { ... }) 126 481.35 T
2 12 Q
(The relationships between these interfaces is shown in FIG. 1) 126 456.02 T
(1 on page 61. This \322dia-) 420.68 456.02 T
(mond\323 shape is legal.) 126 442.02 T
72 410.98 558 424.02 C
126 418.04 558 418.04 2 L
0.25 H
2 Z
0 X
0 K
N
72 418.04 117 418.04 2 L
0 Z
N
0 0 612 792 C
72 387.02 558 400.98 C
72 392.99 558 392.99 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
(FIG.  1) 72 404.32 T
(1) 102 404.32 T
0 F
(Legal Multiple Inheritance Example) 126 404.32 T
2 12 Q
(Reference to base interface elements must be unambiguous. Reference to a base interface) 126 191 T
(element is ambiguous if the expression used refers to a constant, type, or exception in) 126 177 T
-0.12 (more than one base interface. \050It is currently illegal to inherit from two interfaces with the) 126 163 P
(same operation or attribute name, or to rede\336ne an operation or attribute name in the) 126 149 T
(derived interface.\051 Ambiguities can be resolved by qualifying a name with its interface) 126 135 T
(name \050i.e., using a) 126 121 T
3 F
(<scoped_name>) 216.93 121 T
2 F
(\051.) 294.02 121 T
72 87.98 558 686.02 C
126 211 558 387.02 C
126 211 558 387.02 R
7 X
0 K
V
1 9 Q
0 X
(A) 197.51 372.23 T
(B) 135.26 301.71 T
(C) 260.76 301.73 T
(D) 198.76 230.71 T
189.47 364.75 200 370.52 194.13 360.05 191.8 362.4 4 Y
V
191.8 362.4 139 309.52 2 L
0.5 H
2 Z
N
252.97 294.01 263.49 299.77 257.62 289.3 255.3 291.65 4 Y
V
255.3 291.65 202.5 238.77 2 L
N
145.37 290.05 139.5 300.52 150.02 294.76 147.7 292.4 4 Y
V
147.7 292.4 200.5 239.52 2 L
N
208.11 359.8 202.24 370.27 212.77 364.5 210.44 362.15 4 Y
V
210.45 362.15 263.25 309.27 2 L
N
72 87.98 558 686.02 C
0 0 612 792 C
52 478.02 54 524.02 R
0 X
0 K
V
52 117 54 199 R
V
FMENDPAGE
%%EndPage: "61" 60
%%Page: "60" 60
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(IDL Syntax and Semantics) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(60) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
2 12 Q
0 X
(\245) 108 678.02 T
(Constant declarations, which specify the constants that the interface exports; constant) 126 678.02 T
(declaration syntax is described in \2444.6 on page 62.) 126 664.02 T
(\245) 108 647.02 T
(T) 126 647.02 T
(ype declarations, which specify the type de\336nitions that the interface exports; type) 132.49 647.02 T
(declaration syntax is described in \2444.7 on page 65.) 126 633.02 T
(\245) 108 616.02 T
(Exception declarations, which specify the exception structures that the interface) 126 616.02 T
(exports; exception declaration syntax is described in \2444.8 on page 72.) 126 602.02 T
(\245) 108 585.02 T
(Attribute declarations, which specify the associated attributes exported by the inter-) 126 585.02 T
(face; attribute declaration syntax is described in \2444.10 on page 75.) 126 571.02 T
(\245) 108 554.02 T
-0.11 (Operation declarations, which specify the operations that the interface exports and the) 126 554.02 P
(format of each, including operation name, the type of data returned, the types of all) 126 540.02 T
(parameters of an operation, legal exceptions which may be returned as a result of an) 126 526.02 T
(invocation, and contextual information which may af) 126 512.02 T
(fect method dispatch; operation) 380.61 512.02 T
(declaration syntax is described in \2444.9 on page 72.) 126 498.02 T
(Empty interfaces \050i.e. those that contain no declarations\051 are permitted.) 108 472.02 T
(Some implementations may require interface-speci\336c pragmas to precede the interface) 108 446.02 T
(body) 108 432.02 T
(.) 131.21 432.02 T
1 11 Q
(4.4.2.4) 69 406.68 T
0 F
(Forward Declaration) 108 406.68 T
2 12 Q
(A forward declaration declares the name of an interface without de\336ning it. This permits) 108 390.02 T
(the de\336nition of interfaces that refer to each other) 108 376.02 T
(. The syntax consists simply of the key-) 345.15 376.02 T
(word) 108 362.02 T
3 F
(interface) 135.65 362.02 T
2 F
( followed by an) 176.64 362.02 T
3 F
(<identi) 254.58 362.02 T
(\336er>) 286.56 362.02 T
2 F
( that names the interface. The actual de\336nition) 307.61 362.02 T
(must follow later in the speci\336cation.) 108 348.02 T
(Multiple forward declarations of the same interface name are legal.) 108 322.02 T
54 275.99 540 279.02 C
108 277.5 540 277.5 2 L
0.25 H
2 Z
0 X
0 K
N
54 277.5 99 277.5 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(4.5) 83.15 283.68 T
0 F
(Inheritance) 108 283.68 T
2 12 Q
-0.41 (An interface can be derived from another interface, which is then called a) 108 253.99 P
4 F
-0.41 (base) 458.32 253.99 P
2 F
-0.41 ( interface of) 480.3 253.99 P
(the derived interface. A derived interface, like all interfaces, may declare new elements) 108 239.99 T
(\050constants, types, attributes, exceptions, and operations\051. In addition, unless rede\336ned in) 108 225.99 T
-0.29 (the derived interface, the elements of a base interface can be referred to as if they were ele-) 108 211.99 P
-0.21 (ments of the derived interface. The name resolution operator \050\322::\323\051 may be used to refer to) 108 197.99 P
(a base element explicitly; this permits reference to a name that has been rede\336ned in the) 108 183.99 T
(derived interface.) 108 169.99 T
(A derived interface may rede\336ne any of the type, constant, and exception names which) 108 143.99 T
(have been inherited; the scope rules for such names are described in \2444.1) 108 129.99 T
(1 on page 76.) 457.61 129.99 T
34 428.02 36 686.02 R
V
34 249.99 36 398.02 R
V
34 179.99 36 191.99 R
V
34 125.99 36 137.99 R
V
FMENDPAGE
%%EndPage: "60" 59
%%Page: "59" 59
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(IDL Speci\336cation) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(59) 546.89 60.29 T
72 87.98 558 686.02 R
7 X
V
1 12 Q
0 X
(4.4.2) 93.93 678.02 T
0 F
(Interface Declaration) 126 678.02 T
2 F
(An interface de\336nition satis\336es the following syntax:) 126 652.02 T
3 10 Q
(<interface>) 126 633.35 T
(::=) 234 633.35 T
(<interface_dcl>) 252 633.35 T
(|) 234 621.35 T
(<forward_dcl>) 252 621.35 T
(<interface_dcl>) 126 603.35 T
(::=) 234 603.35 T
(<interface_header> \322{\323 <interface_body> \322}\323) 252 603.35 T
(<forward_dcl>) 126 585.35 T
(::=) 234 585.35 T
(\322interface\323 <identi\336er>) 252 585.35 T
(<interface_header>) 126 567.35 T
(::=) 234 567.35 T
(\322interface\323 <identi\336er> [ <inheritance_spec> ]) 252 567.35 T
(<interface_body>) 126 549.35 T
(::=) 234 549.35 T
(<export>) 252 549.35 T
2 8 Q
(*) 286.62 553.35 T
3 10 Q
(<export>) 126 531.35 T
(::=) 234 531.35 T
(<type_dcl> \322;\323) 252 531.35 T
(|) 234 519.35 T
(<const_dcl> \322;\323) 252 519.35 T
(|) 234 507.35 T
(<except_dcl> \322;\323) 252 507.35 T
(|) 234 495.35 T
(<attr_dcl> \322;\323) 252 495.35 T
(|) 234 483.35 T
(<op_dcl> \322;\323) 252 483.35 T
1 11 Q
(4.4.2.1) 87 458.68 T
0 F
(Interface Header) 126 458.68 T
2 12 Q
(The interface header consists of two elements:) 126 442.02 T
(\245) 126 422.02 T
(The interface name. The name must be preceded by the keyword) 144 422.02 T
3 F
(interface) 457.74 422.02 T
2 F
(, and con-) 498.73 422.02 T
(sists of an identi\336er that names the interface.) 144 408.02 T
(\245) 126 391.02 T
(An optional inheritance speci\336cation. The inheritance speci\336cation is described in) 144 391.02 T
(\2444.4.2.2 on page 59.) 144 377.02 T
(The) 126 351.02 T
3 F
(<identi\336er>) 147.65 351.02 T
2 F
( that names an interface de\336nes a legal type name. Such a type name may) 200.67 351.02 T
-0.45 (be used anywhere an) 126 337.02 P
3 F
-0.41 (<identi\336er>) 227.44 337.02 P
2 F
-0.45 ( is legal in the grammar, subject to semantic constraints as) 280.46 337.02 P
(described in the following sections. Since one can only hold references to an object, the) 126 323.02 T
-0.18 (meaning of a parameter or structure member which is an interface type is as a) 126 309.02 P
4 F
-0.18 (r) 498.64 309.02 P
-0.18 (efer) 502.86 309.02 P
-0.18 (ence) 521.06 309.02 P
2 F
-0.18 ( to) 543.03 309.02 P
-0.17 (an object supporting that interface. Each language binding describes how the programmer) 126 295.02 P
(must represent such interface references.) 126 281.02 T
1 11 Q
(4.4.2.2) 87 255.68 T
0 F
(Inheritance Speci\336cation) 126 255.68 T
2 12 Q
(The syntax for inheritance is as follows:) 126 239.02 T
3 10 Q
(<inheritance_spec>) 126 220.35 T
(::= \322:\323 <scoped_name> {\322,\323 <scoped_name>}*) 234 220.35 T
(<scoped_name>) 126 202.35 T
(::= <identi\336er>) 234 202.35 T
(| \322::\323 <identi\336er>) 234 190.35 T
(| <scoped_name> \322::\323 <identi\336er>) 234 178.35 T
2 12 Q
(Each) 126 153.02 T
3 F
(<scoped_name>) 152.97 153.02 T
2 F
( in an) 230.05 153.02 T
3 F
(<inheritance_spec>) 259.7 153.02 T
2 F
( must denote a previously de\336ned inter-) 351.55 153.02 T
(face. See \2444.5 on page 60 for the description of inheritance.) 126 139.02 T
1 11 Q
(4.4.2.3) 87 113.68 T
0 F
(Interface Body) 126 113.68 T
2 12 Q
(The interface body contains the following kinds of declarations:) 126 97.02 T
52 674.02 54 686.02 R
V
52 480.02 54 640.02 R
V
52 373.02 54 385.02 R
V
52 252.02 54 263.02 R
V
52 175.02 54 227.02 R
V
52 135.02 54 147.02 R
V
52 93.02 54 105.02 R
V
FMENDPAGE
%%EndPage: "59" 58
%%Page: "58" 58
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(IDL Syntax and Semantics) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(58) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
3 10 Q
0 X
(\05062\051) 108 679.35 T
(<string_type>) 126 679.35 T
(::=) 216 679.35 T
(\322string\323 \322<\323 <positive_int_const> \322>\323) 234 679.35 T
(|) 216 667.35 T
(\322string\323) 234 667.35 T
(\05063\051) 108 649.35 T
(<array_declarator>) 126 649.35 T
(::=) 216 649.35 T
(<identi\336er> <\336xed_array_size>) 234 649.35 T
7 8 Q
(+) 353.82 653.35 T
3 10 Q
(\05064\051) 108 631.35 T
(<\336xed_array_size>) 126 631.35 T
(::=) 216 631.35 T
(\322[\323 <positive_int_const> \322]\323) 234 631.35 T
(\05065\051) 108 613.35 T
(<attr_dcl>) 126 613.35 T
(::=) 216 613.35 T
([ \322readonly\323 ] \322attribute\323 <simple_type_spec> <declarators>) 234 613.35 T
(\05066\051) 108 595.35 T
(<except_dcl>) 126 595.35 T
(::=) 216 595.35 T
(\322exception\323 <identi\336er> \322{\322 <member>* \322}\323) 234 595.35 T
(\05067\051) 108 577.35 T
(<op_dcl>) 126 577.35 T
(::=) 216 577.35 T
([ <op_attribute> ] <op_type_spec> <identi\336er> <parameter_dcls>) 234 577.35 T
([ <raises_expr> ] [ <context_expr> ]) 252 565.35 T
(\05068\051) 108 547.35 T
(<op_attribute>) 126 547.35 T
(::=) 216 547.35 T
(\322oneway\323) 234 547.35 T
(\05069\051) 108 529.35 T
(<op_type_spec>) 126 529.35 T
(::=) 216 529.35 T
(<simple_type_spec>) 234 529.35 T
(|) 216 517.35 T
(\322void\323) 234 517.35 T
(\05070\051) 108 499.35 T
(<parameter_dcls>) 126 499.35 T
(::=) 216 499.35 T
(\322\050\323 <param_dcl> { \322,\323 <param_dcl> }) 234 499.35 T
7 8 Q
(*) 374.31 503.35 T
3 10 Q
( \322\051\323) 378.31 499.35 T
(|) 216 487.35 T
(\322\050\323 \322\051\323) 234 487.35 T
(\05071\051) 108 469.35 T
(<param_dcl>) 126 469.35 T
(::=) 216 469.35 T
(<param_attribute> <simple_type_spec> <declarator>) 234 469.35 T
(\05072\051) 108 451.35 T
(<param_attribute>) 126 451.35 T
(::=) 216 451.35 T
(\322in\323) 234 451.35 T
(|) 216 439.35 T
(\322out\323) 234 439.35 T
(|) 216 427.35 T
(\322inout\323) 234 427.35 T
(\05073\051) 108 409.35 T
(<raises_expr>) 126 409.35 T
(::=) 216 409.35 T
(\322raises\323 \322\050\323 <scoped_name> { \322,\323 <scoped_name> }) 234 409.35 T
7 8 Q
(*) 435.81 413.35 T
3 10 Q
( \322\051\323) 439.81 409.35 T
(\05074\051) 108 391.35 T
(<context_expr>) 126 391.35 T
(::=) 216 391.35 T
(\322context\323 \322\050\323 <string_literal> { \322,\323 <string_literal> }) 234 391.35 T
7 8 Q
(*) 430.32 395.35 T
3 10 Q
( \322\051\323) 434.32 391.35 T
54 345.99 540 349.02 C
108 347.5 540 347.5 2 L
0.25 H
2 Z
0 X
0 K
N
54 347.5 99 347.5 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(4.4) 83.15 353.68 T
0 F
(IDL Speci\336cation) 108 353.68 T
2 12 Q
(An IDL speci\336cation consists of one or more type de\336nitions, constant de\336nitions, excep-) 108 327.99 T
(tion de\336nitions, or module de\336nitions. The syntax is:) 108 313.99 T
3 10 Q
(<speci\336cation>) 108 295.33 T
(::=) 216 295.33 T
(<de\336nition>) 234 295.33 T
7 8 Q
(+) 280.45 299.33 T
3 10 Q
(<de\336nition>) 108 277.33 T
(::=) 216 277.33 T
(<type_dcl> \322;\323) 234 277.33 T
(|) 216 265.33 T
(<const_dcl> \322;\323) 234 265.33 T
(|) 216 253.33 T
(<except_dcl> \322;\323) 234 253.33 T
(|) 216 241.33 T
(<interface> \322;\323) 234 241.33 T
(|) 216 229.33 T
(<module> \322;\323) 234 229.33 T
2 12 Q
-0.29 (See \2444.6 on page 62, \2444.7 on page 65, and \2444.8 on page 72, respectively) 108 203.99 P
-0.29 (, for speci\336cations) 449.6 203.99 P
(of) 108 189.99 T
3 F
(<const_dcl>) 120.99 189.99 T
2 F
(,) 178.39 189.99 T
3 F
(<type_dcl>) 184.39 189.99 T
2 F
(, and) 235.78 189.99 T
3 F
(<except_dcl>) 262.09 189.99 T
2 F
(.) 324.42 189.99 T
1 F
(4.4.1) 75.93 157.99 T
0 F
(Module Declaration) 108 157.99 T
2 F
(A module de\336nition satis\336es the following syntax:) 108 139.99 T
3 10 Q
(<module>) 108 121.33 T
(::=) 216 121.33 T
(\322module\323 <identi\336er> \322{\322 <de\336nition>) 234 121.33 T
2 8 Q
(+) 380.2 125.33 T
3 10 Q
( \322}\323) 384.71 121.33 T
2 12 Q
(The module construct is used to scope IDL identi\336ers; see \2444.1) 108 95.99 T
(1 on page 76 for details.) 410.35 95.99 T
34 349.02 36 686.02 R
V
34 153.99 36 321.99 R
V
34 91.99 36 127.99 R
V
FMENDPAGE
%%EndPage: "58" 57
%%Page: "57" 57
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(IDL Grammar) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(57) 546.89 60.29 T
72 87.98 558 686.02 R
7 X
V
3 F
0 X
(\05036\051) 126 679.35 T
(<simple_declarator>) 144 679.35 T
(::=) 234 679.35 T
(<identi\336er>) 252 679.35 T
(\05037\051) 126 661.35 T
(<complex_declarator>) 144 661.35 T
(::=) 234 661.35 T
(<array_declarator>) 252 661.35 T
(\05038\051) 126 643.35 T
(<\337oating_pt_type>) 144 643.35 T
(::=) 234 643.35 T
(\322\337oat\323) 252 643.35 T
(|) 234 631.35 T
(\322double\323) 252 631.35 T
(\05039\051) 126 613.35 T
(<integer_type>) 144 613.35 T
(::=) 234 613.35 T
(<signed_int>) 252 613.35 T
(|) 234 601.35 T
(<unsigned_int>) 252 601.35 T
(\05040\051) 126 583.35 T
(<signed_int>) 144 583.35 T
(::=) 234 583.35 T
(<signed_long_int>) 252 583.35 T
(|) 234 571.35 T
(<signed_short_int>) 252 571.35 T
(\05041\051) 126 553.35 T
(<signed_long_int>) 144 553.35 T
(::=) 234 553.35 T
(\322long\323) 252 553.35 T
(\05042\051) 126 535.35 T
(<signed_short_int>) 144 535.35 T
(::=) 234 535.35 T
(\322short\323) 252 535.35 T
(\05043\051) 126 517.35 T
(<unsigned_int>) 144 517.35 T
(::=) 234 517.35 T
(<unsigned_long_int>) 252 517.35 T
(|) 234 505.35 T
(<unsigned_short_int>) 252 505.35 T
(\05044\051) 126 487.35 T
(<unsigned_long_int>) 144 487.35 T
(::=) 234 487.35 T
(\322unsigned\323 \322long\323) 252 487.35 T
(\05045\051) 126 469.35 T
(<unsigned_short_int>) 144 469.35 T
(::=) 234 469.35 T
(\322unsigned\323 \322short\323) 252 469.35 T
(\05046\051) 126 451.35 T
(<char_type>) 144 451.35 T
(::=) 234 451.35 T
(\322char\323) 252 451.35 T
(\05047\051) 126 433.35 T
(<boolean_type>) 144 433.35 T
(::=) 234 433.35 T
(\322boolean\323) 252 433.35 T
(\05048\051) 126 415.35 T
(<octet_type>) 144 415.35 T
(::=) 234 415.35 T
(\322octet\323) 252 415.35 T
(\05049\051) 126 397.35 T
(<any_type>) 144 397.35 T
(::=) 234 397.35 T
(\322any\323) 252 397.35 T
(\05050\051) 126 379.35 T
(<struct_type>) 144 379.35 T
(::=) 234 379.35 T
(\322struct\323 <identi\336er> \322{\323 <member_list> \322}\323) 252 379.35 T
(\05051\051) 126 361.35 T
(<member_list>) 144 361.35 T
(::=) 234 361.35 T
(<member>) 252 361.35 T
7 8 Q
(+) 293.46 365.35 T
3 10 Q
(\05052\051) 126 343.35 T
(<member>) 144 343.35 T
(::=) 234 343.35 T
(<type_spec> <declarators> \322;\323) 252 343.35 T
(\05053\051) 126 325.35 T
(<union_type>) 144 325.35 T
(::=) 234 325.35 T
(\322union\323 <identi\336er> \322switch\323 \322\050\323 <switch_type_spec> \322\051\323) 252 325.35 T
(\322{\323 <switch_body> \322}\323) 270 313.35 T
(\05054\051) 126 295.35 T
(<switch_type_spec>) 144 295.35 T
(::=) 234 295.35 T
(<integer_type>) 252 295.35 T
(|) 234 283.35 T
(<char_type>) 252 283.35 T
(|) 234 271.35 T
(<boolean_type>) 252 271.35 T
(|) 234 259.35 T
(<enum_type>) 252 259.35 T
(|) 234 247.35 T
(<scoped_name>) 252 247.35 T
(\05055\051) 126 229.35 T
(<switch_body>) 144 229.35 T
(::=) 234 229.35 T
(<case>) 252 229.35 T
7 8 Q
(+) 279.8 233.35 T
3 10 Q
(\05056\051) 126 211.35 T
(<case>) 144 211.35 T
(::=) 234 211.35 T
(<case_label>) 252 211.35 T
7 8 Q
(+) 303.04 215.35 T
3 10 Q
( <element_spec> \322;\323) 307.43 211.35 T
(\05057\051) 126 193.35 T
(<case_label>) 144 193.35 T
(::=) 234 193.35 T
(\322case\323 <const_exp> \322:\323) 252 193.35 T
(|) 234 181.35 T
(\322default\323 \322:\323) 252 181.35 T
(\05058\051) 126 163.35 T
(<element_spec>) 144 163.35 T
(::=) 234 163.35 T
(<type_spec> <declarator>) 252 163.35 T
(\05059\051) 126 145.35 T
(<enum_type>) 144 145.35 T
(::=) 234 145.35 T
(\322enum\323 <identi\336er> \322{\323 <enumerator> { \322,\323 <enumerator> }) 252 145.35 T
7 8 Q
(*) 479.74 149.35 T
3 10 Q
( \322}\323) 483.74 145.35 T
(\05060\051) 126 127.35 T
(<enumerator>) 144 127.35 T
(::=) 234 127.35 T
(<identi\336er>) 252 127.35 T
(\05061\051) 126 109.35 T
(<sequence_type>) 144 109.35 T
(::=) 234 109.35 T
(\322sequence\323 \322<\323 <simple_type_spec> \322,\323 <positive_int_const> \322>\323) 252 109.35 T
(|) 234 97.35 T
(\322sequence\323 \322<\323 <simple_type_spec> \322>\323) 252 97.35 T
52 94.02 54 686.02 R
V
FMENDPAGE
%%EndPage: "57" 56
%%Page: "56" 56
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(IDL Syntax and Semantics) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(56) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
3 10 Q
0 X
(|) 216 679.35 T
(<mult_expr> \322/\323 <unary_expr>) 234 679.35 T
(|) 216 667.35 T
(<mult_expr> \322%\323 <unary_expr>) 234 667.35 T
(\05021\051) 108 649.35 T
(<unary_expr>) 126 649.35 T
(::=) 216 649.35 T
(<unary_operator> <primary_expr>) 234 649.35 T
(|) 216 637.35 T
(<primary_expr>) 234 637.35 T
(\05022\051) 108 619.35 T
(<unary_operator>) 126 619.35 T
(::=) 216 619.35 T
(\322-\323) 234 619.35 T
(|) 216 607.35 T
(\322+\323) 234 607.35 T
(|) 216 595.35 T
(\322~\323) 234 595.35 T
(\05023\051) 108 577.35 T
(<primary_expr>) 126 577.35 T
(::=) 216 577.35 T
(<scoped_name>) 234 577.35 T
(|) 216 565.35 T
(<literal>) 234 565.35 T
(|) 216 553.35 T
(\322\050\323 <const_exp> \322\051\323) 234 553.35 T
(\05024\051) 108 535.35 T
(<literal>) 126 535.35 T
(::=) 216 535.35 T
(<integer_literal>) 234 535.35 T
(|) 216 523.35 T
(<string_literal>) 234 523.35 T
(|) 216 511.35 T
(<character_literal>) 234 511.35 T
(|) 216 499.35 T
(<\337oating_pt_literal>) 234 499.35 T
(|) 216 487.35 T
(<boolean_literal>) 234 487.35 T
(\05025\051) 108 469.35 T
(<boolean_literal>) 126 469.35 T
(::=) 216 469.35 T
(\322TRUE\323) 234 469.35 T
(|) 216 457.35 T
(\322F) 234 457.35 T
(ALSE\323) 242.65 457.35 T
(\05026\051) 108 439.35 T
(<positive_int_const>) 126 439.35 T
(::=) 216 439.35 T
(<const_exp>) 234 439.35 T
(\05027\051) 108 421.35 T
(<type_dcl>) 126 421.35 T
(::=) 216 421.35 T
(\322typedef\323 <type_declarator>) 234 421.35 T
(|) 216 409.35 T
(<struct_type>) 234 409.35 T
(|) 216 397.35 T
(<union_type>) 234 397.35 T
(|) 216 385.35 T
(<enum_type>) 234 385.35 T
(\05028\051) 108 367.35 T
(<type_declarator>) 126 367.35 T
(::=) 216 367.35 T
(<type_spec> <declarators>) 234 367.35 T
(\05029\051) 108 349.35 T
(<type_spec>) 126 349.35 T
(::=) 216 349.35 T
(<simple_type_spec>) 234 349.35 T
(|) 216 337.35 T
(<constr_type_spec>) 234 337.35 T
(\05030\051) 108 319.35 T
(<simple_type_spec>) 126 319.35 T
(::=) 216 319.35 T
(<base_type_spec>) 234 319.35 T
(|) 216 307.35 T
(<template_type_spec>) 234 307.35 T
(|) 216 295.35 T
(<scoped_name>) 234 295.35 T
(\05031\051) 108 277.35 T
(<base_type_spec>) 126 277.35 T
(::=) 216 277.35 T
(<\337oating_pt_type>) 234 277.35 T
(|) 216 265.35 T
(<integer_type>) 234 265.35 T
(|) 216 253.35 T
(<char_type>) 234 253.35 T
(|) 216 241.35 T
(<boolean_type>) 234 241.35 T
(|) 216 229.35 T
(<octet_type>) 234 229.35 T
(|) 216 217.35 T
(<any_type>) 234 217.35 T
(\05032\051) 108 199.35 T
(<template_type_spec>) 126 199.35 T
(::=) 216 199.35 T
(<sequence_type>) 234 199.35 T
(|) 216 187.35 T
(<string_type>) 234 187.35 T
(\05033\051) 108 169.35 T
(<constr_type_spec>) 126 169.35 T
(::=) 216 169.35 T
(<struct_type>) 234 169.35 T
(|) 216 157.35 T
(<union_type>) 234 157.35 T
(|) 216 145.35 T
(<enum_type>) 234 145.35 T
(\05034\051) 108 127.35 T
(<declarators>) 126 127.35 T
(::=) 216 127.35 T
(<declarator> { \322,\323 <declarator> }) 234 127.35 T
7 8 Q
(*) 358.37 131.35 T
3 10 Q
(\05035\051) 108 109.35 T
(<declarator>) 126 109.35 T
(::=) 216 109.35 T
(<simple_declarator>) 234 109.35 T
(|) 216 97.35 T
(<complex_declarator>) 234 97.35 T
34 94.02 36 686.02 R
V
FMENDPAGE
%%EndPage: "56" 55
%%Page: "55" 55
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(IDL Grammar) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(55) 546.89 60.29 T
72 87.98 558 686.02 R
7 X
V
3 F
0 X
(|) 234 679.35 T
(<except_dcl> \322;\323) 252 679.35 T
(|) 234 667.35 T
(<interface> \322;\323) 252 667.35 T
(|) 234 655.35 T
(<module> \322;\323) 252 655.35 T
(\0503\051) 126 637.35 T
(<module>) 144 637.35 T
(::=) 234 637.35 T
(\322module\323 <identi\336er> \322{\322 <de\336nition>) 252 637.35 T
2 8 Q
(+) 398.2 641.35 T
3 10 Q
( \322}\323) 402.71 637.35 T
(\0504\051) 126 619.35 T
(<interface>) 144 619.35 T
(::=) 234 619.35 T
(<interface_dcl>) 252 619.35 T
(|) 234 607.35 T
(<forward_dcl>) 252 607.35 T
(\0505\051) 126 589.35 T
(<interface_dcl>) 144 589.35 T
(::=) 234 589.35 T
(<interface_header> \322{\323 <interface_body> \322}\323) 252 589.35 T
(\0506\051) 126 571.35 T
(<forward_dcl>) 144 571.35 T
(::=) 234 571.35 T
(\322interface\323 <identi\336er>) 252 571.35 T
(\0507\051) 126 553.35 T
(<interface_header>) 144 553.35 T
(::=) 234 553.35 T
(\322interface\323 <identi\336er> [ <inheritance_spec> ]) 252 553.35 T
(\0508\051) 126 535.35 T
(<interface_body>) 144 535.35 T
(::=) 234 535.35 T
(<export>) 252 535.35 T
2 8 Q
(*) 286.62 539.35 T
3 10 Q
(\0509\051) 126 517.35 T
(<export>) 144 517.35 T
(::=) 234 517.35 T
(<type_dcl> \322;\323) 252 517.35 T
(|) 234 505.35 T
(<const_dcl> \322;\323) 252 505.35 T
(|) 234 493.35 T
(<except_dcl> \322;\323) 252 493.35 T
(|) 234 481.35 T
(<attr_dcl> \322;\323) 252 481.35 T
(|) 234 469.35 T
(<op_dcl> \322;\323) 252 469.35 T
(\05010\051) 126 451.35 T
(<inheritance_spec>) 144 451.35 T
(::=) 234 451.35 T
(\322:\323 <scoped_name> { \322,\323 <scoped_name> }) 252 451.35 T
7 8 Q
(*) 419.64 455.35 T
3 10 Q
(\0501) 126 433.35 T
(1\051) 132.84 433.35 T
(<scoped_name>) 144 433.35 T
(::=) 234 433.35 T
(<identi\336er>) 252 433.35 T
(|) 234 421.35 T
(\322::\323 <identi\336er>) 252 421.35 T
(|) 234 409.35 T
(<scoped_name> \322::\323 <identi\336er>) 252 409.35 T
(\05012\051) 126 391.35 T
(<const_dcl>) 144 391.35 T
(::=) 234 391.35 T
(\322const\323 <const_type> <identi\336er> \322=\323 <const_exp>) 252 391.35 T
(\05013\051) 126 373.35 T
(<const_type>) 144 373.35 T
(::=) 234 373.35 T
(<integer_type>) 252 373.35 T
(|) 234 361.35 T
(<char_type>) 252 361.35 T
(|) 234 349.35 T
(<boolean_type>) 252 349.35 T
(|) 234 337.35 T
(<\337oating_pt_type>) 252 337.35 T
(|) 234 325.35 T
(<string_type>) 252 325.35 T
(|) 234 313.35 T
(<scoped_name>) 252 313.35 T
(\05014\051) 126 295.35 T
(<const_exp>) 144 295.35 T
(::=) 234 295.35 T
(<or_expr>) 252 295.35 T
(\05015\051) 126 277.35 T
(<or_expr>) 144 277.35 T
(::=) 234 277.35 T
(<xor_expr>) 252 277.35 T
(|) 234 265.35 T
(<or_expr> \322|\323 <xor_expr>) 252 265.35 T
(\05016\051) 126 247.35 T
(<xor_expr>) 144 247.35 T
(::=) 234 247.35 T
(<and_expr>) 252 247.35 T
(|) 234 235.35 T
(<xor_expr> \322^\323 <and_expr>) 252 235.35 T
(\05017\051) 126 217.35 T
(<and_expr>) 144 217.35 T
(::=) 234 217.35 T
(<shift_expr>) 252 217.35 T
(|) 234 205.35 T
(<and_expr> \322&\323 <shift_expr>) 252 205.35 T
(\05018\051) 126 187.35 T
(<shift_expr>) 144 187.35 T
(::=) 234 187.35 T
(<add_expr>) 252 187.35 T
(|) 234 175.35 T
(<shift_expr> \322>>\323 <add_expr>) 252 175.35 T
(|) 234 163.35 T
(<shift_expr> \322<<\323 <add_expr>) 252 163.35 T
(\05019\051) 126 145.35 T
(<add_expr>) 144 145.35 T
(::=) 234 145.35 T
(<mult_expr>) 252 145.35 T
(|) 234 133.35 T
(<add_expr> \322+\323 <mult_expr>) 252 133.35 T
(|) 234 121.35 T
(<add_expr> \322-\323 <mult_expr>) 252 121.35 T
(\05020\051) 126 103.35 T
(<mult_expr>) 144 103.35 T
(::=) 234 103.35 T
(<unary_expr>) 252 103.35 T
(|) 234 91.35 T
(<mult_expr> \322*\323 <unary_expr>) 252 91.35 T
52 88.02 54 686.02 R
V
FMENDPAGE
%%EndPage: "55" 54
%%Page: "54" 54
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(IDL Syntax and Semantics) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(54) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
2 12 Q
0 X
(The size of a string literal is the number of character literals enclosed by the quotes, after) 108 678.02 T
-0.13 (concatenation. The size of the literal is associated with the literal. W) 108 664.02 P
-0.13 (ithin a string, the dou-) 434.23 664.02 P
(ble quote character) 108 650.02 T
3 F
(") 202.24 650.02 T
2 F
( must be preceded by a \134.) 206.91 650.02 T
(A string literal may not contain the character '\1340'.) 108 624.02 T
54 577.99 540 581.02 C
108 579.5 540 579.5 2 L
0.25 H
2 Z
0 X
0 K
N
54 579.5 99 579.5 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(4.2) 83.15 585.68 T
0 F
(Preprocessing) 108 585.68 T
2 12 Q
(IDL preprocessing, which is based on ANSI C++ preprocessing, provides macro substitu-) 108 559.99 T
(tion, conditional compilation, and source \336le inclusion. In addition, directives are pro-) 108 545.99 T
(vided to control line numbering in diagnostics and for symbolic debugging, to generate a) 108 531.99 T
(diagnostic message with a given token sequence, and to perform implementation-depen-) 108 517.99 T
(dent actions \050the) 108 503.99 T
3 F
(#pragma) 190.27 503.99 T
2 F
( directive\051. Certain prede\336ned names are available. These facili-) 231.27 503.99 T
(ties are conceptually handled by a preprocessor) 108 489.99 T
(, which may or may not actually be) 334.66 489.99 T
(implemented as a separate process.) 108 475.99 T
(Lines beginning with # \050also called \322directives\323\051 communicate with this preprocessor) 108 449.99 T
(.) 517.05 449.99 T
(White space may appear before the #. These lines have syntax independent of the rest of) 108 435.99 T
-0.47 (IDL; they may appear anywhere and have ef) 108 421.99 P
-0.47 (fects that last \050independent of the IDL scoping) 317.95 421.99 P
(rules\051 until the end of the translation unit. The textual location of IDL-speci\336c pragmas) 108 407.99 T
(may be semantically constrained.) 108 393.99 T
(A preprocessing directive \050or any line\051 may be continued on the next line in a source \336le) 108 367.99 T
(by placing a backslash character \050\322\134\323\051, immediately before the newline at the end of the) 108 353.99 T
(line to be continued. The preprocessor ef) 108 339.99 T
(fects the continuation by deleting the backslash) 303.96 339.99 T
(and the newline before the input sequence is divided into tokens. A backslash character) 108 325.99 T
(may not be the last character in a source \336le.) 108 311.99 T
(A preprocessing token is an IDL token \050\2444.1.1 on page 50\051, a \336le name as in a) 108 285.99 T
3 F
(#include) 485.72 285.99 T
2 F
(directive, or any single character) 108 271.99 T
(, other than white space, that does not match another pre-) 264.38 271.99 T
(processing token.) 108 257.99 T
(The primary use of the preprocessing facilities is to include de\336nitions from other IDL) 108 231.99 T
-0.11 (speci\336cations. T) 108 217.99 P
-0.11 (ext in \336les included with a) 185.66 217.99 P
3 F
-0.1 (#include) 314.92 217.99 P
2 F
-0.11 ( directive is treated as if it appeared in) 354.82 217.99 P
(the including \336le. A complete description of the preprocessing facilities may be found in) 108 203.99 T
4 F
(The Annotated C++ Refer) 108 189.99 T
(ence Manual) 234.01 189.99 T
2 F
(, Chapter 16.) 296.3 189.99 T
54 143.97 540 146.99 C
108 145.48 540 145.48 2 L
0.25 H
2 Z
0 X
0 K
N
54 145.48 99 145.48 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(4.3) 83.15 151.66 T
0 F
(IDL Grammar) 108 151.66 T
3 10 Q
(\0501\051) 108 127.3 T
(<speci\336cation>) 126 127.3 T
(::=) 216 127.3 T
(<de\336nition>) 234 127.3 T
7 8 Q
(+) 280.45 131.3 T
3 10 Q
(\0502\051) 108 109.3 T
(<de\336nition>) 126 109.3 T
(::=) 216 109.3 T
(<type_dcl> \322;\323) 234 109.3 T
(|) 216 97.3 T
(<const_dcl> \322;\323) 234 97.3 T
34 349.99 36 361.99 R
V
34 321.99 36 333.99 R
V
34 199.99 36 225.99 R
V
34 93.97 36 133.97 R
V
FMENDPAGE
%%EndPage: "54" 53
%%Page: "53" 53
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(Lexical Conventions) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(53) 546.89 60.29 T
72 87.98 558 686.02 R
7 X
V
2 12 Q
0 X
(If the character following a backslash is not one of those speci\336ed, the behavior is unde-) 126 480.02 T
(\336ned. An escape sequence speci\336es a single character) 126 466.02 T
(.) 383.11 466.02 T
(The escape \134ooo consists of the backslash followed by one, two, or three octal digits that) 126 440.02 T
(are taken to specify the value of the desired character) 126 426.02 T
(. The escape \134xhh consists of the) 380.78 426.02 T
-0.05 (backslash followed by x followed by one or two hexadecimal digits that are taken to spec-) 126 412.02 P
(ify the value of the desired character) 126 398.02 T
(. A sequence of octal or hexadecimal digits is termi-) 300.52 398.02 T
(nated by the \336rst character that is not an octal digit or a hexadecimal digit, respectively) 126 384.02 T
(.) 542.26 384.02 T
(The value of a character constant is implementation dependent if it exceeds that of the) 126 370.02 T
(lar) 126 356.02 T
(gest char) 138.44 356.02 T
(.) 180.74 356.02 T
1 11 Q
(4.1.5.3) 87 330.68 T
0 F
(Floating-point Literals) 126 330.68 T
2 12 Q
(A \337oating-point literal consists of an integer part, a decimal point, a fraction part, an e or) 126 314.02 T
-0.18 (E, an optionally signed integer exponent, and an optional type suf) 126 300.02 P
-0.18 (\336x. The integer and frac-) 439.14 300.02 P
-0.14 (tion parts both consist of a sequence of decimal \050base ten\051 digits. Either the integer part or) 126 286.02 P
(the fraction part \050but not both\051 may be missing; either the decimal point or the letter e \050or) 126 272.02 T
(E\051 and the exponent \050but not both\051 may be missing.) 126 258.02 T
1 11 Q
(4.1.5.4) 87 232.68 T
0 F
(String Literals) 126 232.68 T
2 12 Q
(A string literal is a sequence of characters \050as de\336ned in \2444.1.5.2 on page 52\051 surrounded) 126 216.02 T
(by double quotes, as in "...".) 126 202.02 T
(Adjacent string literals are concatenated. Characters in concatenated strings are kept dis-) 126 176.02 T
(tinct. For example,) 126 162.02 T
3 10 Q
("\134xA" "B") 126 143.35 T
2 12 Q
(contains the two characters '\134xA' and 'B' after concatenation \050and not the single hexadeci-) 126 118.02 T
(mal character '\134xAB'\051.) 126 104.02 T
0 9 Q
(form feed) 132 621.02 T
(\134f) 240.5 621.02 T
(alert) 132 606.02 T
(\134a) 239.25 606.02 T
(backslash) 132 591.02 T
(\134\134) 240.5 591.02 T
(question mark) 132 576.02 T
(\134?) 239.25 576.02 T
(single quote) 132 561.02 T
(\134') 240.89 561.02 T
(double quote) 132 546.02 T
(\134") 240.15 546.02 T
(octal number) 132 531.02 T
(\134ooo) 234.26 531.02 T
(hexadecimal) 132 516.02 T
(number) 132 505.02 T
(\134xhh) 234.51 516.02 T
72 672.98 558 686.02 C
126 680.04 558 680.04 2 L
0.25 H
2 Z
0 X
0 K
N
72 680.04 117 680.04 2 L
0 Z
N
0 0 612 792 C
72 649.02 558 662.98 C
72 654.99 558 654.99 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
(TBL. 9) 72 666.32 T
0 F
(Escape Sequences  \050Continued\051) 126 666.32 T
1 9 Q
(Description) 132 636.02 T
(Escape Sequence) 204 636.02 T
126 631.02 288 631.02 2 L
V
0.5 H
0 Z
N
126 500.02 288 500.02 2 L
V
N
52 310.02 54 338.02 R
V
52 254.02 54 266.02 R
V
52 198.02 54 224.02 R
V
52 618.02 54 627.02 R
V
52 603.02 54 612.02 R
V
52 588.02 54 597.02 R
V
52 573.02 54 582.02 R
V
52 558.02 54 567.02 R
V
52 543.02 54 552.02 R
V
52 528.02 54 537.02 R
V
52 502.02 54 511.02 R
V
FMENDPAGE
%%EndPage: "53" 52
%%Page: "52" 52
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(IDL Syntax and Semantics) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(52) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
2 12 Q
0 X
(In addition, the tokens listed in TBL. 8 on page 52 are used by the preprocessor) 108 678.02 T
(.) 488.74 678.02 T
1 F
(4.1.5) 75.93 582.02 T
0 F
(Literals) 108 582.02 T
1 11 Q
(4.1.5.1) 69 556.68 T
0 F
(Integer Literals) 108 556.68 T
2 12 Q
-0.35 (An integer literal consisting of a sequence of digits is taken to be decimal \050base ten\051 unless) 108 540.02 P
(it begins with 0 \050digit zero\051. A sequence of digits starting with 0 is taken to be an octal) 108 526.02 T
(integer \050base eight\051. The digits 8 and 9 are not octal digits. A sequence of digits preceded) 108 512.02 T
(by 0x or 0X is taken to be a hexadecimal integer \050base sixteen\051. The hexadecimal digits) 108 498.02 T
(include a or A through f or F with decimal values ten through \336fteen, respectively) 108 484.02 T
(. For) 499.95 484.02 T
(example, the number twelve can be written 12, 014, or 0XC.) 108 470.02 T
1 11 Q
(4.1.5.2) 69 444.68 T
0 F
(Character Literals) 108 444.68 T
2 12 Q
-0.14 (A character literal is one or more characters enclosed in single quotes, as in \325x\325. Character) 108 418.02 P
(literals have type) 108 404.02 T
3 F
(char) 192.94 404.02 T
2 F
(.) 213.05 404.02 T
(A character is an 8-bit quantity with a numerical value between 0 and 255 \050decimal\051. The) 108 378.02 T
-0.02 (value of a space, alphabetic, digit or graphic character literal is the numerical value of the) 108 364.02 P
(character as de\336ned in the ISO Latin-1 \0508859.1\051 character set standard \050See TBL. 2 on) 108 350.02 T
-0.38 (page 47, TBL. 3 on page 48, and TBL. 4 on page 48\051. The value of a null is 0. The value of) 108 336.02 P
(a formatting character literal is the numerical value of the character as de\336ned in the ISO) 108 322.02 T
-0.13 (646 standard \050See TBL. 5 on page 50\051. The meaning of all other characters is implementa-) 108 308.02 P
(tion-dependent.) 108 294.02 T
(Nongraphic characters must be represented using escape sequences as de\336ned below in) 108 268.02 T
-0.28 (TBL. 9 on page 52. Note that escape sequences must be used to represent single quote and) 108 254.02 P
(backslash characters in character literals.) 108 240.02 T
54 648.98 540 662.02 C
108 656.04 540 656.04 2 L
0.25 H
2 Z
0 X
0 K
N
54 656.04 99 656.04 2 L
0 Z
N
0 0 612 792 C
54 625.02 540 638.98 C
54 630.99 540 630.99 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
(TBL. 8) 54 642.32 T
0 F
(Preprocessor T) 108 642.32 T
(okens) 175.2 642.32 T
0 9 Q
(#) 114 615.02 T
(##) 141 615.02 T
(!) 168 615.02 T
(||) 195 615.02 T
(&&) 222 615.02 T
54 210.98 540 224.02 C
108 218.04 540 218.04 2 L
0.25 H
2 Z
0 X
0 K
N
54 218.04 99 218.04 2 L
0 Z
N
0 0 612 792 C
54 187.02 540 200.98 C
54 192.99 540 192.99 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
(TBL. 9) 54 204.32 T
0 F
(Escape Sequences) 108 204.32 T
1 9 Q
(Description) 114 174.02 T
(Escape Sequence) 186 174.02 T
0 F
(newline) 114 159.02 T
(\134n) 221.25 159.02 T
(horizontal tab) 114 144.02 T
(\134t) 222.5 144.02 T
(vertical tab) 114 129.02 T
(\134v) 221.5 129.02 T
(backspace) 114 114.02 T
(\134b) 221.25 114.02 T
(carriage return) 114 99.02 T
(\134r) 222.25 99.02 T
108 610.02 243 610.02 2 L
V
0.5 H
0 Z
N
108 169.02 270 169.02 2 L
V
N
108 94.02 270 94.02 2 L
V
N
34 578.02 36 686.02 R
V
34 400.02 36 478.02 R
V
34 304.02 36 344.02 R
V
34 250.02 36 262.02 R
V
34 638.98 36 648.98 R
V
34 612.02 36 621.02 R
V
34 612.02 36 621.02 R
V
34 612.02 36 621.02 R
V
34 612.02 36 621.02 R
V
34 612.02 36 621.02 R
V
34 171.02 36 180.02 R
V
34 171.02 36 180.02 R
V
34 156.02 36 165.02 R
V
34 141.02 36 150.02 R
V
34 126.02 36 135.02 R
V
34 111.02 36 120.02 R
V
34 96.02 36 105.02 R
V
FMENDPAGE
%%EndPage: "52" 51
%%Page: "51" 51
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(Lexical Conventions) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(51) 546.89 60.29 T
72 87.98 558 686.02 R
7 X
V
2 12 Q
0 X
(When comparing two identi\336ers to see if they collide:) 126 678.02 T
(\245) 126 658.02 T
-0.12 (Upper) 144 658.02 P
-0.12 (- and lower) 173.73 658.02 P
-0.12 (-case letters are treated as the same letter) 227.88 658.02 P
-0.12 (. TBL. 2 on page 47 de\336nes) 422.56 658.02 P
(the equivalence mapping of upper) 144 644.02 T
(- and lower) 306.97 644.02 T
(-case letters.) 361.35 644.02 T
(\245) 126 627.02 T
(The comparison does) 144 627.02 T
4 F
(not) 249.59 627.02 T
2 F
( take into account equivalences between digraphs and pairs) 264.92 627.02 T
(of letters \050e.g., \322\276\323 and \322ae\323 are not considered equivalent\051 or equivalences between) 144 613.02 T
(accented and non-accented letters \050e.g., \322\347\323 and \322A\323 are not considered equivalent\051.) 144 599.02 T
(\245) 126 582.02 T
(All characters are signi\336cant.) 144 582.02 T
(There is only one namespace for IDL identi\336ers. Using the same identi\336er for a constant) 126 556.02 T
(and an interface, for example, produces a compilation error) 126 542.02 T
(.) 409.76 542.02 T
1 F
(4.1.4) 93.93 510.02 T
0 F
(Keywords) 126 510.02 T
2 F
-0.02 (The identi\336ers listed in TBL. 6 on page 51 are reserved for use as keywords, and may not) 126 492.02 P
(be used otherwise) 126 478.02 T
3 F
(.) 211.93 478.02 T
2 F
(Keywords obey the rules for identi\336ers \050see \2444.1.3 on page 50\051 and must be written) 126 298.02 T
-0.16 (exactly as shown in the above list. For example, \322) 126 284.02 P
3 F
-0.15 (boolean) 363.4 284.02 P
2 F
-0.16 (\323 is correct; \322) 401.11 284.02 P
3 F
-0.15 (Boolean) 464.9 284.02 P
2 F
-0.16 (\323 produces) 503.7 284.02 P
(a compilation error) 126 270.02 T
(.) 217.27 270.02 T
(IDL speci\336cations use the characters shown in TBL. 7 on page 51 as punctuation.) 126 244.02 T
72 448.98 558 462.02 C
126 456.04 558 456.04 2 L
0.25 H
2 Z
0 X
0 K
N
72 456.04 117 456.04 2 L
0 Z
N
0 0 612 792 C
72 425.02 558 438.98 C
72 430.99 558 430.99 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
(TBL. 6) 72 442.32 T
0 F
(Keywords) 126 442.32 T
0 9 Q
(any) 132 415.02 T
(default) 195 415.02 T
(interface) 267 415.02 T
(readonly) 339 415.02 T
(unsigned) 411 415.02 T
(attribute) 132 400.02 T
(double) 195 400.02 T
(long) 267 400.02 T
(sequence) 339 400.02 T
(union) 411 400.02 T
(boolean) 132 385.02 T
(enum) 195 385.02 T
(module) 267 385.02 T
(short) 339 385.02 T
(void) 411 385.02 T
(case) 132 370.02 T
(exception) 195 370.02 T
(octet) 267 370.02 T
(string) 339 370.02 T
(F) 411 370.02 T
(ALSE) 416 370.02 T
(char) 132 355.02 T
(\337oat) 195 355.02 T
(oneway) 267 355.02 T
(struct) 339 355.02 T
(Object) 411 355.02 T
(const) 132 340.02 T
(in) 195 340.02 T
(out) 267 340.02 T
(switch) 339 340.02 T
(TRUE) 411 340.02 T
(context) 132 325.02 T
(inout) 195 325.02 T
(raises) 267 325.02 T
(typedef) 339 325.02 T
72 214.98 558 228.02 C
126 222.04 558 222.04 2 L
0.25 H
2 Z
0 X
0 K
N
72 222.04 117 222.04 2 L
0 Z
N
0 0 612 792 C
72 191.02 558 204.98 C
72 196.99 558 196.99 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
(TBL. 7) 72 208.32 T
0 F
(Punctuation Characters) 126 208.32 T
0 9 Q
(;) 132 181.02 T
({) 159 181.02 T
(}) 186 181.02 T
(:) 213 181.02 T
(,) 240 181.02 T
(=) 267 181.02 T
(+) 294 181.02 T
(-) 321 181.02 T
(\050) 348 181.02 T
(\051) 375 181.02 T
(<) 402 181.02 T
(>) 429 181.02 T
([) 456 181.02 T
(]) 483 181.02 T
(') 132 166.02 T
(") 159 166.02 T
(\134) 186 166.02 T
(|) 213 166.02 T
(^) 240 166.02 T
(&) 267 166.02 T
(*) 294 166.02 T
(/) 321 166.02 T
(%) 348 166.02 T
(~) 375 166.02 T
126 320.02 477 320.02 2 L
V
0.5 H
0 Z
N
126 161.02 504 161.02 2 L
V
N
52 654.02 54 686.02 R
V
52 240.02 54 635.02 R
V
52 438.98 54 448.98 R
V
52 412.02 54 421.02 R
V
52 412.02 54 421.02 R
V
52 412.02 54 421.02 R
V
52 412.02 54 421.02 R
V
52 412.02 54 421.02 R
V
52 397.02 54 406.02 R
V
52 397.02 54 406.02 R
V
52 397.02 54 406.02 R
V
52 397.02 54 406.02 R
V
52 397.02 54 406.02 R
V
52 382.02 54 391.02 R
V
52 382.02 54 391.02 R
V
52 382.02 54 391.02 R
V
52 382.02 54 391.02 R
V
52 382.02 54 391.02 R
V
52 367.02 54 376.02 R
V
52 367.02 54 376.02 R
V
52 367.02 54 376.02 R
V
52 367.02 54 376.02 R
V
52 367.02 54 376.02 R
V
52 352.02 54 361.02 R
V
52 352.02 54 361.02 R
V
52 352.02 54 361.02 R
V
52 352.02 54 361.02 R
V
52 352.02 54 361.02 R
V
52 337.02 54 346.02 R
V
52 337.02 54 346.02 R
V
52 337.02 54 346.02 R
V
52 337.02 54 346.02 R
V
52 337.02 54 346.02 R
V
52 322.02 54 331.02 R
V
52 322.02 54 331.02 R
V
52 322.02 54 331.02 R
V
52 322.02 54 331.02 R
V
52 322.02 54 331.02 R
V
52 204.98 54 214.98 R
V
52 178.02 54 187.02 R
V
52 178.02 54 187.02 R
V
52 178.02 54 187.02 R
V
52 178.02 54 187.02 R
V
52 178.02 54 187.02 R
V
52 178.02 54 187.02 R
V
52 178.02 54 187.02 R
V
52 178.02 54 187.02 R
V
52 178.02 54 187.02 R
V
52 178.02 54 187.02 R
V
52 178.02 54 187.02 R
V
52 178.02 54 187.02 R
V
52 178.02 54 187.02 R
V
52 178.02 54 187.02 R
V
52 163.02 54 172.02 R
V
52 163.02 54 172.02 R
V
52 163.02 54 172.02 R
V
52 163.02 54 172.02 R
V
52 163.02 54 172.02 R
V
52 163.02 54 172.02 R
V
52 163.02 54 172.02 R
V
52 163.02 54 172.02 R
V
52 163.02 54 172.02 R
V
52 163.02 54 172.02 R
V
52 163.02 54 172.02 R
V
52 163.02 54 172.02 R
V
52 163.02 54 172.02 R
V
52 163.02 54 172.02 R
V
FMENDPAGE
%%EndPage: "51" 50
%%Page: "50" 50
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(IDL Syntax and Semantics) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(50) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
2 12 Q
0 X
(The formatting characters are shown in TBL. 5 on page 50.) 108 678.02 T
1 F
(4.1.1) 75.93 474.02 T
0 F
(T) 108 474.02 T
(okens) 114 474.02 T
2 F
(There are \336ve kinds of tokens: identi\336ers, keywords, literals, operators, and other separa-) 108 456.02 T
-0 (tors. Blanks, horizontal and vertical tabs, newlines, formfeeds, and comments \050collective,) 108 442.02 P
(\322white space\323\051, as described below) 108 428.02 T
(, are ignored except as they serve to separate tokens.) 275.4 428.02 T
(Some white space is required to separate otherwise adjacent identi\336ers, keywords, and) 108 414.02 T
(constants.) 108 400.02 T
(If the input stream has been parsed into tokens up to a given character) 108 374.02 T
(, the next token is) 442.93 374.02 T
(taken to be the longest string of characters that could possibly constitute a token.) 108 360.02 T
1 F
(4.1.2) 75.93 328.02 T
0 F
(Comments) 108 328.02 T
2 F
(The characters /* start a comment, which terminates with the characters */. These com-) 108 310.02 T
(ments do not nest. The characters // start a comment, which terminates at the end of the) 108 296.02 T
(line on which they occur) 108 282.02 T
(. The comment characters //, /*, and */ have no special meaning) 225.92 282.02 T
(within a // comment and are treated just like other characters. Similarly) 108 268.02 T
(, the comment) 448.31 268.02 T
-0.34 (characters // and /* have no special meaning within a /* comment. Comments may contain) 108 254.02 P
(alphabetic, digit, graphic, space, horizontal tab, vertical tab, form feed and newline char-) 108 240.02 T
(acters.) 108 226.02 T
1 F
(4.1.3) 75.93 194.02 T
0 F
(Identi\336ers) 108 194.02 T
2 F
(An identi\336er is an arbitrarily long sequence of alphabetic, digit, and underscore \050\322_\323\051) 108 176.02 T
(characters. The \336rst character must be an alphabetic character) 108 162.02 T
(. All characters are signi\336-) 403.4 162.02 T
(cant.) 108 148.02 T
(Identi\336ers that dif) 108 122.02 T
(fer only in case collide and yield a compilation error) 193.73 122.02 T
(. An identi\336er for a) 444.55 122.02 T
(de\336nition must be spelled consistently \050with respect to case\051 throughout a speci\336cation.) 108 108.02 T
54 648.98 540 662.02 C
108 656.04 540 656.04 2 L
0.25 H
2 Z
0 X
0 K
N
54 656.04 99 656.04 2 L
0 Z
N
0 0 612 792 C
54 625.02 540 638.98 C
54 630.99 540 630.99 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
(TBL. 5) 54 642.32 T
0 F
(The Formatting Characters) 108 642.32 T
1 9 Q
(Description) 114 612.02 T
(Abbreviation) 186 612.02 T
(ISO 646 Octal V) 258 612.02 T
(alue) 323.95 612.02 T
0 F
(alert) 114 597.02 T
(BEL) 207.51 597.02 T
(007) 296.17 597.02 T
(backspace) 114 582.02 T
(BS) 210.01 582.02 T
(010) 296.17 582.02 T
(horizontal tab) 114 567.02 T
(HT) 210.01 567.02 T
(01) 296.5 567.02 T
(1) 305.83 567.02 T
(newline) 114 552.02 T
(NL, LF) 202.51 552.02 T
(012) 296.17 552.02 T
(vertical tab) 114 537.02 T
(VT) 210.26 537.02 T
(013) 296.17 537.02 T
(form feed) 114 522.02 T
(FF) 210.51 522.02 T
(014) 296.17 522.02 T
(carriage return) 114 507.02 T
(CR) 209.51 507.02 T
(015) 296.17 507.02 T
108 607.02 355.33 607.02 2 L
V
0.5 H
0 Z
N
108 502.02 355.33 502.02 2 L
V
N
34 470.02 36 482.02 R
V
34 222.02 36 262.02 R
V
34 104.02 36 184.02 R
V
34 609.02 36 618.02 R
V
34 609.02 36 618.02 R
V
34 609.02 36 618.02 R
V
34 594.02 36 603.02 R
V
34 579.02 36 588.02 R
V
34 564.02 36 573.02 R
V
34 549.02 36 558.02 R
V
34 534.02 36 543.02 R
V
34 519.02 36 528.02 R
V
34 504.02 36 513.02 R
V
FMENDPAGE
%%EndPage: "50" 49
%%Page: "49" 49
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(Lexical Conventions) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(49) 546.89 60.29 T
72 87.98 558 686.02 R
7 X
V
0 9 Q
0 X
(\325) 132 621.02 T
(apostrophe) 168 621.02 T
(\244) 303 621.02 T
(section/paragraph sign) 339 621.02 T
(\050) 132 606.02 T
(left parenthesis) 168 606.02 T
(\254) 303 606.02 T
(diaeresis) 339 606.02 T
(\051) 132 591.02 T
(right parenthesis) 168 591.02 T
(\251) 303 591.02 T
(copyright sign) 339 591.02 T
(*) 132 576.02 T
(asterisk) 168 576.02 T
(\273) 303 576.02 T
(feminine ordinal indicator) 339 576.02 T
(+) 132 561.02 T
(plus sign) 168 561.02 T
(\307) 303 561.02 T
(left angle quotation mark) 339 561.02 T
(,) 132 546.02 T
(comma) 168 546.02 T
(\302) 303 546.02 T
(not sign) 339 546.02 T
(-) 132 531.02 T
(hyphen, minus sign) 168 531.02 T
(\240) 303 531.02 T
(soft hyphen) 339 531.02 T
(.) 132 516.02 T
(period, full stop) 168 516.02 T
(\250) 303 516.02 T
(registered trade mark sign) 339 516.02 T
(/) 132 501.02 T
(solidus) 168 501.02 T
(\370) 303 501.02 T
(macron) 339 501.02 T
(:) 132 486.02 T
(colon) 168 486.02 T
(\373) 303 486.02 T
(ring above, degree sign) 339 486.02 T
(;) 132 471.02 T
(semicolon) 168 471.02 T
7 F
(\261) 303 471.02 T
0 F
(plus-minus sign) 339 471.02 T
(<) 132 456.02 T
(less-than sign) 168 456.02 T
2 8 Q
(2) 303 460.02 T
0 9 Q
(superscript two) 339 456.02 T
(=) 132 441.02 T
(equals sign) 168 441.02 T
2 8 Q
(3) 303 445.02 T
0 9 Q
(superscript three) 339 441.02 T
(>) 132 426.02 T
(greater-than sign) 168 426.02 T
(\253) 303 426.02 T
(acute) 339 426.02 T
(?) 132 411.02 T
(question mark) 168 411.02 T
7 F
(m) 303 411.02 T
0 F
(micro) 339 411.02 T
(@) 132 396.02 T
(commercial at) 168 396.02 T
(\246) 303 396.02 T
(pilcrow) 339 396.02 T
([) 132 381.02 T
(left square bracket) 168 381.02 T
(\245) 303 381.02 T
(middle dot) 339 381.02 T
(\134) 132 366.02 T
(reverse solidus) 168 366.02 T
(\374) 303 366.02 T
(cedilla) 339 366.02 T
(]) 132 351.02 T
(right square bracket) 168 351.02 T
2 8 Q
(1) 303 355.02 T
0 9 Q
(superscript one) 339 351.02 T
(^) 132 336.02 T
(circum\337ex) 168 336.02 T
(\274) 303 336.02 T
(masculine ordinal indicator) 339 336.02 T
(_) 132 321.02 T
(low line, underscore) 168 321.02 T
(\310) 303 321.02 T
(right angle quotation mark) 339 321.02 T
(\324) 132 306.02 T
(grave) 168 306.02 T
(\240) 303 306.02 T
(vulgar fraction 1/4) 339 306.02 T
({) 132 291.02 T
(left curly bracket) 168 291.02 T
(\240) 303 291.02 T
(vulgar fraction 1/2) 339 291.02 T
(|) 132 276.02 T
(vertical line) 168 276.02 T
(\240) 303 276.02 T
(vulgar fraction 3/4) 339 276.02 T
(}) 132 261.02 T
(right curly bracket) 168 261.02 T
(\300) 303 261.02 T
(inverted question mark) 339 261.02 T
(~) 132 246.02 T
(tilde) 168 246.02 T
7 F
(\264) 303 246.02 T
0 F
(multiplication sign) 339 246.02 T
7 F
(\270) 303 231.02 T
0 F
(division sign) 339 231.02 T
(\240) 132 201.02 T
4 12 Q
(denotes character unprintable in this document.) 139.5 201.02 T
72 672.98 558 686.02 C
126 680.04 558 680.04 2 L
0.25 H
2 Z
0 X
0 K
N
72 680.04 117 680.04 2 L
0 Z
N
0 0 612 792 C
72 649.02 558 662.98 C
72 654.99 558 654.99 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
(TBL. 4) 72 666.32 T
0 F
(The 65 Graphic Characters  \050Continued\051) 126 666.32 T
1 9 Q
(Char) 132 636.02 T
(.) 151.98 636.02 T
(Description) 168 636.02 T
(Char) 303 636.02 T
(.) 322.98 636.02 T
(Description) 339 636.02 T
126 631.02 468 631.02 2 L
V
0.5 H
0 Z
N
126 196.02 468 196.02 2 L
V
N
52 618.02 54 627.02 R
V
52 618.02 54 627.02 R
V
52 618.02 54 627.02 R
V
52 603.02 54 612.02 R
V
52 603.02 54 612.02 R
V
52 603.02 54 612.02 R
V
52 588.02 54 597.02 R
V
52 588.02 54 597.02 R
V
52 588.02 54 597.02 R
V
52 573.02 54 582.02 R
V
52 573.02 54 582.02 R
V
52 573.02 54 582.02 R
V
52 558.02 54 567.02 R
V
52 558.02 54 567.02 R
V
52 558.02 54 567.02 R
V
52 543.02 54 552.02 R
V
52 543.02 54 552.02 R
V
52 543.02 54 552.02 R
V
52 528.02 54 537.02 R
V
52 528.02 54 537.02 R
V
52 528.02 54 537.02 R
V
52 513.02 54 522.02 R
V
52 513.02 54 522.02 R
V
52 513.02 54 522.02 R
V
52 498.02 54 507.02 R
V
52 498.02 54 507.02 R
V
52 498.02 54 507.02 R
V
52 483.02 54 492.02 R
V
52 483.02 54 492.02 R
V
52 483.02 54 492.02 R
V
52 468.02 54 477.02 R
V
52 468.02 54 477.02 R
V
52 468.02 54 477.02 R
V
52 453.02 54 462.02 R
V
52 453.02 54 462.02 R
V
52 453.02 54 462.02 R
V
52 438.02 54 447.02 R
V
52 438.02 54 447.02 R
V
52 438.02 54 447.02 R
V
52 423.02 54 432.02 R
V
52 423.02 54 432.02 R
V
52 423.02 54 432.02 R
V
52 408.02 54 417.02 R
V
52 408.02 54 417.02 R
V
52 408.02 54 417.02 R
V
52 393.02 54 402.02 R
V
52 393.02 54 402.02 R
V
52 393.02 54 402.02 R
V
52 378.02 54 387.02 R
V
52 378.02 54 387.02 R
V
52 378.02 54 387.02 R
V
52 363.02 54 372.02 R
V
52 363.02 54 372.02 R
V
52 363.02 54 372.02 R
V
52 348.02 54 357.02 R
V
52 348.02 54 357.02 R
V
52 348.02 54 357.02 R
V
52 333.02 54 342.02 R
V
52 333.02 54 342.02 R
V
52 333.02 54 342.02 R
V
52 318.02 54 327.02 R
V
52 318.02 54 327.02 R
V
52 318.02 54 327.02 R
V
52 303.02 54 312.02 R
V
52 303.02 54 312.02 R
V
52 303.02 54 312.02 R
V
52 288.02 54 297.02 R
V
52 288.02 54 297.02 R
V
52 288.02 54 297.02 R
V
52 273.02 54 282.02 R
V
52 273.02 54 282.02 R
V
52 273.02 54 282.02 R
V
52 258.02 54 267.02 R
V
52 258.02 54 267.02 R
V
52 258.02 54 267.02 R
V
52 243.02 54 252.02 R
V
52 243.02 54 252.02 R
V
52 243.02 54 252.02 R
V
52 228.02 54 237.02 R
V
52 228.02 54 237.02 R
V
52 228.02 54 237.02 R
V
52 213.02 54 222.02 R
V
52 213.02 54 222.02 R
V
52 213.02 54 222.02 R
V
52 198.02 54 207.02 R
V
FMENDPAGE
%%EndPage: "49" 48
%%Page: "48" 48
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(IDL Syntax and Semantics) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(48) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
2 12 Q
0 X
(TBL. 3 on page 48 lists the decimal digit characters.) 108 341.02 T
(TBL. 4 on page 48 shows the graphic characters.) 108 251.02 T
0 9 Q
(Pp) 114 621.02 T
(Upper/Lower-case P) 150 621.02 T
(\354\225) 294 621.02 T
(Upper/Lower-case I with diaeresis) 330 621.02 T
(Qq) 114 606.02 T
(Upper/Lower-case Q) 150 606.02 T
(\240\240) 294 606.02 T
(Upper/Lower-case Icelandic eth) 330 606.02 T
(Rr) 114 591.02 T
(Upper/Lower-case R) 150 591.02 T
(\204\226) 294 591.02 T
(Upper/Lower-case N with tilde) 330 591.02 T
(Ss) 114 576.02 T
(Upper/Lower-case S) 150 576.02 T
(\361\230) 294 576.02 T
(Upper/Lower-case O with grave accent) 330 576.02 T
(Tt) 114 561.02 T
(Upper/Lower-case T) 150 561.02 T
(\356\227) 294 561.02 T
(Upper/Lower-case O with acute accent) 330 561.02 T
(Uu) 114 546.02 T
(Upper/Lower-case U) 150 546.02 T
(\357\231) 294 546.02 T
(Upper/Lower-case O with circum\337ex accent) 330 546.02 T
(Vv) 114 531.02 T
(Upper/Lower-case V) 150 531.02 T
(\315\233) 294 531.02 T
(Upper/Lower-case O with tilde) 330 531.02 T
(Ww) 114 516.02 T
(Upper/Lower-case W) 150 516.02 T
(\205\232) 294 516.02 T
(Upper/Lower-case O with diaeresis) 330 516.02 T
(Xx) 114 501.02 T
(Upper/Lower-case X) 150 501.02 T
(\257\277) 294 501.02 T
(Upper/Lower-case O with oblique stroke) 330 501.02 T
(Yy) 114 486.02 T
(Upper/Lower-case Y) 150 486.02 T
(\364\235) 294 486.02 T
(Upper/Lower-case U with grave accent) 330 486.02 T
(Zz) 114 471.02 T
(Upper/Lower-case Z) 150 471.02 T
(\362\234) 294 471.02 T
(Upper/Lower-case U with acute accent) 330 471.02 T
(\363\236) 294 456.02 T
(Upper/Lower-case U with circum\337ex accent) 330 456.02 T
(\206\237) 294 441.02 T
(Upper/Lower-case U with diaeresis) 330 441.02 T
(\240\240) 294 426.02 T
(Upper/Lower-case Y with acute accent) 330 426.02 T
(\240\240) 294 411.02 T
(Upper/Lower-case Icelandic thorn) 330 411.02 T
( \247) 294 396.02 T
(Lower-case German sharp S) 330 396.02 T
( \330) 294 381.02 T
(Lower-case Y with diaeresis) 330 381.02 T
(\240) 114 366.02 T
4 12 Q
(denotes character unprintable in this document) 121.5 366.02 T
54 311.98 540 325.02 C
108 319.04 540 319.04 2 L
0.25 H
2 Z
0 X
0 K
N
54 319.04 99 319.04 2 L
0 Z
N
0 0 612 792 C
54 288.02 540 301.98 C
54 293.99 540 293.99 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
(TBL. 3) 54 305.32 T
0 F
(Decimal Digits) 108 305.32 T
0 9 Q
(0 1 2 3 4 5 6 7 8 9) 114 278.02 T
54 221.98 540 235.02 C
108 229.04 540 229.04 2 L
0.25 H
2 Z
0 X
0 K
N
54 229.04 99 229.04 2 L
0 Z
N
0 0 612 792 C
54 198.02 540 211.98 C
54 203.99 540 203.99 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
(TBL. 4) 54 215.32 T
0 F
(The 65 Graphic Characters) 108 215.32 T
1 9 Q
(Char) 114 185.02 T
(.) 133.98 185.02 T
(Description) 150 185.02 T
(Char) 285 185.02 T
(.) 304.98 185.02 T
(Description) 321 185.02 T
0 F
(!) 114 170.02 T
(exclamation point) 150 170.02 T
(\301) 285 170.02 T
(inverted exclamation mark) 321 170.02 T
(") 114 155.02 T
(double quote) 150 155.02 T
(\242) 285 155.02 T
(cent sign) 321 155.02 T
(#) 114 140.02 T
(number sign) 150 140.02 T
(\243) 285 140.02 T
(pound sign) 321 140.02 T
($) 114 125.02 T
(dollar sign) 150 125.02 T
(\333) 285 125.02 T
(currency sign) 321 125.02 T
(%) 114 110.02 T
(percent sign) 150 110.02 T
(\264) 285 110.02 T
(yen sign) 321 110.02 T
(&) 114 95.02 T
(ampersand) 150 95.02 T
(\240) 285 95.02 T
(broken bar) 321 95.02 T
54 672.98 540 686.02 C
108 680.04 540 680.04 2 L
0.25 H
2 Z
0 X
0 K
N
54 680.04 99 680.04 2 L
0 Z
N
0 0 612 792 C
54 649.02 540 662.98 C
54 654.99 540 654.99 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
(TBL. 2) 54 666.32 T
0 F
(The 1) 108 666.32 T
(14 Alphabetic Characters \050Letters\051  \050Continued\051) 132.82 666.32 T
1 9 Q
(Char) 114 636.02 T
(.) 133.98 636.02 T
(Description) 150 636.02 T
(Char) 294 636.02 T
(.) 313.98 636.02 T
(Description) 330 636.02 T
108 631.02 531 631.02 2 L
V
0.5 H
0 Z
N
108 361.02 531 361.02 2 L
V
N
108 273.02 198 273.02 2 L
V
N
108 180.02 450 180.02 2 L
V
N
108 90.02 450 90.02 2 L
V
N
34 247.02 36 349.02 R
V
34 618.02 36 627.02 R
V
34 618.02 36 627.02 R
V
34 618.02 36 627.02 R
V
34 618.02 36 627.02 R
V
34 603.02 36 612.02 R
V
34 603.02 36 612.02 R
V
34 603.02 36 612.02 R
V
34 603.02 36 612.02 R
V
34 588.02 36 597.02 R
V
34 588.02 36 597.02 R
V
34 588.02 36 597.02 R
V
34 588.02 36 597.02 R
V
34 573.02 36 582.02 R
V
34 573.02 36 582.02 R
V
34 573.02 36 582.02 R
V
34 573.02 36 582.02 R
V
34 558.02 36 567.02 R
V
34 558.02 36 567.02 R
V
34 558.02 36 567.02 R
V
34 558.02 36 567.02 R
V
34 543.02 36 552.02 R
V
34 543.02 36 552.02 R
V
34 543.02 36 552.02 R
V
34 543.02 36 552.02 R
V
34 528.02 36 537.02 R
V
34 528.02 36 537.02 R
V
34 528.02 36 537.02 R
V
34 528.02 36 537.02 R
V
34 513.02 36 522.02 R
V
34 513.02 36 522.02 R
V
34 513.02 36 522.02 R
V
34 513.02 36 522.02 R
V
34 498.02 36 507.02 R
V
34 498.02 36 507.02 R
V
34 498.02 36 507.02 R
V
34 498.02 36 507.02 R
V
34 483.02 36 492.02 R
V
34 483.02 36 492.02 R
V
34 483.02 36 492.02 R
V
34 483.02 36 492.02 R
V
34 468.02 36 477.02 R
V
34 468.02 36 477.02 R
V
34 468.02 36 477.02 R
V
34 468.02 36 477.02 R
V
34 453.02 36 462.02 R
V
34 453.02 36 462.02 R
V
34 453.02 36 462.02 R
V
34 438.02 36 447.02 R
V
34 438.02 36 447.02 R
V
34 438.02 36 447.02 R
V
34 423.02 36 432.02 R
V
34 423.02 36 432.02 R
V
34 423.02 36 432.02 R
V
34 408.02 36 417.02 R
V
34 408.02 36 417.02 R
V
34 408.02 36 417.02 R
V
34 393.02 36 402.02 R
V
34 393.02 36 402.02 R
V
34 393.02 36 402.02 R
V
34 378.02 36 387.02 R
V
34 378.02 36 387.02 R
V
34 378.02 36 387.02 R
V
34 363.02 36 372.02 R
V
34 275.02 36 284.02 R
V
34 167.02 36 176.02 R
V
34 167.02 36 176.02 R
V
34 167.02 36 176.02 R
V
34 152.02 36 161.02 R
V
34 152.02 36 161.02 R
V
34 152.02 36 161.02 R
V
34 137.02 36 146.02 R
V
34 137.02 36 146.02 R
V
34 137.02 36 146.02 R
V
34 122.02 36 131.02 R
V
34 122.02 36 131.02 R
V
34 122.02 36 131.02 R
V
34 107.02 36 116.02 R
V
34 107.02 36 116.02 R
V
34 107.02 36 116.02 R
V
34 92.02 36 101.02 R
V
34 92.02 36 101.02 R
V
34 92.02 36 101.02 R
V
FMENDPAGE
%%EndPage: "48" 47
%%Page: "47" 47
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(Lexical Conventions) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(47) 546.89 60.29 T
72 87.98 558 686.02 R
7 X
V
72 668.99 558 672.02 C
126 670.5 558 670.5 2 L
0.25 H
2 Z
0 X
0 K
N
72 670.5 117 670.5 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(4.1) 101.15 676.68 T
0 F
(Lexical Conventions) 126 676.68 T
2 12 Q
(This section) 126 650.99 T
2 10 Q
(2) 184.3 655.79 T
2 12 Q
( presents the lexical conventions of IDL. It de\336nes tokens in an IDL speci\336-) 189.3 650.99 T
-0.37 (cation and describes comments, identi\336ers, keywords, and literals\321integer) 126 636.99 P
-0.37 (, character) 483.34 636.99 P
-0.37 (, and) 532.43 636.99 P
(\337oating point constants and string literals.) 126 622.99 T
(An IDL speci\336cation logically consists of one or more \336les. A \336le is conceptually trans-) 126 596.99 T
(lated in several phases.) 126 582.99 T
(The \336rst phase is preprocessing, which performs \336le inclusion and macro substitution.) 126 556.99 T
-0.31 (Preprocessing is controlled by directives introduced by lines having # as the \336rst character) 126 542.99 P
(other than white space. The result of preprocessing is a sequence of tokens. Such a) 126 528.99 T
(sequence of tokens, that is, a \336le after preprocessing, is called a translation unit.) 126 514.99 T
(IDL uses the ISO Latin-1 \0508859.1\051 character set. This character set is divided into alpha-) 126 488.99 T
(betic characters \050letters\051, digits, graphic characters, the space \050blank\051 character and for-) 126 474.99 T
(matting characters. TBL. 2 on page 47 shows the IDL alphabetic characters; upper) 126 460.99 T
(- and) 521.45 460.99 T
(lower) 126 446.99 T
(-case equivalencies are paired.) 153.07 446.99 T
72 112.98 558 143.01 C
126 116.01 270 116.01 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
2 10 Q
0 X
0 K
(2.) 126 106.32 T
(This section is an adaptation of) 144 106.32 T
4 F
(The Annotated C++ Refer) 271.14 106.32 T
(ence Manual) 376.15 106.32 T
4 12 Q
(,) 428.05 106.32 T
2 10 Q
( Chapter 2; it differs in the list) 431.05 106.32 T
(of legal keywords and punctuation.) 144 95.32 T
72 417.96 558 430.99 C
126 425.02 558 425.02 2 L
0.25 H
2 Z
0 X
0 K
N
72 425.02 117 425.02 2 L
0 Z
N
0 0 612 792 C
72 393.99 558 407.96 C
72 399.97 558 399.97 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
(TBL. 2) 72 411.29 T
0 F
(The 1) 126 411.29 T
(14 Alphabetic Characters \050Letters\051) 150.82 411.29 T
1 9 Q
(Char) 132 380.99 T
(.) 151.98 380.99 T
(Description) 168 380.99 T
(Char) 312 380.99 T
(.) 331.98 380.99 T
(Description) 348 380.99 T
0 F
(Aa) 132 365.99 T
(Upper/Lower-case A) 168 365.99 T
(\313\210) 312 365.99 T
(Upper/Lower-case A with grave accent) 348 365.99 T
(Bb) 132 350.99 T
(Upper/Lower-case B) 168 350.99 T
(\347\207) 312 350.99 T
(Upper/Lower-case A with acute accent) 348 350.99 T
(Cc) 132 335.99 T
(Upper/Lower-case C) 168 335.99 T
(\345\211) 312 335.99 T
(Upper/Lower-case A with circum\337ex accent) 348 335.99 T
(Dd) 132 320.99 T
(Upper/Lower-case D) 168 320.99 T
(\314\213) 312 320.99 T
(Upper/Lower-case A with tilde) 348 320.99 T
(Ee) 132 305.99 T
(Upper/Lower-case E) 168 305.99 T
(\200\212) 312 305.99 T
(Upper/Lower-case A with diaeresis) 348 305.99 T
(Ff) 132 290.99 T
(Upper/Lower-case F) 168 290.99 T
(\201\214) 312 290.99 T
(Upper/Lower-case A with ring above) 348 290.99 T
(Gg) 132 275.99 T
(Upper/Lower-case G) 168 275.99 T
(\256\276) 312 275.99 T
(Upper/Lower-case dipthong A with E) 348 275.99 T
(Hh) 132 260.99 T
(Upper/Lower-case H) 168 260.99 T
(\202\215) 312 260.99 T
(Upper/Lower-case C with cedilla) 348 260.99 T
(Ii) 132 245.99 T
(Upper/Lower-case I) 168 245.99 T
(\351\217) 312 245.99 T
(Upper/Lower-case E with grave accent) 348 245.99 T
(Jj) 132 230.99 T
(Upper/Lower-case J) 168 230.99 T
(\203\216) 312 230.99 T
(Upper/Lower-case E with acute accent) 348 230.99 T
(Kk) 132 215.99 T
(Upper/Lower-case K) 168 215.99 T
(\346\220) 312 215.99 T
(Upper/Lower-case E with circum\337ex accent) 348 215.99 T
(Ll) 132 200.99 T
(Upper/Lower-case L) 168 200.99 T
(\350\221) 312 200.99 T
(Upper/Lower-case E with diaeresis) 348 200.99 T
(Mm) 132 185.99 T
(Upper/Lower-case M) 168 185.99 T
(\355\223) 312 185.99 T
(Upper/Lower-case I with grave accent) 348 185.99 T
(Nn) 132 170.99 T
(Upper/Lower-case N) 168 170.99 T
(\352\222) 312 170.99 T
(Upper/Lower-case I with acute accent) 348 170.99 T
(Oo) 132 155.99 T
(Upper/Lower-case O) 168 155.99 T
(\353\224) 312 155.99 T
(Upper/Lower-case I with circum\337ex accent) 348 155.99 T
126 375.99 549 375.99 2 L
V
0.5 H
0 Z
N
126 150.99 549 150.99 2 L
V
N
52 592.99 54 604.99 R
V
52 510.99 54 522.99 R
V
52 442.99 54 454.99 R
V
52 407.96 54 417.96 R
V
52 362.99 54 371.99 R
V
52 362.99 54 371.99 R
V
52 362.99 54 371.99 R
V
52 347.99 54 356.99 R
V
52 347.99 54 356.99 R
V
52 347.99 54 356.99 R
V
52 347.99 54 356.99 R
V
52 332.99 54 341.99 R
V
52 332.99 54 341.99 R
V
52 332.99 54 341.99 R
V
52 332.99 54 341.99 R
V
52 317.99 54 326.99 R
V
52 317.99 54 326.99 R
V
52 317.99 54 326.99 R
V
52 317.99 54 326.99 R
V
52 302.99 54 311.99 R
V
52 302.99 54 311.99 R
V
52 302.99 54 311.99 R
V
52 302.99 54 311.99 R
V
52 287.99 54 296.99 R
V
52 287.99 54 296.99 R
V
52 287.99 54 296.99 R
V
52 287.99 54 296.99 R
V
52 272.99 54 281.99 R
V
52 272.99 54 281.99 R
V
52 272.99 54 281.99 R
V
52 272.99 54 281.99 R
V
52 257.99 54 266.99 R
V
52 257.99 54 266.99 R
V
52 257.99 54 266.99 R
V
52 257.99 54 266.99 R
V
52 242.99 54 251.99 R
V
52 242.99 54 251.99 R
V
52 242.99 54 251.99 R
V
52 242.99 54 251.99 R
V
52 227.99 54 236.99 R
V
52 227.99 54 236.99 R
V
52 227.99 54 236.99 R
V
52 227.99 54 236.99 R
V
52 212.99 54 221.99 R
V
52 212.99 54 221.99 R
V
52 212.99 54 221.99 R
V
52 212.99 54 221.99 R
V
52 197.99 54 206.99 R
V
52 197.99 54 206.99 R
V
52 197.99 54 206.99 R
V
52 197.99 54 206.99 R
V
52 182.99 54 191.99 R
V
52 182.99 54 191.99 R
V
52 182.99 54 191.99 R
V
52 182.99 54 191.99 R
V
52 167.99 54 176.99 R
V
52 167.99 54 176.99 R
V
52 167.99 54 176.99 R
V
52 167.99 54 176.99 R
V
52 152.99 54 161.99 R
V
52 152.99 54 161.99 R
V
52 152.99 54 161.99 R
V
52 152.99 54 161.99 R
V
FMENDPAGE
%%EndPage: "47" 46
%%Page: "46" 46
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(IDL Syntax and Semantics) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(46) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
2 12 Q
0 X
(IDL obeys the same lexical rules as C++) 108 678.02 T
2 10 Q
(1) 303.06 682.82 T
2 12 Q
(, although new keywords are introduced to sup-) 308.06 678.02 T
(port distribution concepts. It also provides full support for standard C++ preprocessing) 108 664.02 T
-0.4 (features. The IDL speci\336cation is expected to track relevant changes to C++ introduced by) 108 650.02 P
(the ANSI standardization ef) 108 636.02 T
(fort.) 242.01 636.02 T
(The description of IDL) 108 610.02 T
(\325) 217.81 610.02 T
(s lexical conventions is presented in \2444.1 on page 47. A descrip-) 221.15 610.02 T
(tion of IDL preprocessing is presented in \2444.2 on page 54. The scope rules for identi\336ers) 108 596.02 T
(in an IDL speci\336cation are described in \2444.1) 108 582.02 T
(1 on page 76.) 320.73 582.02 T
-0.06 (The IDL grammar is a subset of ANSI C++ with additional constructs to support the oper-) 108 556.02 P
(ation invocation mechanism. IDL is a declarative language; it supports C++ syntax for) 108 542.02 T
-0.46 (constant, type, and operation declarations; it does not include any algorithmic structures or) 108 528.02 P
(variables. The grammar is presented in \2444.3 on page 54.) 108 514.02 T
-0.43 (IDL-speci\336c pragmas \050those not de\336ned for C++\051 may appear anywhere in a speci\336cation;) 108 488.02 P
(the textual location of these pragmas may be semantically constrained by a particular) 108 474.02 T
(implementation.) 108 460.02 T
(A source \336le containing interface speci\336cations written in IDL must have a \322.idl\323 exten-) 108 434.02 T
(sion. The \336le orb.idl, which contains IDL type de\336nitions and is available on every ORB) 108 420.02 T
(implementation, is described in Appendix A.) 108 406.02 T
(This chapter describes IDL semantics and gives the syntax for IDL grammatical con-) 108 380.02 T
-0.2 (structs. The description of IDL grammar uses a syntax notation that is similar to Extended) 108 366.02 P
-0.21 (Backus-Naur format \050EBNF\051; TBL. 1 on page 46 lists the symbols used in this format and) 108 352.02 P
(their meaning.) 108 338.02 T
54 112.98 540 143.01 C
108 116.01 252 116.01 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
2 10 Q
0 X
0 K
(1.) 108 106.32 T
(Ellis, Margaret A. and Bjarne Stroustrup,) 126 106.32 T
4 F
(The Annotated C++ Refer) 293.39 106.32 T
(ence Manual) 398.4 106.32 T
2 F
(, Addison-Wesley) 450.3 106.32 T
(Publishing Company, Reading, Massachusetts, 1990, ISBN 0-201-51459-1) 126 95.32 T
54 308.98 540 322.02 C
108 316.04 540 316.04 2 L
0.25 H
2 Z
0 X
0 K
N
54 316.04 99 316.04 2 L
0 Z
N
0 0 612 792 C
54 285.02 540 298.98 C
54 290.99 540 290.99 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
(TBL. 1) 54 302.32 T
0 F
(IDL EBNF Format) 108 302.32 T
1 9 Q
(Symbol) 114 272.02 T
(Meaning) 301.27 272.02 T
0 F
(::=) 114 257.02 T
(Is de\336ned to be) 186 257.02 T
(|) 114 242.02 T
(Alternatively) 186 242.02 T
(<text>) 114 227.02 T
(Non-terminal) 186 227.02 T
(\322text\323) 114 212.02 T
(Literal) 186 212.02 T
(*) 114 197.02 T
(The preceding syntactic unit can be repeated zero or more times) 186 197.02 T
(+) 114 182.02 T
(The preceding syntactic unit can be repeated one or more times) 186 182.02 T
({}) 114 167.02 T
(The enclosed syntactic units are grouped as a single syntactic unit) 186 167.02 T
([]) 114 152.02 T
-0.22 (The enclosed syntactic unit is optional\321may occur zero or one time) 186 152.02 P
108 267.02 459 267.02 2 L
V
0.5 H
0 Z
N
108 147.02 459 147.02 2 L
V
N
34 674.02 36 686.02 R
V
34 606.02 36 658.02 R
V
34 552.02 36 590.02 R
V
34 402.02 36 522.02 R
V
34 254.02 36 263.02 R
V
34 239.02 36 248.02 R
V
34 224.02 36 233.02 R
V
34 209.02 36 218.02 R
V
34 194.02 36 203.02 R
V
34 179.02 36 188.02 R
V
34 164.02 36 173.02 R
V
34 149.02 36 158.02 R
V
FMENDPAGE
%%EndPage: "46" 45
%%Page: "45" 45
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 378 558 378 2 L
7 X
V
2 Z
0 X
N
72 74.02 558 74.02 2 L
7 X
V
0.25 H
0 X
N
72 55.01 558 66.96 R
7 X
V
0 9 Q
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
-2.78 (45) 546.89 60.29 P
72 396 558 693 R
7 X
V
0 24 Q
0 X
-0.48 (4) 72 677 S
-0.48 (IDL Syntax and Semantics) 126 677 S
0 684 63 729 R
7 X
1 K
V
0.5 H
0 Z
N
72 87.98 558 360 R
0 K
V
2 12 Q
0 X
(IDL \050the Interface De\336nition Language\051 is the language used to describe the interfaces) 126 306 T
-0.23 (that client objects call and object implementations provide. An interface de\336nition written) 126 292 P
(in IDL completely de\336nes the interface and fully speci\336es each operation\325) 126 278 T
(s parameters.) 481.07 278 T
(An IDL interface provides the information needed to develop clients that use the inter-) 126 264 T
(face\325) 126 250 T
(s operations. Clients are not written in IDL, which is purely a descriptive language,) 149.3 250 T
-0.14 (but in languages for which mappings from IDL concepts have been de\336ned. The mapping) 126 236 P
(of an IDL concept to a client language construct will depend on the facilities available in) 126 222 T
(the client language. For example, an IDL exception might be mapped to a structure in a) 126 208 T
(language that has no notion of exception, or to an exception in a language that does. The) 126 194 T
(binding of IDL concepts to the C language is described in Chapter 5; the C language has) 126 180 T
(no special status except that it is the \336rst language for which IDL mappings have been) 126 166 T
(established.) 126 152 T
52 148 54 300 R
V
FMENDPAGE
%%EndPage: "45" 44
%%Page: "44" 44
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(The Common Object Request Broker Architecture) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(44) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
54 668.99 540 672.02 C
108 670.5 540 670.5 2 L
0.25 H
2 Z
0 X
0 K
N
54 670.5 99 670.5 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(3.7) 83.15 676.68 T
0 F
(The Integration of Foreign Object Systems) 108 676.68 T
2 12 Q
(The Common ORB Architecture is designed to allow interoperation with a wide range of) 108 650.99 T
-0.07 (object systems \050see FIG. 10 on page 44\051. Because there are many existing object systems,) 108 636.99 P
(a common desire will be to allow the objects in those systems to be accessible via the) 108 622.99 T
-0.23 (ORB. For those object systems that are ORBs themselves, they may be connected to other) 108 608.99 P
(ORBs through the mechanisms described in chapter 10 on page 161.) 108 594.99 T
54 563.96 540 576.99 C
108 571.02 540 571.02 2 L
0.25 H
2 Z
0 X
0 K
N
54 571.02 99 571.02 2 L
0 Z
N
0 0 612 792 C
54 539.99 540 553.96 C
54 545.97 540 545.97 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
(FIG.  10) 54 557.29 T
0 F
(Dif) 108 557.29 T
(ferent W) 120.03 557.29 T
(ays to Integrate Foreign Object Systems) 157.43 557.29 T
2 12 Q
(For object systems that simply want to map their objects into ORB objects and receive) 108 302.98 T
(invocations through the ORB, one approach is to have those object systems appear to be) 108 288.98 T
(implementations of the corresponding ORB objects. The object system would register its) 108 274.98 T
(objects with the ORB and handle incoming requests, and could act like a client and per-) 108 260.98 T
(form outgoing requests.) 108 246.98 T
(In some cases, it will be impractical for another object system to act like a BOA object) 108 220.98 T
(implementation. An object adapter could be designed for objects that are created in con-) 108 206.98 T
(junction with the ORB and that are primarily invoked through the ORB. Another object) 108 192.98 T
(system may wish to create objects without consulting the ORB, and might expect most) 108 178.98 T
(invocations to occur within itself rather than through the ORB. In such a case, a more) 108 164.98 T
(appropriate object adapter might allow objects to be implicitly registered when they are) 108 150.98 T
(passed through the ORB.) 108 136.98 T
99 322.98 540 539.99 C
99 322.98 540 539.99 R
7 X
0 K
V
117 341.99 342 413.99 R
0.5 H
2 Z
0 X
N
392 341.99 531 413.99 R
4 H
N
347.86 371.48 323.99 369 342.92 383.75 345.39 377.61 4 Y
3 X
V
381 378.7 404.99 378 384.28 365.88 382.64 372.29 4 Y
V
345.4 377.61 369 386.99 369 368.99 382.65 372.29 4 L
0 Z
N
117 422.99 216 449.99 R
0.5 H
0 X
N
225 422.99 342 449.99 R
4 H
N
117 467.99 218.5 530.99 18 RR
N
229.5 467.99 342 530.99 18 RR
N
1 9 Q
(ORB Core) 204.03 378.96 T
(Basic Object Adapter) 123.85 433.96 T
(Special-purpose Adapter) 229.17 434.44 T
(Gateway) 349 353.44 T
(Object system as) 427.49 393.42 T
(Object system as) 251.54 513.96 T
(Object system as) 133.07 515.44 T
(a BOA object) 141.82 503.44 T
( implementation) 135.58 491.44 T
(an implementation) 248.8 501.96 T
(with a special-purpose) 240.06 489.96 T
(object adapter) 257.79 477.96 T
(another ORB) 436.74 381.42 T
(interoperating via a) 423 369.42 T
(gateway) 446.72 357.42 T
0 0 612 792 C
34 632.99 36 644.99 R
0 X
0 K
V
34 590.99 36 602.99 R
V
34 284.98 36 296.98 R
V
34 202.98 36 228.98 R
V
FMENDPAGE
%%EndPage: "44" 43
%%Page: "43" 43
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(Some example Object Adapters) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(43) 546.89 60.29 T
72 87.98 558 686.02 R
7 X
V
2 12 Q
0 X
(of the ORB Core. Every instance of a particular adapter must provide the same interface) 126 678.02 T
(and service for all the ORBs it is implemented on.) 126 664.02 T
-0.04 (It is also not necessary for all Object Adapters to provide the same interface or functional-) 126 638.02 P
(ity) 126 624.02 T
(. Some Object Implementations have special requirements, for example, an object-ori-) 137.88 624.02 T
(ented database system may wish to implicitly register its many thousands of objects) 126 610.02 T
(without doing individual calls to the Object Adapter) 126 596.02 T
(. In such a case, it would be impracti-) 375.52 596.02 T
(cal and unnecessary for the object adapter to maintain any per) 126 582.02 T
(-object state. By using an) 422.85 582.02 T
-0.34 (object adapter interface that is tuned towards such object implementations, it is possible to) 126 568.02 P
(take advantage of particular ORB Core details to provide the most ef) 126 554.02 T
(fective access to the) 455.88 554.02 T
(ORB.) 126 540.02 T
72 493.99 558 497.02 C
126 495.5 558 495.5 2 L
0.25 H
2 Z
0 X
0 K
N
72 495.5 117 495.5 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(3.6) 101.15 501.68 T
0 F
(Some example Object Adapters) 126 501.68 T
2 12 Q
-0.37 (There are a variety of possible object adapters. However) 126 475.99 P
-0.37 (, since the object adapter interface) 393.35 475.99 P
-0 (is something that object implementations depend on, it is desirable that there be as few as) 126 461.99 P
-0.45 (practical. Most object adapters are designed to cover a range of object implementations, so) 126 447.99 P
(only when an implementation requires radically dif) 126 433.99 T
(ferent services or interfaces should a) 371.61 433.99 T
(new object adapter be considered. In this section, we describe three object adapters that) 126 419.99 T
(might be useful.) 126 405.99 T
1 F
(3.6.1) 93.93 373.99 T
0 F
(Basic Object Adapter) 126 373.99 T
2 F
(This speci\336cation de\336nes an object adapter that can be used for most ORB objects with) 126 355.99 T
(conventional implementations \050See Chapter 9\051. For this object adapter) 126 341.99 T
(, implementations) 462.3 341.99 T
-0.04 (are generally separate programs. It allows there to be a program started per method, a sep-) 126 327.99 P
(arate program for each object, or a shared program for all instances of the object type. It) 126 313.99 T
-0.41 (provides a small amount of persistent storage for each object, which can be used as a name) 126 299.99 P
(or identi\336er for other storage, for access control lists, or other object properties. If the) 126 285.99 T
(implementation is not active when an invocation is performed, the BOA will start one.) 126 271.99 T
1 F
(3.6.2) 93.93 239.99 T
0 F
(Library Object Adapter) 126 239.99 T
2 F
(This object adapter is primarily used for objects that have library implementations. It) 126 221.99 T
-0.31 (accesses persistent storage in \336les, and does not support activation or authentication, since) 126 207.99 P
(the objects are assumed to be in the clients program.) 126 193.99 T
1 F
(3.6.3) 93.93 161.99 T
0 F
(Object-Oriented Database Adapter) 126 161.99 T
2 F
(This adapter uses a connection to an object-oriented database to provide access to the) 126 143.99 T
(objects stored in it. Since the OODB provides the methods and persistent storage, objects) 126 129.99 T
(may be registered implicitly and no state is required in the object adapter) 126 115.99 T
(.) 475.09 115.99 T
52 674.02 54 686.02 R
V
52 351.99 54 363.99 R
V
52 309.99 54 321.99 R
V
52 267.99 54 279.99 R
V
FMENDPAGE
%%EndPage: "43" 42
%%Page: "42" 42
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(The Common Object Request Broker Architecture) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(42) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
2 12 Q
0 X
-0.27 (possible for a particular object adapter to delegate one or more of its responsibilities to the) 108 678.02 P
(Core upon which it is constructed.) 108 664.02 T
-0.16 (As shown in FIG. 9 on page 42, the Object Adapter is implicitly involved in invocation of) 108 638.02 P
(the methods, although the direct interface is through the skeletons. For example, the) 108 624.02 T
(Object Adapter may be involved in activating the implementation or authenticating the) 108 610.02 T
(request.) 108 596.02 T
54 564.98 540 578.02 C
108 572.04 540 572.04 2 L
0.25 H
2 Z
0 X
0 K
N
54 572.04 99 572.04 2 L
0 Z
N
0 0 612 792 C
54 541.02 540 554.98 C
54 546.99 540 546.99 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
(FIG.  9) 54 558.32 T
0 F
(The Structure of a T) 108 558.32 T
(ypical Object Adapter) 196.33 558.32 T
2 12 Q
(The Object Adapter de\336nes most of the services from the ORB that the Object Implemen-) 108 250 T
-0.24 (tation can depend on. Dif) 108 236 P
-0.24 (ferent ORBs will provide dif) 228.4 236 P
-0.24 (ferent levels of service and dif) 365.14 236 P
-0.24 (ferent) 509.27 236 P
(operating environments may provide some properties implicitly and require others to be) 108 222 T
(added by the Object Adapter) 108 208 T
(. For example, it is common for Object Implementations to) 245.23 208 T
(want to store certain values in the object reference for easy identi\336cation of the object on) 108 194 T
(an invocation. If the Object Adapter allows the implementation to specify such values) 108 180 T
-0.19 (when a new object is created, it may be able to store them in the object reference for those) 108 166 P
(ORBs that permit it. If the ORB Core does not provide this feature, the Object Adapter) 108 152 T
-0.11 (would record the value in its own storage and provide it to the implementation on an invo-) 108 138 P
-0.41 (cation. W) 108 124 P
-0.41 (ith Object Adapters, it is possible for an Object Implementation to have access to) 153.74 124 P
-0.26 (a service whether or not it is implemented in the ORB Core\321if the ORB Core provides it,) 108 110 P
(the adapter simply provides an interface to it; if not, the adapter must implement it on top) 108 96 T
99 270 540 541.02 C
99 270 540 541.02 R
7 X
0 K
V
495 424.02 495 343.02 144 343.02 144 361.02 396 361.02 396 424.02 6 Y
0.5 H
2 Z
0 X
N
144 370.02 252 424.02 R
N
261 370.02 369 424.02 R
N
1 9 Q
(Interface B) 286.77 402.54 T
(Skeleton) 291.26 390.54 T
(Interface A) 169.77 402.54 T
(Skeleton) 174.26 390.54 T
(Object Adapter) 412.92 402.54 T
(Interface) 426.41 390.54 T
(Object Implementation) 263.35 507.54 T
(Interface A) 169.77 465.54 T
(Methods) 174.52 453.54 T
(Interface B) 286.77 465.54 T
(Methods) 291.52 453.54 T
144 442.02 252 487.02 18 RR
N
261 442.02 369 487.02 18 RR
N
135 433.02 495 532.02 18 RR
N
117 289.02 522 334.02 R
N
(ORB Core) 290.32 309.54 T
0 0 612 792 C
34 634.02 36 686.02 R
0 X
0 K
V
FMENDPAGE
%%EndPage: "42" 41
%%Page: "41" 41
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(The Structure of an Object Adapter) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(41) 546.89 60.29 T
72 87.98 558 686.02 R
7 X
V
2 12 Q
0 X
(Because of the range of possible object implementations, it is dif) 126 678.02 T
(\336cult to be de\336nitive) 436.58 678.02 T
(about how in general an object implementation is structured. See Chapter 9 for the struc-) 126 664.02 T
(ture of object implementations that use the Basic Object Adapter) 126 650.02 T
(.) 436.13 650.02 T
-0.3 (When an invocation occurs, the ORB Core, object adapter) 126 624.02 P
-0.3 (, and skeleton arrange that a call) 402.24 624.02 P
(is made to the appropriate method of the implementation. A parameter to that method) 126 610.02 T
(speci\336es the object being invoked, which the method can use to locate the data for the) 126 596.02 T
(object. Additional parameters are supplied according to the skeleton de\336nition. When the) 126 582.02 T
(method is complete, it returns, causing output parameters or exception results to be trans-) 126 568.02 T
(mitted back to the client.) 126 554.02 T
-0.02 (When a new object is created, the ORB may be noti\336ed so that the it knows where to \336nd) 126 528.02 P
(the implementation for that object. Usually) 126 514.02 T
(, the implementation also registers itself as) 331.76 514.02 T
-0.13 (implementing objects of a particular interface, and speci\336es how to start up the implemen-) 126 500.02 P
(tation if it is not already running.) 126 486.02 T
-0.47 (Most object implementations provide their behavior using facilities in addition to the ORB) 126 460.02 P
-0.09 (and object adapter) 126 446.02 P
-0.09 (. For example, although the Basic Object Adapter provides some persis-) 213.09 446.02 P
-0.34 (tent data associated with an object, that relatively small amount of data is typically used as) 126 432.02 P
-0.09 (an identi\336er for the actual object data stored in a storage service of the object implementa-) 126 418.02 P
-0.11 (tion\325) 126 404.02 P
-0.11 (s choosing. W) 148 404.02 P
-0.11 (ith this structure, it is not only possible for dif) 215.59 404.02 P
-0.11 (ferent object implementa-) 434.31 404.02 P
(tions to use the same storage service, it is also possible for objects to choose the service) 126 390.02 T
(that is most appropriate for them.) 126 376.02 T
72 329.99 558 333.02 C
126 331.5 558 331.5 2 L
0.25 H
2 Z
0 X
0 K
N
72 331.5 117 331.5 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(3.5) 101.15 337.68 T
0 F
(The Structure of an Object Adapter) 126 337.68 T
2 12 Q
(An object adapter \050see FIG. 9 on page 42\051 is the primary means for an object implementa-) 126 311.99 T
-0.43 (tion to access ORB services such as object reference generation. An object adapter exports) 126 297.99 P
-0.31 (a public interface to the object implementation, and a private interface to the skeleton. It is) 126 283.99 P
(built on a private ORB-dependent interface.) 126 269.99 T
(Object adapters are responsible for the following functions:) 126 243.99 T
(\245) 126 223.99 T
(generation and interpretation of object references) 144 223.99 T
(\245) 126 206.99 T
(method invocation) 144 206.99 T
(\245) 126 189.99 T
(security of interactions) 144 189.99 T
(\245) 126 172.99 T
(object and implementation activation and deactivation) 144 172.99 T
(\245) 126 155.99 T
(mapping object references to the corresponding object implementations) 144 155.99 T
(\245) 126 138.99 T
(registration of implementations) 144 138.99 T
-0.14 (These functions are performed using the ORB Core and any additional components neces-) 126 112.99 P
-0.21 (sary) 126 98.99 P
-0.21 (. Often, an object adapter will maintain its own state to accomplish its tasks. It may be) 145.2 98.99 P
52 646.02 54 672.02 R
V
52 564.02 54 576.02 R
V
52 524.02 54 536.02 R
V
52 496.02 54 508.02 R
V
52 307.99 54 319.99 R
V
52 151.99 54 163.99 R
V
52 94.99 54 106.99 R
V
FMENDPAGE
%%EndPage: "41" 40
%%Page: "40" 40
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(The Common Object Request Broker Architecture) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(40) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
54 668.99 540 672.02 C
108 670.5 540 670.5 2 L
0.25 H
2 Z
0 X
0 K
N
54 670.5 99 670.5 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(3.4) 83.15 676.68 T
0 F
(The Structure of an Object Implementation) 108 676.68 T
2 12 Q
-0 (An Object Implementation provides the actual state and behavior of an object. The object) 108 650.99 P
(implementation can be structured in a variety of ways. Besides de\336ning the methods for) 108 636.99 T
-0.46 (the operations themselves, an implementation will usually de\336ne procedures for activating) 108 622.99 P
(and deactivating objects and will use other objects or non-object facilities to make the) 108 608.99 T
-0.2 (object state persistent, to control access to the object, as well as to implement the methods.) 108 594.99 P
(The object implementation \050see FIG. 8 on page 40\051 interacts with the ORB in a variety of) 108 568.99 T
(ways to establish its identity) 108 554.99 T
(, to create new objects, and to obtain ORB-dependent ser-) 243.15 554.99 T
-0.45 (vices. It primarily does this via access to an Object Adapter) 108 540.99 P
-0.45 (, which provides an interface to) 388.48 540.99 P
(ORB services that is convenient for a particular style of object implementation.) 108 526.99 T
54 495.96 540 508.99 C
108 503.02 540 503.02 2 L
0.25 H
2 Z
0 X
0 K
N
54 503.02 99 503.02 2 L
0 Z
N
0 0 612 792 C
54 471.99 540 485.96 C
54 477.97 540 477.97 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
(FIG.  8) 54 489.29 T
0 F
(The Structure of a T) 108 489.29 T
(ypical Object Implementation) 196.33 489.29 T
99 120.99 540 471.99 C
99 120.99 540 471.99 R
7 X
0 K
V
279 174.95 405 228.95 R
3 H
2 Z
0 X
N
153 174.95 234 228.95 R
N
1 9 Q
(Object data) 314.38 366.47 T
108 318.95 468 318.95 2 L
8 X
V
4 H
N
108 147.99 468 462.99 18 RR
3 H
0 X
N
272.39 331.88 279 354.95 285.61 331.88 279 331.88 4 Y
V
279 331.88 279 282.95 2 L
4 H
N
(OBJECT IMPLEMENT) 224.94 445.96 T
(A) 316.15 445.96 T
(TION) 321.98 445.96 T
90 450 27 9 279 273.95 A
(ORB object reference) 321.44 274.91 T
(Library routines) 233.6 240.51 T
(Skeleton for) 168.89 207.47 T
(interface A) 171.64 195.47 T
(Object Adapter) 313.26 207.47 T
(routines) 327.74 195.47 T
0.5 H
90 450 27 18.02 279 372.97 A
162 336.95 243 390.95 R
3 H
N
(Methods for) 178.15 369.47 T
(interface A) 180.64 357.47 T
194.68 351.62 207 354.95 198.32 345.61 196.5 348.61 4 Y
V
0.5 H
107 180 36 144 207 210.95 A
(Up-call to) 126.67 285.47 T
(method) 130.92 273.47 T
0 0 612 792 C
34 646.99 36 658.99 R
0 X
0 K
V
34 550.99 36 576.99 R
V
34 522.99 36 534.99 R
V
FMENDPAGE
%%EndPage: "40" 39
%%Page: "39" 39
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(The Structure of a Client) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(39) 546.89 60.29 T
72 87.98 558 686.02 R
7 X
V
72 672.98 558 686.02 C
126 680.04 558 680.04 2 L
0.25 H
2 Z
0 X
0 K
N
72 680.04 117 680.04 2 L
0 Z
N
0 0 612 792 C
72 649.02 558 662.98 C
72 654.99 558 654.99 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
(FIG.  7) 72 666.32 T
0 F
(The Structure of a T) 126 666.32 T
(ypical Client) 214.33 666.32 T
2 12 Q
-0.05 (An alternative set of library code is available to perform invocations on objects, for exam-) 126 278.02 P
(ple when the object was not de\336ned at compile time. In that case, the client program pro-) 126 264.02 T
-0.25 (vides additional information to name the type of the object and the method being invoked,) 126 250.02 P
(and performs a sequence of calls to specify the parameters and initiate the invocation.) 126 236.02 T
(Clients most commonly obtain object references by receiving them as output parameters) 126 210.02 T
-0.21 (from invocations on other objects for which they have references. When a client is also an) 126 196.02 P
-0.39 (implementation, it receives object references as input parameters on invocations to objects) 126 182.02 P
(it implements. An object reference can also be converted to a string that can be stored in) 126 168.02 T
(\336les or preserved or communicated by dif) 126 154.02 T
(ferent means and subsequently turned back into) 326.3 154.02 T
(an object reference by the ORB that produced the string.) 126 140.02 T
117 298.02 558 649.02 C
117 298.02 558 649.02 R
7 X
0 K
V
135 352.02 261 406.02 R
3 H
2 Z
0 X
N
279 352.02 360 406.02 R
N
387 352.02 468 406.02 R
N
1 9 Q
(Language-dependent object references) 218.29 588.54 T
126 523.02 486 523.02 2 L
8 X
V
4 H
N
126 325.02 486 640.02 18 RR
3 H
0 X
N
312.61 510.09 306 487.02 299.39 510.09 306 510.09 4 Y
V
306 559.02 306 510.09 2 L
4 H
N
231.62 510.09 225 487.02 218.38 510.09 225 510.09 4 Y
V
225 559.02 225 510.09 2 L
N
393.61 510.09 387 487.02 380.39 510.09 387 510.09 4 Y
V
387 559.02 387 510.09 2 L
N
(CLIENT PROGRAM) 261.25 622.98 T
90 450 27 9 306 478.02 A
90 450 27.5 9 225.5 478.02 A
90 450 27 9 387 478.02 A
(ORB object references) 257.48 444.54 T
(Library routines) 277.73 417.54 T
(Stubs for) 409.14 384.54 T
(interface B) 405.64 372.54 T
(Stubs for) 298.42 384.54 T
(interface A) 294.92 372.54 T
(Dynamic invocation) 159.02 384.54 T
(interface) 182.74 372.54 T
0.5 H
90 450 18 4.5 225 563.52 A
90 450 18 4.5 306 563.52 A
90 450 18 4.5 387 563.52 A
0 0 612 792 C
52 246.02 54 286.02 R
0 X
0 K
V
52 164.02 54 204.02 R
V
52 136.02 54 148.02 R
V
FMENDPAGE
%%EndPage: "39" 38
%%Page: "38" 38
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(The Common Object Request Broker Architecture) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(38) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
2 12 Q
0 X
-0.34 (could know the location and structure of clients and implementations, it would be possible) 108 678.02 P
-0.26 (for a variety of optimizations to be implemented, for example, avoiding marshalling when) 108 664.02 P
(both are on the same machine.) 108 650.02 T
1 F
(3.2.4) 75.93 618.02 T
0 F
(Library-based ORB) 108 618.02 T
2 F
-0.22 (For objects that are light-weight and whose implementations can be shared, the implemen-) 108 600.02 P
(tation might actually be in a library) 108 586.02 T
(. In this case, the stubs could be the actual methods.) 276.45 586.02 T
-0.32 (This assumes that it is possible for a client program to get access to the data for the objects) 108 572.02 P
(and that the implementation trusts the client not to damage the data.) 108 558.02 T
54 511.99 540 515.02 C
108 513.5 540 513.5 2 L
0.25 H
2 Z
0 X
0 K
N
54 513.5 99 513.5 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(3.3) 83.15 519.68 T
0 F
(The Structure of a Client) 108 519.68 T
2 12 Q
(A client of an object has an object reference that refers to that object. An object reference) 108 493.99 T
(is a token that may be invoked or passed as a parameter to an invocation on a dif) 108 479.99 T
(ferent) 494.5 479.99 T
-0.07 (object. Invocation of an object involves specifying the object to be invoked, the operation) 108 465.99 P
(to be performed, and parameters to be given to the operation or returned from it.) 108 451.99 T
-0.03 (The ORB manages the control transfer and data transfer to the object implementation and) 108 425.99 P
-0.15 (back to the client. In the event that the ORB cannot complete the invocation, an exception) 108 411.99 P
(response is provided. Ordinarily) 108 397.99 T
(, a client calls a routine in its program that performs the) 261.78 397.99 T
(invocation and returns when the operation is complete.) 108 383.99 T
-0.43 (Clients access object-type-speci\336c stubs as library routines in their program \050see FIG. 7 on) 108 357.99 P
(page 39\051. The client program thus sees routines callable in the normal way in its program-) 108 343.99 T
(ming language. All implementations will provide a language-speci\336c data type to use to) 108 329.99 T
-0.27 (refer to objects, often an opaque pointer) 108 315.99 P
-0.27 (. The client then passes that object reference to the) 297.23 315.99 P
(stub routines to initiate an invocation. The stubs have access to the object reference repre-) 108 301.99 T
(sentation and interact with the ORB to perform the invocation. \050See \2445.1 on page 81 for) 108 287.99 T
(more details on language mapping of object references.\051) 108 273.99 T
34 393.99 36 419.99 R
V
34 269.99 36 365.99 R
V
FMENDPAGE
%%EndPage: "38" 37
%%Page: "37" 37
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(Some Example ORBs) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(37) 546.89 60.29 T
72 87.98 558 686.02 R
7 X
V
2 12 Q
0 X
(ple, debugging information, libraries of stubs or skeletons, routines that can format or) 126 678.02 T
(browse particular kinds of objects, etc., might be associated with the Interface Repository) 126 664.02 T
(.) 554.57 664.02 T
1 F
(3.1.13) 87.26 632.02 T
0 F
(Implementation Repository) 126 632.02 T
2 F
(The Implementation Repository contains information that allows the ORB to locate and) 126 606.02 T
-0.04 (activate implementations of objects. Although most of the information in the Implementa-) 126 592.02 P
(tion Repository is speci\336c to an ORB or operating environment, the Implementation) 126 578.02 T
(Repository is the conventional place for recording such information. Ordinarily) 126 564.02 T
(, installa-) 506.29 564.02 T
(tion of implementations and control of policies related to the activation and execution of) 126 550.02 T
(object implementations is done through operations on the Implementation Repository) 126 536.02 T
(.) 535.31 536.02 T
(In addition to its role in the functioning of the ORB, the Implementation Repository is a) 126 510.02 T
(common place to store additional information associated with implementations of ORB) 126 496.02 T
(objects. For example, debugging information, administrative control, resource allocation,) 126 482.02 T
(security) 126 468.02 T
(, etc., might be associated with the Implementation Repository) 163.19 468.02 T
(.) 462.56 468.02 T
72 421.99 558 425.02 C
126 423.5 558 423.5 2 L
0.25 H
2 Z
0 X
0 K
N
72 423.5 117 423.5 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(3.2) 101.15 429.68 T
0 F
(Some Example ORBs) 126 429.68 T
2 12 Q
(There are a wide variety of ORB implementations possible within the Common ORB) 126 403.99 T
(Architecture. This section will illustrate some of the dif) 126 389.99 T
(ferent options. Note that a particu-) 391.94 389.99 T
(lar ORB might support multiple options and protocols for communication.) 126 375.99 T
1 F
(3.2.1) 93.93 343.99 T
0 F
(Client- and Implementation-resident ORB) 126 343.99 T
2 F
(If there is a suitable communication mechanism present, an ORB can be implemented in) 126 325.99 T
(routines resident in the clients and implementations. The stubs in the client either use a) 126 311.99 T
-0.12 (location-transparent IPC mechanism or directly access a location service to establish com-) 126 297.99 P
-0.28 (munication with the implementations. Code linked with the implementation is responsible) 126 283.99 P
(for setting up appropriate databases for use by clients.) 126 269.99 T
1 F
(3.2.2) 93.93 237.99 T
0 F
(Server-based ORB) 126 237.99 T
2 F
(T) 126 219.99 T
(o centralize the management of the ORB, all clients and implementations can communi-) 132.49 219.99 T
-0.06 (cate with one or more servers whose job it is to route requests from clients to implementa-) 126 205.99 P
(tions. The ORB could be a normal program as far as the underlying operating system is) 126 191.99 T
(concerned, and normal IPC could be used to communicate with the ORB.) 126 177.99 T
1 F
(3.2.3) 93.93 145.99 T
0 F
(System-based ORB) 126 145.99 T
2 F
(T) 126 127.99 T
(o enhance security) 132.49 127.99 T
(, robustness, and performance, the ORB could be provided as a basic) 220.96 127.99 T
-0.12 (service of the underlying operating system. Object references could be made unfor) 126 113.99 P
-0.12 (geable,) 520.82 113.99 P
(reducing the expense of authentication on each request. Because the operating system) 126 99.99 T
52 546.02 54 558.02 R
V
52 478.02 54 504.02 R
V
52 425.02 54 439.02 R
V
FMENDPAGE
%%EndPage: "37" 36
%%Page: "36" 36
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(The Common Object Request Broker Architecture) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(36) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
2 12 Q
0 X
(The existence of a skeleton does not imply the existence of a corresponding client stub) 108 678.02 T
(\050clients can also make requests via the dynamic invocation interface\051.) 108 664.02 T
(It is possible to write an object adapter that does not use skeletons to invoke implementa-) 108 638.02 T
(tion methods. For example, it may be possible to create implementations dynamically for) 108 624.02 T
(languages such as Smalltalk.) 108 610.02 T
1 F
(3.1.10) 69.26 578.02 T
0 F
( Object Adapters) 108 578.02 T
2 F
(An object adapter is the primary way that an object implementation accesses services pro-) 108 560.02 T
(vided by the ORB. There are expected to be a few object adapters that will be widely) 108 546.02 T
(available, with interfaces that are appropriate for speci\336c kinds of objects. Services pro-) 108 532.02 T
-0 (vided by the ORB through an Object Adapter often include: generation and interpretation) 108 518.02 P
(of object references, method invocation, security of interactions, object and implementa-) 108 504.02 T
-0.04 (tion activation and deactivation, mapping object references to implementations, and regis-) 108 490.02 P
(tration of implementations.) 108 476.02 T
(The wide range of object granularities, lifetimes, policies, implementation styles, and) 108 450.02 T
(other properties make it dif) 108 436.02 T
(\336cult for the ORB Core to provide a single interface that is) 238.36 436.02 T
(convenient and ef) 108 422.02 T
(\336cient for all objects. Thus, through Object Adapters, it is possible for) 193.04 422.02 T
(the ORB to tar) 108 408.02 T
(get particular groups of object implementations that have similar require-) 178.08 408.02 T
(ments with interfaces tailored to them.) 108 394.02 T
1 F
(3.1.1) 69.92 362.02 T
(1) 95.93 362.02 T
0 F
(ORB Interface) 108 362.02 T
2 F
-0.02 (The ORB Interface is the interface that goes directly to the ORB which is the same for all) 108 336.02 P
-0.33 (ORBs and does not depend on the object\325) 108 322.02 P
-0.33 (s interface or object adapter) 304.53 322.02 P
-0.33 (. Because most of the) 435.75 322.02 P
(functionality of the ORB is provided through the object adapter) 108 308.02 T
(, stubs, skeleton, or) 412.32 308.02 T
(dynamic invocation, there are only a few operations that are common across all objects.) 108 294.02 T
(These operations are useful to both clients and implementations of objects.) 108 280.02 T
1 F
(3.1.12) 69.26 248.02 T
0 F
(Interface Repository) 108 248.02 T
2 F
(The Interface Repository is a service that provides persistent objects that represent the) 108 222.02 T
-0.39 (IDL information in a form available at runtime. The Interface Repository information may) 108 208.02 P
-0.1 (be used by the ORB to perform requests. Moreover) 108 194.02 P
-0.1 (, using the information in the Interface) 352.85 194.02 P
(Repository) 108 180.02 T
(, it is possible for a program to encounter an object whose interface was not) 159.86 180.02 T
(known when the program was compiled, yet, be able to determine what operations are) 108 166.02 T
(valid on the object and make an invocation on it.) 108 152.02 T
-0.26 (In addition to its role in the functioning of the ORB, the Interface Repository is a common) 108 126.02 P
-0.11 (place to store additional information associated with interfaces to ORB objects. For exam-) 108 112.02 P
34 674.02 36 686.02 R
V
34 606.02 36 646.02 R
V
34 472.02 36 526.02 R
V
34 108.02 36 120.02 R
V
FMENDPAGE
%%EndPage: "36" 35
%%Page: "35" 35
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(The Structure of an Object Request Broker) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(35) 546.89 60.29 T
72 87.98 558 686.02 R
7 X
V
2 12 Q
0 X
(ented languages, it is a good idea to hide the exact ORB representation of the object) 126 678.02 T
(reference, method names, etc. A particular language mapping to CORBA should be the) 126 664.02 T
-0.3 (same for all ORB implementations; however) 126 650.02 P
-0.3 (, language mappings for languages other than) 338.9 650.02 P
(C are not currently part of the speci\336cation. The language mapping includes de\336nition of) 126 636.02 T
(the language-speci\336c data types and procedure interfaces to access objects through the) 126 622.02 T
(ORB. It includes the structure of the client stub interface, the dynamic invocation inter-) 126 608.02 T
(face, the implementation skeleton, the object adapters, and the direct ORB interface.) 126 594.02 T
(The language mapping also de\336nes the interaction between object invocations and the) 126 568.02 T
(threads of control in the client or implementation. The most common mappings provide) 126 554.02 T
(synchronous calls, in that the routine returns when the object operation completes. Addi-) 126 540.02 T
-0.08 (tional mappings may be provided to allow a call to be initiated and control returned to the) 126 526.02 P
(program. In such cases, additional language-speci\336c routines must be provided to syn-) 126 512.02 T
(chronize the program\325) 126 498.02 T
(s threads of control with the object invocation.) 231.91 498.02 T
1 F
(3.1.7) 93.93 466.02 T
0 F
( Client Stubs) 126 466.02 T
2 F
(For a particular language mapping, there will be a programming interface to the stubs for) 126 448.02 T
-0.04 (each interface type. Generally) 126 434.02 P
-0.04 (, the stubs will present access to the IDL-de\336ned operations) 268.96 434.02 P
(on an object in a way that is easy for programmers to predict once they are familiar with) 126 420.02 T
(IDL and the language mapping for the particular programming language. The stubs make) 126 406.02 T
-0.21 (calls on the rest of the ORB using interfaces that are private to, and presumably optimized) 126 392.02 P
(for) 126 378.02 T
(, the particular ORB Core. If more than one ORB is available, there may be dif) 139.51 378.02 T
(ferent) 517.68 378.02 T
(stubs corresponding to the dif) 126 364.02 T
(ferent ORBs. In this case, it is necessary for the ORB and) 268.36 364.02 T
-0.15 (language mapping to cooperate to associate the correct stubs with the particular object ref-) 126 350.02 P
(erence.) 126 336.02 T
1 F
(3.1.8) 93.93 304.02 T
0 F
(Dynamic Invocation Interface) 126 304.02 T
2 F
(An interface is also available that allows the dynamic construction of object invocations,) 126 286.02 T
(that is, rather than calling a stub routine that is speci\336c to a particular operation on a par-) 126 272.02 T
-0.38 (ticular object, a client may specify the object to be invoked, the operation to be performed,) 126 258.02 P
(and the set of parameters for the operation through a call or sequence of calls. The client) 126 244.02 T
(code must supply information about the operation to be performed and the types of the) 126 230.02 T
(parameters being passed \050perhaps obtaining it from an Interface Repository or other run-) 126 216.02 T
(time source\051. The nature of the dynamic invocation interface may vary substantially from) 126 202.02 T
(one programming language mapping to another) 126 188.02 T
(.) 353.52 188.02 T
1 F
(3.1.9) 93.93 156.02 T
0 F
( Implementation Skeleton) 126 156.02 T
2 F
(For a particular language mapping, and possibly depending on the object adapter) 126 138.02 T
(, there) 513.24 138.02 T
(will be an interface to the methods that implement each type of object. The interface will) 126 124.02 T
(generally be an up-call interface, in that the object implementation writes routines that) 126 110.02 T
(conform to the interface and the ORB calls them through the skeleton.) 126 96.02 T
52 632.02 54 658.02 R
V
52 590.02 54 602.02 R
V
52 430.02 54 456.02 R
V
52 240.02 54 252.02 R
V
52 184.02 54 224.02 R
V
52 92.02 54 104.02 R
V
FMENDPAGE
%%EndPage: "35" 34
%%Page: "34" 34
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(The Common Object Request Broker Architecture) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(34) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
2 12 Q
0 X
(Generally) 108 678.02 T
(, object implementations do not depend on the ORB or how the client invokes) 154.51 678.02 T
(the object. Object implementations may select interfaces to ORB-dependent services by) 108 664.02 T
(the choice of Object Adapter) 108 650.02 T
(. Object implementations are portable across any ORB that) 245.89 650.02 T
(supports the desired language mapping and implements the desired Object Adapter) 108 636.02 T
(.) 505.73 636.02 T
1 F
(3.1.4) 75.93 604.02 T
0 F
(Object References) 108 604.02 T
2 F
(An Object Reference is the information needed to specify an object within an ORB. Both) 108 586.02 T
(clients and object implementations have an opaque notion of object references according) 108 572.02 T
(to the language mapping, and thus are insulated from the actual representation of them.) 108 558.02 T
-0.24 (T) 108 544.02 P
-0.24 (wo ORB implementations may dif) 114.49 544.02 P
-0.24 (fer in their choice of Object Reference representations.) 278.57 544.02 P
-0.35 (The representation of an object reference handed to a client is only valid for the lifetime of) 108 518.02 P
(that client.) 108 504.02 T
(All ORBs must provide the same language mapping to an object reference \050usually) 108 478.02 T
(referred to as an Object\051 for a particular programming language. This permits a program) 108 464.02 T
(written in a particular language to access object references independent of the particular) 108 450.02 T
-0.49 (ORB. The language mapping may also provide additional ways to access object references) 108 436.02 P
(in a typed way for the convenience of the programmer) 108 422.02 T
(.) 368.12 422.02 T
(There is a distinguished object reference, guaranteed to be dif) 108 396.02 T
(ferent from all object refer-) 403.54 396.02 T
(ences, that denotes no object.) 108 382.02 T
1 F
(3.1.5) 75.93 350.02 T
0 F
( IDL Interface De\336nition Language) 108 350.02 T
2 F
(The IDL Interface De\336nition Language de\336nes the types of objects by specifying their) 108 332.02 T
(interfaces. An interface consists of a set of named operations and the parameters to those) 108 318.02 T
(operations. Note that although IDL provides the conceptual framework for describing the) 108 304.02 T
-0 (objects manipulated by the ORB, it is not necessary for there to be IDL source code avail-) 108 290.02 P
-0.37 (able for the ORB to work. As long as the equivalent information is available in the form of) 108 276.02 P
(stub routines or a runtime interface repository) 108 262.02 T
(, a particular ORB may be able to function) 327.06 262.02 T
(correctly) 108 248.02 T
(.) 149.85 248.02 T
(IDL is the means by which a particular object implementation tells its potential clients) 108 222.02 T
(what operations are available and how they should be invoked. From the IDL de\336nitions,) 108 208.02 T
-0.21 (it is possible to map CORBA objects into particular programming languages or object sys-) 108 194.02 P
(tems.) 108 180.02 T
1 F
(3.1.6) 75.93 148.02 T
0 F
( Programming Language Mapping) 108 148.02 T
2 F
(Dif) 108 130.02 T
(ferent object-oriented or non-object-oriented programming languages may prefer to) 123.77 130.02 T
(access CORBA objects in dif) 108 116.02 T
(ferent ways. For object-oriented languages, it may be desir-) 248.36 116.02 T
(able to see CORBA objects as programming language objects. Even for non-object-ori-) 108 102.02 T
34 540.02 36 552.02 R
V
34 378.02 36 472.02 R
V
34 258.02 36 270.02 R
V
FMENDPAGE
%%EndPage: "34" 33
%%Page: "33" 33
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(The Structure of an Object Request Broker) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(33) 546.89 60.29 T
72 87.98 558 686.02 R
7 X
V
2 12 Q
0 X
(Dif) 126 678.02 T
(ferent ORBs may make quite dif) 141.77 678.02 T
(ferent implementation choices, and, together with the) 297.78 678.02 T
(IDL compilers, repositories, and various Object Adapters, provide a set of services to cli-) 126 664.02 T
(ents and implementations of objects that have dif) 126 650.02 T
(ferent properties and qualities.) 361.3 650.02 T
(There may be multiple ORB implementations \050also described as multiple ORBs\051 which) 126 624.02 T
(have dif) 126 610.02 T
(ferent representations for object references and dif) 164.75 610.02 T
(ferent means of performing) 406.31 610.02 T
(invocations. It may be possible for a client to simultaneously have access to two object) 126 596.02 T
(references managed by dif) 126 582.02 T
(ferent ORB implementations. When two ORBs are intended to) 252.66 582.02 T
-0.16 (work together) 126 568.02 P
-0.16 (, those ORBs must be able to distinguish their object references. It is not the) 192.31 568.02 P
(responsibility of the client to do so.) 126 554.02 T
-0.43 (The ORB Core is that part of the ORB that provides the basic representation of objects and) 126 528.02 P
(communication of requests. CORBA is designed to support dif) 126 514.02 T
(ferent object mechanisms,) 427.27 514.02 T
(and it does so by structuring the ORB with components above the ORB Core, which pro-) 126 500.02 T
(vide interfaces that can mask the dif) 126 486.02 T
(ferences between ORB Cores.) 298.98 486.02 T
1 F
(3.1.2) 93.93 454.02 T
0 F
(Clients) 126 454.02 T
2 F
(A client of an object has access to an object reference for the object, and invokes opera-) 126 436.02 T
-0.02 (tions on the object. A client knows only the logical structure of the object according to its) 126 422.02 P
(interface and experiences the behavior of the object through invocations. Although we) 126 408.02 T
-0.17 (will generally consider a client to be a program or process initiating requests on an object,) 126 394.02 P
(it is important to recognize that something is a client relative to a particular object. For) 126 380.02 T
(example, the implementation of one object may be a client of other objects) 126 366.02 T
(Clients generally see objects and ORB interfaces through the perspective of a language) 126 340.02 T
(mapping, bringing the ORB right up to the programmer) 126 326.02 T
(\325) 393.29 326.02 T
(s level. Clients are maximally) 396.62 326.02 T
-0.23 (portable and should be able to work without source changes on any ORB that supports the) 126 312.02 P
(desired language mapping with any object instance that implements the desired interface.) 126 298.02 T
(Clients have no knowledge of the implementation of the object, which object adapter is) 126 284.02 T
(used by the implementation, or which ORB is used to access it.) 126 270.02 T
1 F
(3.1.3) 93.93 238.02 T
0 F
(Object implementations) 126 238.02 T
2 F
(An object implementation provides the semantics of the object, usually by de\336ning data) 126 220.02 T
(for the object instance and code for the object\325) 126 206.02 T
(s methods. Often the implementation will) 348.49 206.02 T
(use other objects or additional software to implement the behavior of the object. In some) 126 192.02 T
-0.17 (cases, the primary function of the object is to have side-ef) 126 178.02 P
-0.17 (fects on other things that are not) 401.59 178.02 P
(objects.) 126 164.02 T
(A variety of object implementations can be supported, including separate servers, librar-) 126 138.02 T
(ies, a program per method, an encapsulated application, an object-oriented database, etc.) 126 124.02 T
(Through the use of additional object adapters, it is possible to support virtually any style) 126 110.02 T
(of object implementation.) 126 96.02 T
52 660.02 54 672.02 R
V
52 550.02 54 604.02 R
V
52 92.02 54 118.02 R
V
FMENDPAGE
%%EndPage: "33" 32
%%Page: "32" 32
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(The Common Object Request Broker Architecture) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(32) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
54 672.98 540 686.02 C
108 680.04 540 680.04 2 L
0.25 H
2 Z
0 X
0 K
N
54 680.04 99 680.04 2 L
0 Z
N
0 0 612 792 C
54 649.02 540 662.98 C
54 654.99 540 654.99 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
(FIG.  6) 54 666.32 T
0 F
(Interface and Implementation Repositories) 108 666.32 T
2 12 Q
-0.29 (FIG. 6 on page 32 shows how interface and implementation information is made available) 108 342 P
(to clients and object implementations. The interface is de\336ned in IDL and/or in the Inter-) 108 328 T
(face Repository; the de\336nition is used to generate the client Stubs and the object imple-) 108 314 T
(mentation Skeletons.) 108 300 T
-0.41 (The Object Implementation information is provided at installation time and is stored in the) 108 274 P
(Implementation Repository for use during request delivery) 108 260 T
(.) 389.03 260 T
1 F
(3.1.1) 75.93 228 T
0 F
( Object Request Broker) 108 228 T
2 F
-0.11 (In the architecture, the ORB is not required to be implemented as a single component, but) 108 210 P
(rather it is de\336ned by its interfaces. Any ORB implementation that provides the appropri-) 108 196 T
(ate interface is acceptable. The interface is or) 108 182 T
(ganized into three categories:) 324.91 182 T
1 10 Q
(1.) 108 162 T
2 12 Q
(those operations that are the same for all ORB implementations,) 126 162 T
1 10 Q
(2.) 108 145 T
2 12 Q
(those operations that are speci\336c to particular types of objects, and) 126 145 T
1 10 Q
(3.) 108 128 T
2 12 Q
(those operations that are speci\336c to particular styles of object implementations.) 126 128 T
54 362 540 649.02 C
54 362 540 649.02 R
7 X
0 K
V
187.33 491.26 235.33 523.26 R
0.5 H
2 Z
0 X
N
1 9 Q
(Interface) 117.6 506.97 T
(Repository) 112.86 496.97 T
154.33 589.76 223.67 634.76 R
N
142.2 525.34 133.33 517.26 136.57 528.82 139.39 527.08 4 Y
V
177.33 589.26 139.39 527.07 2 L
N
206.32 535.22 205.33 523.26 199.83 533.93 203.07 534.57 4 Y
V
192.33 589.26 203.08 534.57 2 L
N
(IDL) 181.76 614.71 T
(De\336nitions) 165.78 604.71 T
(Implementation) 388.12 503.97 T
(Repository) 397.86 493.97 T
382.33 488.26 458.33 518.26 15 RR
N
105.33 488.26 162.33 517.26 14.5 RR
N
389.33 589.76 458.67 634.76 R
N
(Implementation) 391.79 614.71 T
(Installation) 401.28 604.71 T
268.58 525.28 273.33 514.26 263.46 521.09 266.02 523.19 4 Y
V
212.33 589.26 266.03 523.18 2 L
N
182.33 486.26 230.33 518.26 R
7 X
V
0 X
N
177.33 481.26 225.33 513.26 R
7 X
V
0 X
N
(Stubs) 189.33 492.26 T
284.33 492.26 332.33 524.26 R
N
279.33 487.26 327.33 519.26 R
7 X
V
0 X
N
274.33 482.26 322.33 514.26 R
7 X
V
0 X
N
(Skeletons) 275.5 494.26 T
83.83 385.26 260.83 439.26 18 RR
7 X
V
4 H
4 X
N
0 X
(Client) 163.35 416.98 T
274.5 383.26 510.17 437.26 18 RR
7 X
V
4 X
N
0 X
(Object Implementation) 345.39 415.61 T
204.64 441.79 201.33 430.26 198.03 441.79 201.33 441.79 4 Y
V
201.33 484.26 201.33 441.79 2 L
0.5 H
N
304.64 443.2 301.33 431.67 298.03 443.2 301.33 443.2 4 Y
V
301.33 485.26 301.33 443.2 2 L
N
423.45 440.85 420.33 429.26 416.83 440.74 420.14 440.8 4 Y
V
419.33 491.26 420.15 440.79 2 L
N
424.64 527.79 421.33 516.26 418.03 527.79 421.33 527.79 4 Y
V
421.33 594.26 421.33 527.79 2 L
N
133.64 441.79 130.33 430.26 127.03 441.79 130.33 441.79 4 Y
V
130.33 492.26 130.33 441.79 2 L
N
0 0 612 792 C
34 296 36 350 R
0 X
0 K
V
FMENDPAGE
%%EndPage: "32" 31
%%Page: "31" 31
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(The Structure of an Object Request Broker) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(31) 546.89 60.29 T
72 87.98 558 686.02 R
7 X
V
72 672.98 558 686.02 C
126 680.04 558 680.04 2 L
0.25 H
2 Z
0 X
0 K
N
72 680.04 117 680.04 2 L
0 Z
N
0 0 612 792 C
72 649.02 558 662.98 C
72 654.99 558 654.99 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
(FIG.  5) 72 666.32 T
0 F
(An Object Implementation Receiving a Request) 126 666.32 T
2 12 Q
-0.27 (The ORB locates the appropriate implementation code, transmits parameters and transfers) 126 295 P
(control to the Object Implementation through an IDL skeleton \050see FIG. 5 on page 31\051.) 126 281 T
-0.44 (Skeletons are speci\336c to the interface and the object adapter) 126 267 P
-0.44 (. In performing the request, the) 408.78 267 P
(object implementation may obtain some services from the ORB through the Object) 126 253 T
(Adapter) 126 239 T
(. When the request is complete, control and output values are returned to the cli-) 163.97 239 T
(ent.) 126 225 T
(The Object Implementation may choose which Object Adapter to use. This decision is) 126 199 T
(based on what kind of services the Object Implementation requires.) 126 185 T
72 315 558 649.02 C
72 315 558 649.02 R
7 X
0 K
V
304.66 586.02 540.33 640.02 18 RR
V
4 H
2 Z
4 X
N
385.17 534.02 466.17 552.02 R
8 X
V
0.5 H
0 X
N
251.33 532.02 314.33 550.02 R
10 X
V
0 X
N
478 534.02 550 552.02 R
9 X
V
0 X
N
386 498.02 467 498.02 2 L
3 H
4 X
N
385 480.02 548.34 480.02 2 L
N
78.09 379.1 123.09 388.1 R
10 X
V
0.5 H
0 X
N
78.09 361.1 123.09 370.1 R
9 X
V
0 X
N
78.09 343.1 123.09 352.1 R
8 X
V
0 X
N
1 9 Q
(Interface identical for all ORB implementations) 132.09 381.62 T
(There may be multiple object adapters) 132.09 363.62 T
(There are stubs and a skeleton for each object type) 132.09 345.62 T
(ORB-dependent interface) 132.09 327.62 T
78.09 334.1 123.09 334.1 2 L
3 H
4 X
N
0 X
(Object Implementation) 375.55 618.37 T
(IDL) 419.2 517.73 T
(Skeleton) 407.71 507.73 T
(Object) 501.52 516.73 T
(Adapter) 498.52 506.73 T
(ORB) 274.57 515.73 T
(Interface) 265.83 505.73 T
(ORB Core) 263.34 441.73 T
253 479.68 311.67 479.68 2 L
4 X
N
458.86 590.85 462.99 604 466.45 590.66 462.65 590.76 4 Y
0 X
V
0.5 H
270 355 88 152 375 604 A
(Request) 410.27 454.71 T
82 416.01 550 416.01 550 479.01 550 479.01 550 479.01 550 479.01 550 551.01
 478 551.01 477 495.99 466 495.99 466 551.01 385 551.01 384 479.01 315 479.01 315 550.99
 252 550.99 252 479.99 195 479.99 195 551.01 152 551.01 152 479.01 137 479.99 137 551.99
 82 551.99 24 Y
N
0 0 612 792 C
52 263 54 289 R
0 X
0 K
V
FMENDPAGE
%%EndPage: "31" 30
%%Page: "30" 30
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(The Common Object Request Broker Architecture) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(30) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
2 12 Q
0 X
(Language \050IDL\051. This language de\336nes the types of objects according to the operations) 108 678.02 T
-0.39 (that may be performed on them and the parameters to those operations. Alternatively) 108 664.02 P
-0.39 (, or in) 509.86 664.02 P
-0.43 (addition, interfaces can be added to an Interface Repository service; this service represents) 108 650.02 P
-0.21 (the components of an interface as objects, permitting runtime access to these components.) 108 636.02 P
(In any ORB implementation, the Interface De\336nition Language \050which may be extended) 108 622.02 T
(beyond its de\336nition in this document\051 and the Interface Repository have equivalent) 108 608.02 T
(expressive power) 108 594.02 T
(.) 190.93 594.02 T
54 562.98 540 576.02 C
108 570.04 540 570.04 2 L
0.25 H
2 Z
0 X
0 K
N
54 570.04 99 570.04 2 L
0 Z
N
0 0 612 792 C
54 539.02 540 552.98 C
54 544.99 540 544.99 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
(FIG.  4) 54 556.32 T
0 F
(A Client using the Stub or Dynamic Invocation Interface) 108 556.32 T
2 12 Q
(The client performs a request by having access to an Object Reference for an object and) 108 185 T
(knowing the type of the object and the desired operation to be performed. The client ini-) 108 171 T
(tiates the request by calling stub routines that are speci\336c to the object or by constructing) 108 157 T
(the request dynamically \050see FIG. 4 on page 30\051.) 108 143 T
-0.1 (The dynamic and stub interface for invoking a request satisfy the same request semantics,) 108 117 P
(and the receiver of the message cannot tell how the request was invoked.) 108 103 T
54 205 540 539.02 C
54 205 540 539.02 R
7 X
0 K
V
64.45 465.69 241.45 519.69 18 RR
V
4 H
2 Z
4 X
N
134.79 411.69 175.79 429.69 R
8 X
V
0.5 H
0 X
N
136.45 357.69 175.45 357.69 2 L
3 H
4 X
N
61.55 258.78 106.55 267.78 R
10 X
V
0.5 H
0 X
N
61.55 241.78 106.55 250.78 R
8 X
V
0 X
N
1 9 Q
(Interface identical for all ORB implementations) 115.55 261.29 T
(There are stubs and a skeleton for each object type) 115.55 244.29 T
(ORB-dependent interface) 115.55 226.29 T
61.55 232.78 106.55 232.78 2 L
3 H
4 X
N
0 X
(Client) 143.97 497.42 T
(Dynamic) 72.16 395.4 T
(Invocation) 68.42 385.4 T
(IDL) 150.99 395.4 T
(Stubs) 145.75 388.12 T
(Request) 162.45 313.4 T
(ORB Core) 277.8 321.4 T
64.45 412.69 118.45 430.69 R
10 X
V
0.5 H
0 X
N
65.45 358.67 119.45 358.67 2 L
3 H
4 X
N
200 327.46 213.45 322.68 199.51 319.61 199.76 323.54 4 Y
0 X
V
0.5 H
180 264 131 155 213.45 477.67 A
204.97 327.11 216.45 321.68 203.84 320.2 204.4 323.66 4 Y
V
180 261 77 159 216.45 480.67 A
64.45 294.68 532.45 294.68 532.45 357.68 532.45 357.68 532.45 357.68 532.45 357.68 532.45 429.68
 457.83 429.68 459.45 374.67 448.45 374.67 448.45 429.68 367.45 429.68 366.45 357.68 297.45 357.68 297.45 429.67
 234.45 429.67 234.45 358.67 177.45 358.67 177.45 429.68 134.45 429.68 134.45 358.67 119.45 358.67 119.45 430.67
 64.45 430.67 24 Y
N
0 0 612 792 C
34 590.02 36 672.02 R
0 X
0 K
V
34 139 36 165 R
V
FMENDPAGE
%%EndPage: "30" 29
%%Page: "29" 29
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(The Structure of an Object Request Broker) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(29) 546.89 60.29 T
72 87.98 558 686.02 R
7 X
V
72 672.98 558 686.02 C
126 680.04 558 680.04 2 L
0.25 H
2 Z
0 X
0 K
N
72 680.04 117 680.04 2 L
0 Z
N
0 0 612 792 C
72 649.02 558 662.98 C
72 654.99 558 654.99 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
(FIG.  3) 72 666.32 T
0 F
(The Structure of Object Request Broker Interfaces) 126 666.32 T
2 12 Q
-0.36 (FIG. 3 on page 29 shows the structure of an individual Object Request Broker \050ORB\051. The) 126 295 P
(interfaces to the ORB are shown by striped boxes, and the arrows indicate whether the) 126 281 T
(ORB is called or performs an up-call across the interface.) 126 267 T
(T) 126 241 T
(o make a request, the Client can use the Dynamic Invocation interface \050the same inter-) 132.49 241 T
(face independent of the interface of the tar) 126 227 T
(get object\051 or an IDL stub \050the speci\336c stub) 329.26 227 T
(depending on the interface of the tar) 126 213 T
(get object\051. The Client can also directly interact with) 299.64 213 T
(the ORB for some functions.) 126 199 T
(The Object Implementation receives a request as an up-call through the IDL generated) 126 173 T
-0.23 (skeleton. The Object Implementation may call the Object Adapter and the ORB while pro-) 126 159 P
(cessing a request or at other times.) 126 145 T
(De\336nitions of the interfaces to objects can be de\336ned in two ways. Interfaces can be) 126 119 T
-0.17 (de\336ned statically in an interface de\336nition language, herein called the Interface De\336nition) 126 105 P
72 315 558 649.02 C
72 315 558 649.02 R
7 X
0 K
V
78.09 379.1 123.09 388.1 R
10 X
V
0.5 H
2 Z
0 X
N
78.09 361.1 123.09 370.1 R
9 X
V
0 X
N
78.09 343.1 123.09 352.1 R
8 X
V
0 X
N
1 9 Q
(Interface identical for all ORB implementations) 132.09 381.62 T
(There may be multiple object adapters) 132.09 363.62 T
(There are stubs and a skeleton for each object type) 132.09 345.62 T
(ORB-dependent interface) 132.09 327.62 T
78.09 334.1 123.09 334.1 2 L
3 H
4 X
N
435.71 348.09 429.09 325.02 422.48 348.09 429.09 348.09 4 Y
0 X
V
429.09 352.02 429.09 348.09 2 L
4 H
N
422.48 364.95 429.09 388.02 435.71 364.95 429.09 364.95 4 Y
V
429.09 364.95 429.09 361.02 2 L
N
(Up-call interface) 447.12 372.62 T
(Normal call interface) 447.09 336.62 T
303.66 577.5 539.33 631.5 18 RR
7 X
V
4 X
N
80 577.5 257 631.5 18 RR
7 X
V
4 X
N
149.5 523.5 191.33 541.5 R
8 X
V
0.5 H
0 X
N
382.17 523.5 463.17 541.5 R
8 X
V
0 X
N
249.33 523.5 312.33 541.5 R
10 X
V
0 X
N
475 523.5 547 541.5 R
9 X
V
0 X
N
179.95 564.57 173.33 541.5 166.72 564.57 173.33 564.57 4 Y
V
173.33 595.5 173.33 564.57 2 L
4 H
N
418.71 572.43 425.33 595.5 431.95 572.43 425.33 572.43 4 Y
V
425.33 572.43 425.33 541.5 2 L
N
316.47 564.35 302.99 544.49 303.9 568.47 310.18 566.41 4 Y
V
319.33 594.5 310.19 566.41 2 L
N
509.94 564.57 503.33 541.5 496.71 564.57 503.33 564.57 4 Y
V
503.33 595.5 503.33 564.57 2 L
N
152 469.5 191 469.5 2 L
3 H
4 X
N
383.83 487.5 462.5 487.5 2 L
N
385 469.5 547 469.5 2 L
N
0 X
(Client) 159.52 609.22 T
(Object Implementation) 374.55 609.86 T
(Dynamic) 87.71 507.21 T
(Invocation) 83.96 497.21 T
(IDL) 166.54 505.69 T
(Stubs) 161.29 495.62 T
(IDL) 416.2 507.21 T
(Skeleton) 404.71 497.21 T
(Object) 498.52 506.21 T
(Adapter) 495.52 496.21 T
(ORB) 272.57 507.21 T
(Interface) 263.83 497.21 T
(ORB Core) 262.34 433.21 T
510.39 572.43 517 595.5 523.61 572.43 517 572.43 4 Y
V
517 572.43 517 541.5 2 L
4 H
N
251 469.5 310.83 469.5 2 L
3 H
4 X
N
80 524.5 134 542.5 R
10 X
V
0.5 H
0 X
N
81 470.48 132.5 469.5 2 L
3 H
4 X
N
116.61 566.57 110 543.5 103.38 566.57 110 566.57 4 Y
0 X
V
110 594.48 110 566.57 2 L
4 H
N
256.51 568.23 259.99 544.49 244.46 562.78 250.49 565.51 4 Y
V
238 593.48 250.49 565.5 2 L
N
80 406.5 548 406.5 548 469.5 548 469.5 548 469.5 548 469.5 548 541.5
 475 541.5 475 486.48 464 486.48 464 541.5 383 541.5 382 469.5 313 469.5 313 541.48
 250 541.48 250 470.48 193 470.48 193 541.5 150 541.5 150 470.48 135 470.48 135 542.48
 80 542.48 24 Y
0.5 H
N
0 0 612 792 C
52 291 54 303 R
0 X
0 K
V
52 237 54 249 R
V
52 101 54 127 R
V
FMENDPAGE
%%EndPage: "29" 28
%%Page: "28" 28
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(The Common Object Request Broker Architecture) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(28) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
54 672.98 540 686.02 C
108 680.04 540 680.04 2 L
0.25 H
2 Z
0 X
0 K
N
54 680.04 99 680.04 2 L
0 Z
N
0 0 612 792 C
54 649.02 540 662.98 C
54 654.99 540 654.99 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
(FIG.  2) 54 666.32 T
0 F
(A Request Being Sent Through the Object Request Broker) 108 666.32 T
54 358.98 540 362 C
108 360.49 540 360.49 2 L
0.25 H
2 Z
0 X
0 K
N
54 360.49 99 360.49 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(3.1) 83.15 366.67 T
0 F
(The Structure of an Object Request Broker) 108 366.67 T
2 12 Q
-0.04 (FIG. 2 on page 28 shows a request being sent by a client to an object implementation.The) 108 340.98 P
-0.15 (Client is the entity that wishes to perform an operation on the object and the Object Imple-) 108 326.98 P
(mentation is the code and data that actually implements the object. The ORB is responsi-) 108 312.98 T
-0.21 (ble for all of the mechanisms required to \336nd the object implementation for the request, to) 108 298.98 P
(prepare the object implementation to receive the request, and to communicate the data) 108 284.98 T
(making up the request. The interface the client sees is completely independent of where) 108 270.98 T
-0.4 (the object is located, what programming language it is implemented in, or any other aspect) 108 256.98 P
(which is not re\337ected in the object\325) 108 242.98 T
(s interface.) 276.55 242.98 T
54 399 540 649.02 C
54 399 540 649.02 R
7 X
0 K
V
63 410 531 410 531 473 531 473 531 473 531 473 531 545
 459 545 458 489.99 447 489.99 447 545 366 545 365 473 296 473 296 544.99
 233 544.99 233 473.99 176 473.99 176 545 133 545 133 473 118 473.99 118 545.99
 63 545.99 24 Y
0.5 H
2 Z
0 X
N
286.66 581.01 522.33 635.01 18 RR
7 X
V
4 H
4 X
N
1 9 Q
0 X
(Object Implementation) 357.55 613.37 T
(Request) 326 457.73 T
(ORB) 272.34 434.73 T
71.5 582 248.5 636 18 RR
7 X
V
4 X
N
0 X
(Client) 151.02 613.72 T
404.93 591.6 409.02 604.01 412.13 591.32 408.53 591.46 4 Y
V
0.5 H
180 355 128.01 144.03 281.02 604.01 A
0 0 612 792 C
34 336.98 36 348.98 R
0 X
0 K
V
FMENDPAGE
%%EndPage: "28" 27
%%Page: "27" 27
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 378 558 378 2 L
7 X
V
2 Z
0 X
N
72 74.02 558 74.02 2 L
7 X
V
0.25 H
0 X
N
72 55.01 558 66.96 R
7 X
V
0 9 Q
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
-2.78 (27) 546.89 60.29 P
72 396 558 693 R
7 X
V
0 24 Q
0 X
-0.48 (3) 72 677 S
-0.48 (The Common Object Request) 126 677 S
-0.48 (Broker Architecture) 126 647 S
72 87.98 558 360 R
7 X
V
2 12 Q
0 X
(The Common Object Request Broker Architecture \050CORBA\051 is structured to allow inte-) 126 352 T
(gration of a wide variety of object systems. The motivation for some of the features may) 126 338 T
-0.19 (not be apparent at \336rst, but as we discuss the range of implementations, policies, optimiza-) 126 324 P
-0.31 (tions, and usages we expect to encompass, the value of the \337exibility should become more) 126 310 P
(clear) 126 296 T
(.) 148.64 296 T
52 306 54 318 R
V
FMENDPAGE
%%EndPage: "27" 26
%%Page: "26" 26
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(The Object Model) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(26) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
FMENDPAGE
%%EndPage: "26" 25
%%Page: "25" 25
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(Object Implementation) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(25) 546.89 60.29 T
72 87.98 558 686.02 R
7 X
V
2 12 Q
0 X
(Code that is executed to perform a service is called a) 126 678.02 T
4 F
(method) 382.13 678.02 T
2 F
(. A method is an immutable) 417.44 678.02 T
-0.33 (description of a computation that can be interpreted by an execution engine. A method has) 126 664.02 P
(an immutable attribute called a) 126 650.02 T
4 F
(method format) 277.56 650.02 T
2 F
( that de\336nes the set of execution engines) 347.85 650.02 T
-0.07 (that can interpret the method. An) 126 636.02 P
4 F
-0.07 (execution engine) 287.15 636.02 P
2 F
-0.07 ( is an abstract machine \050not a program\051) 368.02 636.02 P
(that can interpret methods of certain formats, causing the described computations to be) 126 622.02 T
-0.12 (performed. An execution engine de\336nes a dynamic context for the execution of a method.) 126 608.02 P
(The execution of a method is called a) 126 594.02 T
4 F
(method activation) 308.53 594.02 T
2 F
(.) 394.81 594.02 T
(When a client issues a request, a method of the tar) 126 568.02 T
(get object is called. The input parame-) 366.6 568.02 T
-0.27 (ters passed by the requestor are passed to the method and the output parameters and return) 126 554.02 P
(value \050or exception and its parameters\051 are passed back to the requestor) 126 540.02 T
(.) 468.05 540.02 T
(Performing a requested service causes a method to execute that may operate upon an) 126 514.02 T
-0.45 (object\325) 126 500.02 P
-0.45 (s persistent state. If the persistent form of the method or state is not accessible to the) 158.65 500.02 P
(execution engine, it may be necessary to \336rst copy the method or state into an execution) 126 486.02 T
(context. This process is called) 126 472.02 T
4 F
(activation) 273.23 472.02 T
2 F
(; the reverse process is called) 321.2 472.02 T
4 F
(deactivation) 464.42 472.02 T
2 F
(.) 523.71 472.02 T
1 F
(2.3.2) 93.93 440.02 T
0 F
(The Construction Model) 126 440.02 T
2 F
(A computational object system must provide mechanisms for realizing behavior of) 126 414.02 T
-0.5 (requests. These mechanisms include de\336nitions of object state, de\336nitions of methods, and) 126 400.02 P
-0.36 (de\336nitions of how the object infrastructure is to select the methods to execute and to select) 126 386.02 P
(the relevant portions of object state to be made accessible to the methods. Mechanisms) 126 372.02 T
(must also be provided to describe the concrete actions associated with object creation,) 126 358.02 T
(such as association of the new object with appropriate methods.) 126 344.02 T
-0.22 (An) 126 318.02 P
4 F
-0.22 (object implementation) 143.44 318.02 P
2 F
-0.22 (\321or) 250.15 318.02 P
4 F
-0.22 (implementation) 274.92 318.02 P
2 F
-0.22 (, for short\321is a de\336nition that provides the) 349.54 318.02 P
(information needed to create an object and to allow the object to participate in providing) 126 304.02 T
(an appropriate set of services. An implementation typically includes, among other things,) 126 290.02 T
(de\336nitions of the methods that operate upon the state of an object. It also typically) 126 276.02 T
(includes information about the intended type of the object.) 126 262.02 T
52 536.02 54 548.02 R
V
52 368.02 54 380.02 R
V
52 272.02 54 284.02 R
V
FMENDPAGE
%%EndPage: "25" 24
%%Page: "24" 24
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(The Object Model) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(24) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
2 12 Q
0 X
(\245) 108 678.02 T
(at-most-once: if an operation request returns successfully) 126 678.02 T
(, it was performed exactly) 399.68 678.02 T
(once; if it returns an exception indication, it was performed at-most-once;) 126 664.02 T
(\245) 108 647.02 T
(best-ef) 126 647.02 T
(fort: a best-ef) 158.42 647.02 T
(fort operation is a request-only operation, i.e. it cannot return any) 222.81 647.02 T
-0.28 (results and the requester never synchronizes with the completion, if any) 126 633.02 P
-0.28 (, of the request.) 466.55 633.02 P
(The execution semantics to be expected is associated with an operation. This prevents a) 108 607.02 T
(client and object implementation from assuming dif) 108 593.02 T
(ferent execution semantics.) 356.3 593.02 T
(Note that a client is able to invoke an at-most-once operation in a synchronous or) 108 567.02 T
(deferred-synchronous manner) 108 553.02 T
(.) 250.88 553.02 T
1 F
(2.2.7) 75.93 521.02 T
0 F
(Attributes) 108 521.02 T
2 F
-0.2 (An interface may have attributes. An attribute is logically equivalent to declaring a pair of) 108 495.02 P
-0.09 (accessor functions: one to retrieve the value of the attribute and one to set the value of the) 108 481.02 P
(attribute.) 108 467.02 T
(An attribute may be read-only) 108 441.02 T
(, in which case only the retrieval accessor function is) 251.78 441.02 T
(de\336ned.) 108 427.02 T
54 380.99 540 384.02 C
108 382.5 540 382.5 2 L
0.25 H
2 Z
0 X
0 K
N
54 382.5 99 382.5 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(2.3) 83.15 388.68 T
0 F
(Object Implementation) 108 388.68 T
2 12 Q
(This section de\336nes the concepts associated with object implementation, i.e. the concepts) 108 358.99 T
(relevant to realizing the behavior of objects in a computational system.) 108 344.99 T
-0.16 (The implementation of an object system carries out the computational activities needed to) 108 318.99 P
(ef) 108 304.99 T
(fect the behavior of requested services. These activities may include computing the) 117.1 304.99 T
-0.18 (result of the request and updating the system state. In the process, additional requests may) 108 290.99 P
(be issued.) 108 276.99 T
-0.47 (The implementation model consists of two parts: the execution model and the construction) 108 250.99 P
(model. The execution model describes how services are performed. The construction) 108 236.99 T
(model describes how services are de\336ned.) 108 222.99 T
1 F
(2.3.1) 75.93 190.99 T
0 F
(The Execution Model: Performing Services) 108 190.99 T
2 F
(A requested service is performed in a computational system by executing code that oper-) 108 164.99 T
(ates upon some data. The data represents a component of the state of the computational) 108 150.99 T
(system. The code performs the requested service, which may change the state of the sys-) 108 136.99 T
(tem.) 108 122.99 T
34 437.02 36 449.02 R
V
FMENDPAGE
%%EndPage: "24" 23
%%Page: "23" 23
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(Object Semantics) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(23) 546.89 60.29 T
72 87.98 558 686.02 R
7 X
V
2 12 Q
0 X
(where:) 126 678.02 T
(\245) 126 659.02 T
(the optional) 144 659.02 T
3 F
(oneway) 203.97 659.02 T
2 F
( keyword indicates that best-ef) 240.04 659.02 T
(fort semantics are expected of) 387.05 659.02 T
(requests for this operation; the default semantics are exactly-once if the operation suc-) 144 645.02 T
(cessfully returns results or at-most-once if an exception is returned) 144 631.02 T
(\245) 126 614.02 T
(the) 144 614.02 T
3 F
(<op_type_spec>) 161.65 614.02 T
2 F
( is the type of the return result) 238.74 614.02 T
(\245) 126 597.02 T
(the) 144 597.02 T
3 F
(<identi\336er>) 161.65 597.02 T
2 F
( provides a name for the operation in the interface.) 214.68 597.02 T
(\245) 126 580.02 T
-0.05 (the operation parameters needed for the operation; they are \337agged with the modi\336ers) 144 580.02 P
3 F
-0.4 (in) 144 566.02 P
2 F
-0.43 (,) 152.74 566.02 P
3 F
-0.4 ( out) 155.74 566.02 P
2 F
-0.43 (, or) 173.37 566.02 P
3 F
-0.4 (inout) 191.49 566.02 P
2 F
-0.43 ( to indicate the direction in which the information \337ows \050with respect to) 215.53 566.02 P
(the object performing the request\051) 144 552.02 T
(\245) 126 535.02 T
(the optional) 144 535.02 T
3 F
(raises) 203.97 535.02 T
2 F
( expression indicates which user) 232.4 535.02 T
(-de\336ned exceptions can be sig-) 387.38 535.02 T
(nalled to terminate a request for this operation; if such an expression is not provided,) 144 521.02 T
(no user) 144 507.02 T
(-de\336ned exceptions will be signalled) 178.73 507.02 T
(\245) 126 490.02 T
(the optional) 144 490.02 T
3 F
(context) 203.97 490.02 T
2 F
( expression indicates which request context information will be) 238.94 490.02 T
(available to the object implementation; no other contextual information is required to) 144 476.02 T
(be transported with the request) 144 462.02 T
1 11 Q
(2.2.6.1) 87 436.68 T
0 F
(Parameters) 126 436.68 T
2 12 Q
(A parameter is characterized by its mode and its type. The) 126 420.02 T
4 F
(mode) 408.45 420.02 T
2 F
( indicates whether the) 434.42 420.02 T
(value should be passed from client to server \050) 126 406.02 T
3 F
(in) 343.84 406.02 T
2 F
(\051, from server to client \050) 352.58 406.02 T
3 F
(out) 467.15 406.02 T
2 F
(\051, or both) 482.44 406.02 T
(\050) 126 392.02 T
3 F
(inout) 129.99 392.02 T
2 F
(\051. The parameter) 154.03 392.02 T
(\325) 234.06 392.02 T
(s type constrains the possible value which may be passed in the) 237.4 392.02 T
(direction[s] dictated by the mode.) 126 378.02 T
1 11 Q
(2.2.6.2) 87 352.68 T
0 F
(Return Result) 126 352.68 T
2 12 Q
(The return result is a distinguished) 126 336.02 T
3 F
(out) 295.23 336.02 T
2 F
( parameter) 310.52 336.02 T
(.) 360.81 336.02 T
1 11 Q
(2.2.6.3) 87 310.68 T
0 F
(Exceptions) 126 310.68 T
2 12 Q
-0.47 (An) 126 294.02 P
4 F
-0.47 (exception) 143.18 294.02 P
2 F
-0.47 ( is an indication that an operation request was not performed successfully) 189.14 294.02 P
-0.47 (. An) 535.29 294.02 P
(exception may be accompanied by additional, exception-speci\336c information.) 126 280.02 T
-0.49 (The additional, exception-speci\336c information is a specialized form of record. As a record,) 126 254.02 P
(it may consist of any of the types described in \2442.2.4 on page 20.) 126 240.02 T
(All signatures implicitly include the standard exceptions described in \2444.13 on page 79.) 126 214.02 T
1 11 Q
(2.2.6.4) 87 188.68 T
0 F
(Contexts) 126 188.68 T
2 12 Q
(A) 126 172.02 T
4 F
(r) 137.66 172.02 T
(equest context) 141.88 172.02 T
2 F
( provides additional, operation-speci\336c information that may af) 210.16 172.02 T
(fect the) 513.73 172.02 T
(performance of a request.) 126 158.02 T
1 11 Q
(2.2.6.5) 87 132.68 T
0 F
(Execution Semantics) 126 132.68 T
2 12 Q
(T) 126 116.02 T
(wo styles of execution semantics are de\336ned by the object model:) 132.49 116.02 T
52 593.02 54 605.02 R
V
52 531.02 54 543.02 R
V
52 503.02 54 515.02 R
V
52 210.02 54 248.02 R
V
FMENDPAGE
%%EndPage: "23" 22
%%Page: "22" 22
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(The Object Model) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(22) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
1 12 Q
0 X
(2.2.5) 75.93 678.02 T
0 F
(Interfaces) 108 678.02 T
2 F
-0.02 (An) 108 652.02 P
4 F
-0.02 (interface) 125.63 652.02 P
2 F
-0.02 ( is a description of a set of possible operations that a client may request of an) 168.27 652.02 P
(object. An object) 108 638.02 T
4 F
(satis\336es) 193.27 638.02 T
2 F
( an interface if it can be speci\336ed as the tar) 231.26 638.02 T
(get object in each) 436.2 638.02 T
(potential request described by the interface.) 108 624.02 T
-0.17 (An) 108 598.02 P
4 F
-0.17 (interface type) 125.48 598.02 P
2 F
-0.17 ( is a type that is satis\336ed by any object \050literally) 190.92 598.02 P
-0.17 (, any value that identi\336es) 417.61 598.02 P
(an object\051 that satis\336es a particular interface.) 108 584.02 T
-0.33 (Interfaces are speci\336ed in IDL. Interface inheritance provides the composition mechanism) 108 558.02 P
(for permitting an object to support multiple interfaces. The) 108 544.02 T
4 F
(principal interface) 393.14 544.02 T
2 F
( is simply) 482.76 544.02 T
(the most-speci\336c interface that the object supports, and consists of all operations in the) 108 530.02 T
(transitive closure of the interface inheritance graph.) 108 516.02 T
1 F
(2.2.6) 75.93 484.02 T
0 F
(Operations) 108 484.02 T
2 F
(An) 108 458.02 T
4 F
(operation) 125.65 458.02 T
2 F
( is an identi\336able entity that denotes a service that can be requested.) 172.3 458.02 T
(An operation is identi\336ed by an) 108 434.02 T
4 F
(operation identi\336er) 262.57 434.02 T
2 F
(. An operation is not a value.) 354.86 434.02 T
-0.41 (An operation has a signature that describes the legitimate values of request parameters and) 108 408.02 P
(returned results. In particular) 108 394.02 T
(, a) 246.74 394.02 T
4 F
(signatur) 261.06 394.02 T
(e) 300.6 394.02 T
2 F
( consists of:) 305.93 394.02 T
(\245) 108 374.02 T
(a speci\336cation of the parameters required in requests for that operation) 126 374.02 T
(\245) 108 357.02 T
(a speci\336cation of the result of the operation) 126 357.02 T
(\245) 108 340.02 T
(a speci\336cation of the exceptions that may be raised by a request for the operation and) 126 340.02 T
(the types of the parameters accompanying them) 126 326.02 T
(\245) 108 309.02 T
(a speci\336cation of additional contextual information that may af) 126 309.02 T
(fect the request) 428.25 309.02 T
(\245) 108 292.02 T
-0.36 (an indication of the execution semantics the client should expect from a request for the) 126 292.02 P
(operation) 126 278.02 T
(Operations are \050potentially\051) 108 252.02 T
4 F
(generic) 243.56 252.02 T
2 F
(, meaning that a single operation can be uniformly) 279.53 252.02 T
(requested on objects with dif) 108 238.02 T
(ferent implementations, possibly resulting in observably dif-) 246.36 238.02 T
(ferent behavior) 108 224.02 T
(. Genericity is achieved in this model via interface inheritance in IDL and) 180.27 224.02 T
(the total decoupling of implementation from interface speci\336cation.) 108 210.02 T
(The general form for an operation signature is:) 108 184.02 T
3 10 Q
([oneway] <op_type_spec> <identi\336er> \050param1, ..., paramL\051) 108 159.35 T
( [raises\050except1,...,exceptN\051] [context\050name1, ..., nameM\051]) 126 147.35 T
34 353.02 36 365.02 R
V
34 234.02 36 246.02 R
V
34 144.02 36 218.02 R
V
FMENDPAGE
%%EndPage: "22" 21
%%Page: "21" 21
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(Object Semantics) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(21) 546.89 60.29 T
72 87.98 558 686.02 R
7 X
V
2 12 Q
0 X
(\245) 126 678.02 T
(characters, as de\336ned in ISO Latin-1 \0508859.1\051) 144 678.02 T
(\245) 126 661.02 T
(a boolean type taking the values TRUE and F) 144 661.02 T
(ALSE) 361.63 661.02 T
(\245) 126 644.02 T
(an 8-bit opaque datatype, guaranteed to) 144 644.02 T
4 F
(not) 336.18 644.02 T
2 F
( under) 351.51 644.02 T
(go any conversion during transfer) 381.6 644.02 T
(between systems) 144 630.02 T
(\245) 126 613.02 T
(enumerated types consisting of ordered sequences of identi\336ers) 144 613.02 T
(\245) 126 596.02 T
(a string type which consists of a variable-length array of characters; the length of the) 144 596.02 T
(string is available at runtime) 144 582.02 T
(\245) 126 565.02 T
(a type \322any\323 which can represent any possible basic or constructed type) 144 565.02 T
(Constructed types:) 126 541.02 T
(\245) 126 522.02 T
(a record type \050called struct\051, consisting of an ordered set of \050name,value\051 pairs) 144 522.02 T
(\245) 126 505.02 T
(a discriminated union type, consisting of a discriminator followed by an instance of a) 144 505.02 T
(type appropriate to the discriminator value) 144 491.02 T
(\245) 126 474.02 T
-0.4 (a sequence type which consists of a variable-length array of a single type; the length of) 144 474.02 P
(the sequence is available at runtime) 144 460.02 T
(\245) 126 443.02 T
(an array type which consists of a \336xed-length array of a single type) 144 443.02 T
(\245) 126 426.02 T
(an interface type, which speci\336es the set of operations which an instance of that type) 144 426.02 T
(must support) 144 412.02 T
-0.47 (V) 126 386.02 P
-0.47 (alues in a request are constrained to values which satisfy these type constraints. The legal) 133.33 386.02 P
(values are shown in FIG. 1 on page 21. No particular representation for values is de\336ned.) 126 372.02 T
72 340.98 558 354.02 C
126 348.04 558 348.04 2 L
0.25 H
2 Z
0 X
0 K
N
72 348.04 117 348.04 2 L
0 Z
N
0 0 612 792 C
72 317.02 558 330.98 C
72 322.99 558 322.99 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
(FIG.  1) 72 334.32 T
0 F
(Legal V) 126 334.32 T
(alues) 159.15 334.32 T
72 87.98 558 686.02 C
126 118 558 317.02 C
126 118 558 317.02 R
7 X
0 K
V
1 9 Q
0 X
(V) 321.69 301.46 T
(alue) 327.19 301.46 T
333 290.02 171 272.02 2 L
0.5 H
2 Z
N
333 290.02 405 272.02 2 L
N
(Object Reference) 151.54 256.46 T
(Constructed V) 396 256.46 T
(alue) 456.93 256.46 T
(Short) 144 120.98 T
(Long) 172.5 120.98 T
(UShort) 200.51 120.98 T
(Ulong) 241.01 120.98 T
(Float) 275.47 120.98 T
(Double) 302.47 120.98 T
(Char) 337.96 121.46 T
(String) 365.47 120.98 T
(Boolean) 401.47 120.98 T
(Octet) 446.47 120.98 T
(Enum) 482.47 120.98 T
264.43 200.02 156.43 137.02 2 L
N
264.43 200.02 183.43 137.02 2 L
N
264.43 200.02 489.43 137.02 2 L
N
264.43 200.02 453.43 137.02 2 L
N
264.43 200.02 417.43 137.02 2 L
N
264.43 200.02 381.43 137.02 2 L
N
264.43 200.02 345.43 137.02 2 L
N
264.43 200.02 309.43 137.02 2 L
N
264.43 200.02 282.43 137.02 2 L
N
264.43 200.02 255.43 137.02 2 L
N
264.43 200.02 219.43 137.02 2 L
N
(Basic V) 225 211.46 T
(alue) 256.98 211.46 T
333 290.02 270 227.02 2 L
N
(Struct) 351 210.98 T
(Sequence) 396 210.98 T
(Union) 450 210.98 T
(Array) 486 210.98 T
432 245.02 360 227.02 2 L
N
432 245.02 423 227.02 2 L
N
432 245.02 459 227.02 2 L
N
432 245.02 495 227.02 2 L
N
265 199 521.5 135.5 2 L
N
(Any) 515.52 120.98 T
72 87.98 558 686.02 C
0 0 612 792 C
52 674.02 54 686.02 R
0 X
0 K
V
52 609.02 54 621.02 R
V
52 561.02 54 590.02 R
V
52 518.02 54 530.02 R
V
52 368.02 54 380.02 R
V
FMENDPAGE
%%EndPage: "21" 20
%%Page: "20" 20
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(The Object Model) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(20) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
2 12 Q
0 X
-0.32 (The request parameters are identi\336ed by position. A parameter may be an input parameter) 108 678.02 P
-0.32 (,) 534.33 678.02 P
(an output parameter) 108 664.02 T
(, or an input-output parameter) 203.44 664.02 T
(. A request may also return a single) 346.35 664.02 T
4 F
(r) 108 650.02 T
(esult value) 112.22 650.02 T
2 F
(, as well as any output parameters.) 163.85 650.02 T
(The following semantics hold for all requests:) 108 624.02 T
(\245) 108 604.02 T
(any aliasing of parameter values is neither guaranteed removed nor guaranteed pre-) 126 604.02 T
(served) 126 590.02 T
(\245) 108 573.02 T
(the order in which aliased output parameters are written is not guaranteed) 126 573.02 T
(\245) 108 556.02 T
(any output parameters are unde\336ned if an exception is returned) 126 556.02 T
(\245) 108 539.02 T
-0.12 (the values which may be returned in an input-output parameter may be constrained by) 126 539.02 P
(the value which was input) 126 525.02 T
(Descriptions of the permitted values in requests and the permitted exceptions may be) 108 499.02 T
(found in \2442.2.4 on page 20, and \2442.2.6.3 on page 23.) 108 485.02 T
1 F
(2.2.3) 75.93 453.02 T
0 F
(Object Creation and Destruction) 108 453.02 T
2 F
(Objects can be created and destroyed. From a client\325) 108 427.02 T
(s point of view) 359.47 427.02 T
(, there is no special) 430.31 427.02 T
(mechanism for creating or destroying an object. Objects are created and destroyed as an) 108 413.02 T
-0.29 (outcome of issuing requests. The outcome of object creation is revealed to the client in the) 108 399.02 P
(form of an object reference that denotes the new object.) 108 385.02 T
1 F
(2.2.4) 75.93 353.02 T
0 F
(T) 108 353.02 T
(ypes) 114.67 353.02 T
2 F
-0.07 (A) 108 327.02 P
4 F
-0.07 (type) 119.59 327.02 P
2 F
-0.07 ( is an identi\336able entity with an associated predicate \050a single-ar) 139.57 327.02 P
-0.07 (gument mathemati-) 446.46 327.02 P
-0.08 (cal function with a boolean result\051 de\336ned over values. A value) 108 313.02 P
4 F
-0.08 (satis\336es) 414.18 313.02 P
2 F
-0.08 ( a type if the pred-) 452.16 313.02 P
(icate is true for that value. A value that satis\336es a type is called a) 108 299.02 T
4 F
(member of the type) 421.77 299.02 T
2 F
(.) 513.36 299.02 T
(T) 108 273.02 T
(ypes are used in signatures to restrict a possible parameter or to characterize a possible) 114.49 273.02 T
(result.) 108 259.02 T
(The) 108 233.02 T
4 F
(extension of a type) 129.65 233.02 T
2 F
( is the set of values that satisfy the type at any particular time.) 219.25 233.02 T
-0.31 (An) 108 207.02 P
4 F
-0.31 (object type) 125.35 207.02 P
2 F
-0.31 ( is a type whose members are objects \050literally) 177.34 207.02 P
-0.31 (, values that identify objects\051.) 396.62 207.02 P
(In other words, an object type is satis\336ed only by \050values that identify\051 objects.) 108 193.02 T
(Data types in this model are constrained as follows:) 108 167.02 T
(Basic types:) 108 141.02 T
(\245) 108 121.02 T
(16-bit and 32-bit signed and unsigned 2\325) 126 121.02 T
(s complement integers) 319.89 121.02 T
(\245) 108 104.02 T
(32-bit and 64-bit IEEE \337oating point numbers) 126 104.02 T
34 646.02 36 658.02 R
V
34 481.02 36 493.02 R
V
34 349.02 36 435.02 R
V
34 229.02 36 241.02 R
V
FMENDPAGE
%%EndPage: "20" 19
%%Page: "19" 19
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(Object Semantics) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(19) 546.89 60.29 T
72 87.98 558 686.02 R
7 X
V
2 12 Q
0 X
(This section de\336nes the concepts associated with object semantics, i.e. the concepts rele-) 126 678.02 T
(vant to clients.) 126 664.02 T
1 F
(2.2.1) 93.93 632.02 T
0 F
(Objects) 126 632.02 T
2 F
-0.11 (An object system includes entities known as objects. An) 126 606.02 P
4 F
-0.11 (object) 398.2 606.02 P
2 F
-0.11 ( is an identi\336able, encapsu-) 427.52 606.02 P
(lated entity that provides one or more services that can be requested by a client.) 126 592.02 T
1 F
(2.2.2) 93.93 560.02 T
0 F
(Requests) 126 560.02 T
2 F
(Clients request services by issuing requests. A) 126 534.02 T
4 F
(r) 351.19 534.02 T
(equest) 355.41 534.02 T
2 F
( is an event, i.e. something that) 386.05 534.02 T
-0.09 (occurs at a particular time. The information associated with a request consists of an opera-) 126 520.02 P
(tion, a tar) 126 506.02 T
(get object, zero or more \050actual\051 parameters, and an optional request context.) 171.42 506.02 T
(A) 126 480.02 T
4 F
(r) 137.66 480.02 T
(equest form) 141.88 480.02 T
2 F
( is a description or pattern that can be evaluated or performed multiple) 198.18 480.02 T
-0.44 (times to cause the issuing of requests. As described in Chapter 4, request forms are de\336ned) 126 466.02 P
(by particular language bindings. An alternative request form consists of calls to the) 126 452.02 T
(dynamic invocation interface to create an invocation structure, add ar) 126 438.02 T
(guments to the invo-) 458.18 438.02 T
(cation structure, and to issue the invocation.) 126 424.02 T
2 10 Q
(2) 337.19 428.82 T
2 12 Q
(A) 126 398.02 T
4 F
(value) 137.66 398.02 T
2 F
( is anything that may be a legitimate \050actual\051 parameter in a request. A value may) 163.63 398.02 T
(identify an object, for the purpose of performing the request. A value that identi\336es an) 126 384.02 T
(object is called an) 126 370.02 T
4 F
(object name) 215.27 370.02 T
2 F
(. More particularly) 273.55 370.02 T
(, a value is an instance of an IDL \050Inter-) 363.04 370.02 T
(face De\336nition Language, de\336ned in Chapter 4\051 datatype.) 126 356.02 T
-0.48 (An) 126 330.02 P
4 F
-0.48 (object) 143.18 330.02 P
-0.48 (r) 175.01 330.02 P
-0.48 (efer) 179.23 330.02 P
-0.48 (ence) 197.44 330.02 P
2 F
-0.48 (is an object name that reliably denotes a particular object. Speci\336cally) 221.93 330.02 P
-0.48 (,) 552.48 330.02 P
(an object reference will identify the same object each time the reference is used in a) 126 316.02 T
(request \050subject to certain pragmatic limits of space and time\051. An object may be denoted) 126 302.02 T
(by multiple, distinct object references.) 126 288.02 T
(A request may have parameters that are used to pass data to the tar) 126 262.02 T
(get object; it may also) 445.19 262.02 T
(have a request context which provides additional information about the request.) 126 248.02 T
(A request causes a service to be performed on behalf of the client. One outcome of per-) 126 222.02 T
(forming a service is returning to the client the results, if any) 126 208.02 T
(, de\336ned for the request.) 412.36 208.02 T
(If an abnormal condition occurs during the performance of a request, an exception is) 126 182.02 T
(returned. The exception may carry additional return parameters particular to that excep-) 126 168.02 T
(tion.) 126 154.02 T
72 112.98 558 143.01 C
126 116.01 270 116.01 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
2 10 Q
0 X
0 K
(2.) 126 106.32 T
-0.01 (Descriptions of these request forms may be found in Chapter 5 for the C-language binding for IDL and) 144 106.32 P
(Chapter 6 for the dynamic invocation interface.) 144 95.32 T
52 448.02 54 474.02 R
V
52 284.02 54 378.02 R
V
52 244.02 54 256.02 R
V
52 204.02 54 216.02 R
V
FMENDPAGE
%%EndPage: "19" 18
%%Page: "18" 18
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(The Object Model) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(18) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
2 12 Q
0 X
(\245) 108 678.02 T
-0.27 (it may) 126 678.02 P
4 F
-0.27 (elaborate) 158.78 678.02 P
2 F
-0.27 ( the abstract object model by making it more speci\336c, for example, by) 204.75 678.02 P
(de\336ning the form of request parameters or the language used to specify types) 126 664.02 T
(\245) 108 647.02 T
(it may) 126 647.02 T
4 F
(populate) 159.32 647.02 T
2 F
( the model by introducing speci\336c instances of entities de\336ned by the) 201.29 647.02 T
(model, for example, speci\336c objects, speci\336c operations, or speci\336c types) 126 633.02 T
(\245) 108 616.02 T
(it may) 126 616.02 T
4 F
(r) 159.32 616.02 T
(estrict) 163.54 616.02 T
2 F
( the model by eliminating entities or placing additional restrictions on) 193.52 616.02 T
(their use) 126 602.02 T
-0.05 (An object system is a collection of objects that isolates the requestors of services \050clients\051) 108 576.02 P
(from the providers of services by a well-de\336ned encapsulating interface. In particular) 108 562.02 T
(, cli-) 516.52 562.02 T
(ents are isolated from the implementations of services as data representations and execut-) 108 548.02 T
(able code.) 108 534.02 T
(The object model \336rst describes concepts that are meaningful to clients, including such) 108 508.02 T
(concepts as object creation and identity) 108 494.02 T
(, requests and operations, types and signatures. It) 296.08 494.02 T
(then describes concepts related to object implementations, including such concepts as) 108 480.02 T
(methods, execution engines, and activation.) 108 466.02 T
(The object model is most speci\336c and prescriptive in de\336ning concepts meaningful to cli-) 108 440.02 T
-0.21 (ents. The discussion of object implementation is more suggestive, with the intent of allow-) 108 426.02 P
(ing maximal freedom for dif) 108 412.02 T
(ferent object technologies to provide dif) 244.35 412.02 T
(ferent ways of) 436.33 412.02 T
(implementing objects. See Chapter 9 for more information on implementation rules for) 108 398.02 T
(objects which are managed by the Basic Object Adapter) 108 384.02 T
(.) 376.46 384.02 T
(There are some other characteristics of object systems that are outside the scope of the) 108 358.02 T
(object model. Some of these concepts are aspects of application architecture, some are) 108 344.02 T
-0.23 (associated with speci\336c domains to which object technology is applied. Such concepts are) 108 330.02 P
(more properly dealt with in an architectural reference model. Examples of excluded con-) 108 316.02 T
(cepts are compound objects, links, copying of objects, change management, and transac-) 108 302.02 T
(tions. Also outside the scope of the object model is the model of control and execution.) 108 288.02 T
(This object model is an example of a) 108 262.02 T
4 F
(classical object model) 287.88 262.02 T
2 F
(, where a client sends a mes-) 394.48 262.02 T
-0.35 (sage to an object. Conceptually) 108 248.02 P
-0.35 (, the object interprets the message to decide what service to) 256.05 248.02 P
(perform. In the classical model, a message identi\336es an object and zero or more actual) 108 234.02 T
-0.23 (parameters. As in most classical object models, a distinguished \336rst parameter is required,) 108 220.02 P
(which identi\336es the operation to be performed; the interpretation of the message by the) 108 206.02 T
(object involves selecting a method based on the speci\336ed operation. Operationally) 108 192.02 T
(, of) 501.95 192.02 T
(course, method selection could be performed either by the object or the ORB.) 108 178.02 T
54 131.99 540 135.02 C
108 133.5 540 133.5 2 L
0.25 H
2 Z
0 X
0 K
N
54 133.5 99 133.5 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(2.2) 83.15 139.68 T
0 F
(Object Semantics) 108 139.68 T
2 12 Q
-0.22 (An object system provides services to clients. A) 108 109.99 P
4 F
-0.22 (client) 339.78 109.99 P
2 F
-0.22 ( of a service is any entity capable of) 366.43 109.99 P
(requesting the service.) 108 95.99 T
34 216.02 36 228.02 R
V
FMENDPAGE
%%EndPage: "18" 17
%%Page: "17" 17
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 378 558 378 2 L
7 X
V
2 Z
0 X
N
72 74.02 558 74.02 2 L
7 X
V
0.25 H
0 X
N
72 55.01 558 66.96 R
7 X
V
0 9 Q
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
-2.78 (17) 546.89 60.29 P
0 684 63 729 R
7 X
1 K
V
0.5 H
0 Z
N
72 396 558 693 R
0 K
V
0 24 Q
0 X
-0.48 (2) 72 677 S
-0.48 (The Object Model) 126 677 S
72 87.98 558 360 R
7 X
V
2 12 Q
0 X
(This chapter describes the concrete object model which underlies the Common ORB) 126 352 T
(Architecture. The model is derived from the abstract object model de\336ned by the Object) 126 338 T
(Management Group) 126 324 T
2 10 Q
(1) 222.26 328.8 T
2 12 Q
(.) 227.26 324 T
72 277.98 558 281 C
126 279.49 558 279.49 2 L
0.25 H
2 Z
0 X
0 K
N
72 279.49 117 279.49 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(2.1) 101.15 285.67 T
0 F
(Overview) 126 285.67 T
2 12 Q
(The object model provides an or) 126 255.98 T
(ganized presentation of object concepts and terminology) 281.34 255.98 T
(.) 551.69 255.98 T
(It de\336nes a partial model for computation that embodies the key characteristics of objects) 126 241.98 T
(as realized by the submitted technologies.) 126 227.98 T
-0.02 (The OMG object model is) 126 201.98 P
4 F
-0.02 (abstract) 254.8 201.98 P
2 F
-0.02 ( in that it is not directly realized by any particular tech-) 294.11 201.98 P
(nology) 126 187.98 T
(. The model described here is a) 158.54 187.98 T
4 F
(concr) 311.08 187.98 T
(ete) 337.95 187.98 T
2 F
( object model. A concrete object model) 351.93 187.98 T
(may dif) 126 173.98 T
(fer from the abstract object model in several ways:) 162.76 173.98 T
72 112.98 558 143.01 C
126 116.01 270 116.01 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
2 10 Q
0 X
0 K
(1.) 126 106.32 T
(Object Management Architecture Guide 1.0, Chapter 4, OMG TC Document 90.9.1, Object Manage-) 144 106.32 T
(ment Group, Inc., 492 Old Connecticut Path, Framingham, MA 01701, November 1990.) 144 95.32 T
FMENDPAGE
%%EndPage: "17" 16
%%Page: "16" 16
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(Overview) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(16) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
FMENDPAGE
%%EndPage: "16" 15
%%Page: "15" 15
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 730.15 558 742.18 R
7 X
V
0 9 Q
0 X
(T) 126 736.18 T
(ypographical Conventions) 131 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
(15) 546.89 60.29 T
72 87.98 558 686.02 R
7 X
V
2 12 Q
0 X
(Chapter 8: ORB Interface) 126 678.02 T
(The direct interface to the ORB.) 252 664.02 T
(Chapter 9: The Basic Object Adapter) 126 638.02 T
(The Basic Object Adapter interface.) 252 624.02 T
(Chapter 10: Interoperability) 126 598.02 T
(A discussion of interoperability between ORBs.) 252 584.02 T
(Chapter 1) 126 558.02 T
(1: Glossary) 172.52 558.02 T
(Glossary) 252 558.02 T
(.) 293.86 558.02 T
(Appendix A: Standard IDL T) 126 532.02 T
(ypes) 266.39 532.02 T
(T) 252 518.02 T
(ype de\336nitions available in every ORB.) 258.49 518.02 T
72 471.99 558 475.02 C
126 473.5 558 473.5 2 L
0.25 H
2 Z
0 X
0 K
N
72 473.5 117 473.5 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(1.2) 101.15 479.68 T
0 F
(T) 126 479.68 T
(ypographical Conventions) 133.78 479.68 T
2 12 Q
(The type styles shown below are used in this document to distinguish programming state-) 126 453.99 T
-0.32 (ments from ordinary English. However) 126 439.99 P
-0.32 (, these conventions are not used in tables or section) 312.42 439.99 P
-0.26 (headings, where no distinction is necessary) 126 425.99 P
-0.26 (, nor are the type styles used in text where their) 331.08 425.99 P
(density would be distracting.) 126 411.99 T
3 F
(Helvetica bold) 126 385.99 T
2 F
(IDL language and syntax elements) 252 385.99 T
6 F
(T) 126 359.99 T
(imes bold) 133.78 359.99 T
2 F
(Pseudo-IDL language elements) 252 359.99 T
5 F
(Courier bold) 126 333.99 T
2 F
(C language elements) 252 333.99 T
(Code examples written in pseudo-IDL and C are further identi\336ed by means of a com-) 126 307.99 T
(ment; unidenti\336ed examples are written in IDL.) 126 293.99 T
52 554.02 54 566.02 R
V
52 381.99 54 393.99 R
V
FMENDPAGE
%%EndPage: "15" 14
%%Page: "14" 14
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(Overview) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(14) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
2 12 Q
0 X
-0.19 (The Common Object Request Broker Architecture and Speci\336cation described in this doc-) 108 678.02 P
-0.18 (ument is a self-contained response to the Request For Proposals \050RFP\051 issued by the ORB) 108 664.02 P
(T) 108 650.02 T
(ask Force of the OMG, submitted jointly by the following companies:) 114.49 650.02 T
(\245) 108 630.02 T
(Digital Equipment Corporation) 126 630.02 T
(\245) 108 613.02 T
(Hewlett-Packard Company) 126 613.02 T
(\245) 108 596.02 T
(HyperDesk Corporation) 126 596.02 T
(\245) 108 579.02 T
(NCR Corporation) 126 579.02 T
(\245) 108 562.02 T
(Object Design, Inc.) 126 562.02 T
(\245) 108 545.02 T
(SunSoft, Inc.) 126 545.02 T
(It completely replaces the separate proposals previously submitted. At the request of the) 108 519.02 T
-0.1 (ORB T) 108 505.02 P
-0.1 (ask Force, representatives of the above companies worked to \336nd a way to support) 142.04 505.02 P
(a common submission that could have rapid commercial availability using technologies) 108 491.02 T
(each company had already developed. The result is the Common ORB Architecture and) 108 477.02 T
(Speci\336cation, which de\336nes a framework for dif) 108 463.02 T
(ferent ORB implementations to provide) 339.94 463.02 T
(common ORB services and interfaces to support portable clients and implementations of) 108 449.02 T
(objects.) 108 435.02 T
(This document is or) 108 409.02 T
(ganized as follows:) 203.4 409.02 T
(Chapter 1: Overview) 108 383.02 T
(Overview of the document and status.) 234 369.02 T
( Chapter 2: The Object Model) 108 343.02 T
(The concrete object model for the Common ORB Architecture.) 234 329.02 T
(Chapter 3: The Common Object Request Broker Architecture) 108 303.02 T
(The overall ORB architecture and interface description.) 234 289.02 T
(Chapter 4: IDL Syntax and Semantics) 108 263.02 T
(The speci\336cation of the Interface De\336nition Language.) 234 249.02 T
(Chapter 5: C Language Stub Mapping) 108 223.02 T
(The mapping provided for the C programming language.) 234 209.02 T
(Chapter 6: Dynamic Invocation Interface) 108 183.02 T
(The dynamic request invocation interface.) 234 169.02 T
(Chapter 7: The Interface Repository) 108 143.02 T
(The interface \050i.e., type\051 de\336nition repository) 234 129.02 T
(.) 449.73 129.02 T
34 379.02 36 391.02 R
V
34 179.02 36 191.02 R
V
FMENDPAGE
%%EndPage: "14" 13
%%Page: "13" 13
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 378 558 378 2 L
7 X
V
2 Z
0 X
N
72 74.02 558 74.02 2 L
7 X
V
0.25 H
0 X
N
72 55.01 558 66.96 R
7 X
V
0 9 Q
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
-2.78 (13) 546.89 60.29 P
72 396 558 693 R
7 X
V
0 24 Q
0 X
-0.48 (1) 72 677 S
-0.48 (Overview) 126 677 S
72 87.98 558 360 R
7 X
V
72 342.98 558 346 C
126 344.49 558 344.49 2 L
0.25 H
2 Z
0 X
0 K
N
72 344.49 117 344.49 2 L
0 Z
N
0 0 612 792 C
1 14 Q
0 X
0 K
(1.1) 101.15 350.67 T
0 F
(Overview) 126 350.67 T
2 12 Q
(As de\336ned by the Object Management Group \050OMG\051, the Object Request Broker \050ORB\051) 126 320.98 T
(provides the mechanisms by which objects transparently make requests and receive) 126 306.98 T
-0.25 (responses. The ORB provides interoperability between applications on dif) 126 292.98 P
-0.25 (ferent machines) 479.23 292.98 P
(in heterogeneous distributed environments and seamlessly interconnects multiple object) 126 278.98 T
(systems.) 126 264.98 T
2 10 Q
(1) 166.98 269.78 T
72 101.98 558 132.01 C
126 105.01 270 105.01 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
2 10 Q
0 X
0 K
(1.  From) 126 95.32 T
4 F
(Object Management Ar) 162.65 95.32 T
(chitectur) 256.1 95.32 T
(e Guide) 291.26 95.32 T
2 F
(, Revision 1.0, OMG TC Document 90.9.1.) 322.62 95.32 T
52 274.98 54 286.98 R
V
FMENDPAGE
%%EndPage: "13" 12
%%Page: "xii" 12
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 730.15 540 742.18 R
7 X
V
0 9 Q
0 X
(T) 108 736.18 T
(ables) 112.49 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(xii) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
FMENDPAGE
%%EndPage: "xii" 11
%%Page: "xi" 11
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
126 659.52 252 659.52 2 L
7 X
V
0.25 H
2 Z
0 X
N
72 444.02 558 444.02 2 L
7 X
V
2 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
0.25 H
0 X
N
72 55.01 558 66.96 R
7 X
V
0 9 Q
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
-2.78 (xi) 550.78 60.29 P
72 88.06 558 426.02 R
7 X
V
2 F
0 X
(TBL. 1) 120.6 419.36 T
(IDL EBNF Format) 162 419.36 T
1 9 Q
(46) 248.06 419.36 T
2 10 Q
(TBL. 2) 120.6 403.36 T
(The 1) 162 403.36 T
(14 Alphabetic Characters \050Letters\051) 184.67 403.36 T
1 9 Q
(47) 333.16 403.36 T
2 10 Q
(TBL. 3) 120.6 387.36 T
(Decimal Digits) 162 387.36 T
1 9 Q
(48) 232.79 387.36 T
2 10 Q
(TBL. 4) 120.6 371.36 T
(The 65 Graphic Characters) 162 371.36 T
1 9 Q
(48) 279.95 371.36 T
2 10 Q
(TBL. 5) 120.6 355.36 T
(The Formatting Characters) 162 355.36 T
1 9 Q
(50) 279.7 355.36 T
2 10 Q
(TBL. 6) 120.6 339.36 T
(Keywords) 162 339.36 T
1 9 Q
(51) 213.07 339.36 T
2 10 Q
(TBL. 7) 120.6 323.36 T
(Punctuation Characters) 162 323.36 T
1 9 Q
(51) 264.98 323.36 T
2 10 Q
(TBL. 8) 120.6 307.36 T
(Preprocessor T) 162 307.36 T
(okens) 221.53 307.36 T
1 9 Q
(52) 254.84 307.36 T
2 10 Q
(TBL. 9) 120.6 291.36 T
(Escape Sequences) 162 291.36 T
1 9 Q
(52) 244.98 291.36 T
2 10 Q
(TBL. 10) 120.6 275.36 T
(Case Label Matching) 162 275.36 T
1 9 Q
(69) 257.49 275.36 T
2 10 Q
(TBL. 1) 120.6 259.36 T
(1) 149.1 259.36 T
(Data T) 162 259.36 T
(ype Mappings) 188.77 259.36 T
1 9 Q
(89) 255.68 259.36 T
2 10 Q
(TBL. 12) 120.6 243.36 T
(Ar) 162 243.36 T
(gument and Result Passing) 172.36 243.36 T
1 9 Q
(97) 290.36 243.36 T
2 10 Q
(TBL. 13) 120.6 227.36 T
(Client Ar) 162 227.36 T
(gument Storage Responsibilities) 199.3 227.36 T
1 9 Q
(98) 338.67 227.36 T
2 10 Q
(TBL. 14) 120.6 211.36 T
(Ar) 162 211.36 T
(gument Passing Cases) 172.36 211.36 T
1 9 Q
(99) 271.2 211.36 T
2 10 Q
(TBL. 15) 120.6 195.36 T
(C T) 162 195.36 T
(ype Lengths) 176.57 195.36 T
1 9 Q
(106) 235.7 195.36 T
2 10 Q
(TBL. 16) 120.6 179.36 T
(Legal T) 162 179.36 T
(ypeCode Kinds and Parameters) 192.66 179.36 T
1 9 Q
(139) 328.4 179.36 T
2 10 Q
(TBL. 17) 120.6 163.36 T
(T) 162 163.36 T
(ypes De\336ned by IDL) 167.41 163.36 T
1 9 Q
(171) 261.51 163.36 T
2 10 Q
(TBL. 18) 120.6 147.36 T
(Pseudo-objects) 162 147.36 T
1 9 Q
(172) 232.51 147.36 T
2 10 Q
(TBL. 19) 120.6 131.36 T
(Interface Repository T) 162 131.36 T
(ypes) 251.78 131.36 T
1 9 Q
(172) 280.1 131.36 T
2 10 Q
(TBL. 20) 120.6 115.36 T
(Minimal T) 162 115.36 T
(ypes for Any) 204.34 115.36 T
1 9 Q
(173) 266.51 115.36 T
126 666 477 693 R
7 X
V
4 24 Q
0 X
-0.48 (List of T) 126 677 S
-0.48 (ables) 199.47 677 S
FMENDPAGE
%%EndPage: "xi" 10
%%Page: "x" 10
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 734.98 540 742.18 R
7 X
V
0 9 Q
0 X
(Figures) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(x) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
FMENDPAGE
%%EndPage: "x" 9
%%Page: "ix" 9
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
126 659.52 261 659.52 2 L
7 X
V
0.25 H
2 Z
0 X
N
72 444.02 558 444.02 2 L
7 X
V
2 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
0.25 H
0 X
N
72 55.01 558 66.96 R
7 X
V
0 9 Q
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
-2.78 (ix) 550.78 60.29 P
72 88.06 558 426.02 R
7 X
V
2 F
0 X
(FIG.  1) 120.6 419.36 T
(Legal V) 162 419.36 T
(alues) 193.36 419.36 T
1 9 Q
(21) 223.9 419.36 T
2 10 Q
(FIG.  2) 120.6 403.36 T
(A Request Being Sent Through the Object Request Broker) 162 403.36 T
1 9 Q
(28) 406.29 403.36 T
2 10 Q
(FIG.  3) 120.6 387.36 T
(The Structure of Object Request Broker Interfaces) 162 387.36 T
1 9 Q
(29) 373.49 387.36 T
2 10 Q
(FIG.  4) 120.6 371.36 T
(A Client using the Stub or Dynamic Invocation Interface) 162 371.36 T
1 9 Q
(30) 399.06 371.36 T
2 10 Q
(FIG.  5) 120.6 355.36 T
(An Object Implementation Receiving a Request) 162 355.36 T
1 9 Q
(31) 363.81 355.36 T
2 10 Q
(FIG.  6) 120.6 339.36 T
(Interface and Implementation Repositories) 162 339.36 T
1 9 Q
(32) 342.7 339.36 T
2 10 Q
(FIG.  7) 120.6 323.36 T
(The Structure of a T) 162 323.36 T
(ypical Client) 242.35 323.36 T
1 9 Q
(39) 306.2 323.36 T
2 10 Q
(FIG.  8) 120.6 307.36 T
(The Structure of a T) 162 307.36 T
(ypical Object Implementation) 242.35 307.36 T
1 9 Q
(40) 371.7 307.36 T
2 10 Q
(FIG.  9) 120.6 291.36 T
(The Structure of a T) 162 291.36 T
(ypical Object Adapter) 242.35 291.36 T
1 9 Q
(42) 340.6 291.36 T
2 10 Q
(FIG.  10) 120.6 275.36 T
(Dif) 162 275.36 T
(ferent W) 175.14 275.36 T
(ays to Integrate Foreign Object Systems) 209.58 275.36 T
1 9 Q
(44) 379.75 275.36 T
2 10 Q
(FIG.  1) 120.6 259.36 T
(1) 148.82 259.36 T
(Legal Multiple Inheritance Example) 162 259.36 T
1 9 Q
(61) 319.66 259.36 T
2 10 Q
(FIG.  12) 120.6 243.36 T
(Interface Repository Object Containment) 162 243.36 T
1 9 Q
(128) 337.15 243.36 T
2 10 Q
(FIG.  13) 120.6 227.36 T
(The Structure and Operation of the Basic Object Adapter) 162 227.36 T
1 9 Q
(149) 402.65 227.36 T
2 10 Q
(FIG.  14) 120.6 211.36 T
(Implementation Activation Policies) 162 211.36 T
1 9 Q
(153) 314.14 211.36 T
2 10 Q
(FIG.  15) 120.6 195.36 T
(Multiple ORBs) 162 195.36 T
1 9 Q
(162) 233.36 195.36 T
126 666 477 693 R
7 X
V
4 24 Q
0 X
-0.48 (List of Figur) 126 677 S
-0.48 (es) 240.18 677 S
FMENDPAGE
%%EndPage: "ix" 8
%%Page: "viii" 8
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 734.98 540 742.18 R
7 X
V
0 9 Q
0 X
(Contents) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(viii) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
FMENDPAGE
%%EndPage: "viii" 7
%%Page: "vii" 7
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 729 558 742.18 R
7 X
V
0 9 Q
0 X
(Contents) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
-2.78 (vii) 548.57 60.29 P
72 87.98 558 686.02 R
7 X
V
0 8 Q
0 X
(7.5.6) 126 680.68 T
(OperationDef) 151.2 680.68 T
(135) 206.74 680.68 T
(7.5.7) 126 670.68 T
(ParameterDef) 151.2 670.68 T
(136) 208.96 670.68 T
(7.5.8) 126 660.68 T
(T) 151.2 660.68 T
(ypeDef Interface) 155.65 660.68 T
(137) 222.3 660.68 T
(7.5.9) 126 650.68 T
(ConstantDef Interface) 151.2 650.68 T
(137) 236.97 650.68 T
(7.5.10) 126 640.68 T
(ExceptionDef) 151.2 640.68 T
(138) 206.74 640.68 T
1 10 Q
(7.6) 106.71 627.35 T
2 F
(T) 126 627.35 T
(ypeCodes) 131.41 627.35 T
1 9 Q
(138) 180.82 627.35 T
0 8 Q
(7.6.1) 126 614.68 T
(The T) 151.2 614.68 T
(ypeCode Interface) 171.65 614.68 T
(139) 244.97 614.68 T
(7.6.2) 126 604.68 T
(T) 151.2 604.68 T
(ypeCode Constants) 155.65 604.68 T
(141) 233.86 604.68 T
72 557.02 558 566.02 C
126 564.07 558 564.07 2 L
0.25 H
2 Z
0 X
0 K
N
72 564.07 117 564.07 2 L
0 Z
N
0 0 612 792 C
1 10 Q
0 X
0 K
(8) 72 570.68 T
2 14 Q
(ORB Interface) 126 570.68 T
1 9 Q
(143) 221.97 570.68 T
1 10 Q
(8.1) 106.71 544.35 T
2 F
(Converting Object References to Strings) 126 544.35 T
1 9 Q
(143) 298.11 544.35 T
1 10 Q
(8.2) 106.71 528.35 T
2 F
(Object Reference Operations) 126 528.35 T
1 9 Q
(145) 252 528.35 T
0 8 Q
(8.2.1) 126 515.68 T
(Determining the Object Implementation and Interface) 151.2 515.68 T
(145) 346.73 515.68 T
(8.2.2) 126 505.68 T
(Duplicating and Releasing Copies of Object References) 151.2 505.68 T
(145) 356.5 505.68 T
(8.2.3) 126 495.68 T
(Nil Object References) 151.2 495.68 T
(146) 236.95 495.68 T
72 448.02 558 457.02 C
126 455.07 558 455.07 2 L
0.25 H
2 Z
0 X
0 K
N
72 455.07 117 455.07 2 L
0 Z
N
0 0 612 792 C
1 10 Q
0 X
0 K
(9) 72 461.68 T
2 14 Q
(The Basic Object Adapter) 126 461.68 T
1 9 Q
(147) 285.71 461.68 T
1 10 Q
(9.1) 106.71 435.35 T
2 F
(Role of the Basic Object Adapter) 126 435.35 T
1 9 Q
(147) 268.95 435.35 T
1 10 Q
(9.2) 106.71 419.35 T
2 F
(Basic Object Adapter Interface) 126 419.35 T
1 9 Q
(149) 260.05 419.35 T
0 8 Q
(9.2.1) 126 406.68 T
(Registration of Implementations) 151.2 406.68 T
(151) 271.62 406.68 T
(9.2.2) 126 396.68 T
(Activation and Deactivation of Implementations) 151.2 396.68 T
(151) 325.4 396.68 T
(9.2.3) 126 386.68 T
(Generation and Interpretation of Object References) 151.2 386.68 T
(154) 340.97 386.68 T
(9.2.4) 126 376.68 T
(Authentication and Access Control) 151.2 376.68 T
(155) 281.41 376.68 T
(9.2.5) 126 366.68 T
(Persistent Storage) 151.2 366.68 T
(156) 224.97 366.68 T
1 10 Q
(9.3) 106.71 353.35 T
2 F
(C Language Mapping for Object Implementations) 126 353.35 T
1 9 Q
(156) 336.14 353.35 T
0 8 Q
(9.3.1) 126 340.68 T
(Operation-speci\336c details) 151.2 340.68 T
(157) 248.95 340.68 T
(9.3.2) 126 330.68 T
(Method signatures) 151.2 330.68 T
(157) 224.97 330.68 T
(9.3.3) 126 320.68 T
(Binding Methods to Skeletons) 151.2 320.68 T
(158) 264.97 320.68 T
(9.3.4) 126 310.68 T
(BOA and ORB routines) 151.2 310.68 T
(158) 241.85 310.68 T
72 263.02 558 272.02 C
126 270.07 558 270.07 2 L
0.25 H
2 Z
0 X
0 K
N
72 270.07 117 270.07 2 L
0 Z
N
0 0 612 792 C
1 10 Q
0 X
0 K
(10) 72 276.68 T
2 14 Q
(Interoperability) 126 276.68 T
1 9 Q
(161) 227.04 276.68 T
1 10 Q
(10.1) 101.15 250.35 T
2 F
(The Or) 126 250.35 T
(ganization of Multiple ORBs) 154.4 250.35 T
1 9 Q
(162) 280.73 250.35 T
0 8 Q
(10.1.1) 126 237.68 T
(Reference Embedding) 151.2 237.68 T
(163) 238.74 237.68 T
(10.1.2) 126 227.68 T
(Protocol T) 151.2 227.68 T
(ranslation) 187.34 227.68 T
(163) 230 227.68 T
(10.1.3) 126 217.68 T
(Alternate ORBs) 151.2 217.68 T
(163) 214.74 217.68 T
72 170.02 558 179.02 C
126 177.07 558 177.07 2 L
0.25 H
2 Z
0 X
0 K
N
72 177.07 117 177.07 2 L
0 Z
N
0 0 612 792 C
1 10 Q
0 X
0 K
(11) 72 183.68 T
2 14 Q
(Glossary) 126 183.68 T
1 9 Q
(165) 189.74 183.68 T
72 123.02 558 132.02 C
126 130.07 558 130.07 2 L
0.25 H
2 Z
0 X
0 K
N
72 130.07 117 130.07 2 L
0 Z
N
0 0 612 792 C
1 10 Q
0 X
0 K
(A) 72 136.68 T
2 14 Q
(Standard IDL Types) 126 136.68 T
1 9 Q
(171) 254.24 136.68 T
FMENDPAGE
%%EndPage: "vii" 6
%%Page: "vi" 6
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 734.98 540 742.18 R
7 X
V
0 9 Q
0 X
(Contents) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(vi) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
54 663.02 540 672.02 C
108 670.07 540 670.07 2 L
0.25 H
2 Z
0 X
0 K
N
54 670.07 99 670.07 2 L
0 Z
N
0 0 612 792 C
1 10 Q
0 X
0 K
(6) 54 676.68 T
2 14 Q
(Dynamic Invocation Interface) 108 676.68 T
1 9 Q
(105) 289.84 676.68 T
1 10 Q
(6.1) 88.71 650.35 T
2 F
(Overview) 108 650.35 T
1 9 Q
(105) 157.4 650.35 T
0 8 Q
(6.1.1) 108 637.68 T
(Common Data Structures) 133.2 637.68 T
(106) 231.39 637.68 T
(6.1.2) 108 627.68 T
(Memory Usage) 133.2 627.68 T
(107) 195.4 627.68 T
(6.1.3) 108 617.68 T
(Return Statuses and Exceptions) 133.2 617.68 T
(108) 255.41 617.68 T
1 10 Q
(6.2) 88.71 604.35 T
2 F
(Request Routines) 108 604.35 T
1 9 Q
(108) 188.24 604.35 T
0 8 Q
(6.2.1) 108 591.68 T
(create_request) 133.2 591.68 T
(109) 194.53 591.68 T
(6.2.2) 108 581.68 T
(add_arg) 133.2 581.68 T
(1) 170.53 581.68 T
(10) 174.38 581.68 T
(6.2.3) 108 571.68 T
(invoke) 133.2 571.68 T
(1) 164.3 571.68 T
(1) 168.16 571.68 T
(1) 172.01 571.68 T
(6.2.4) 108 561.68 T
(delete) 133.2 561.68 T
(1) 162.98 561.68 T
(1) 166.83 561.68 T
(1) 170.68 561.68 T
1 10 Q
(6.3) 88.71 548.35 T
2 F
(Deferred Synchronous Routines) 108 548.35 T
1 9 Q
(111) 246.23 548.35 T
0 8 Q
(6.3.1) 108 535.68 T
(send) 133.2 535.68 T
(1) 158.53 535.68 T
(1) 162.38 535.68 T
(1) 166.24 535.68 T
(6.3.2) 108 525.68 T
(send_multiple_requests) 133.2 525.68 T
(1) 225.63 525.68 T
(12) 229.48 525.68 T
(6.3.3) 108 515.68 T
(get_response) 133.2 515.68 T
(1) 189.64 515.68 T
(13) 193.49 515.68 T
(6.3.4) 108 505.68 T
(get_next_response) 133.2 505.68 T
(1) 209.2 505.68 T
(13) 213.05 505.68 T
1 10 Q
(6.4) 88.71 492.35 T
2 F
(List Routines) 108 492.35 T
1 9 Q
(113) 171.59 492.35 T
0 8 Q
(6.4.1) 108 479.68 T
(create_list) 133.2 479.68 T
(1) 177.63 479.68 T
(14) 181.49 479.68 T
(6.4.2) 108 469.68 T
(add_item) 133.2 469.68 T
(1) 174.08 469.68 T
(14) 177.93 469.68 T
(6.4.3) 108 459.68 T
(free) 133.2 459.68 T
(1) 154.97 459.68 T
(15) 158.83 459.68 T
(6.4.4) 108 449.68 T
(free_memory) 133.2 449.68 T
(1) 188.29 449.68 T
(15) 192.14 449.68 T
(6.4.5) 108 439.68 T
(get_count) 133.2 439.68 T
(1) 176.31 439.68 T
(15) 180.17 439.68 T
(6.4.6) 108 429.68 T
(create_operation_list) 133.2 429.68 T
(1) 215.41 429.68 T
(15) 219.26 429.68 T
1 10 Q
(6.5) 88.71 416.35 T
2 F
(Context Objects) 108 416.35 T
1 9 Q
(116) 182.68 416.35 T
1 10 Q
(6.6) 88.71 400.35 T
2 F
(Context Object Routines) 108 400.35 T
1 9 Q
(117) 216.83 400.35 T
0 8 Q
(6.6.1) 108 387.68 T
(get_default_context) 133.2 387.68 T
(1) 210.98 387.68 T
(18) 214.84 387.68 T
(6.6.2) 108 377.68 T
(set_one_value) 133.2 377.68 T
(1) 193.2 377.68 T
(18) 197.05 377.68 T
(6.6.3) 108 367.68 T
(set_values) 133.2 367.68 T
(1) 179.41 367.68 T
(19) 183.27 367.68 T
(6.6.4) 108 357.68 T
(get_values) 133.2 357.68 T
(1) 179.86 357.68 T
(19) 183.72 357.68 T
(6.6.5) 108 347.68 T
(delete_values) 133.2 347.68 T
(120) 190.53 347.68 T
(6.6.6) 108 337.68 T
(create_child) 133.2 337.68 T
(120) 184.3 337.68 T
(6.6.7) 108 327.68 T
(delete) 133.2 327.68 T
(120) 162.98 327.68 T
1 10 Q
(6.7) 88.71 314.35 T
2 F
(Native Data Manipulation) 108 314.35 T
1 9 Q
(121) 222.37 314.35 T
54 264.02 540 273.02 C
108 271.07 540 271.07 2 L
0.25 H
2 Z
0 X
0 K
N
54 271.07 99 271.07 2 L
0 Z
N
0 0 612 792 C
1 10 Q
0 X
0 K
(7) 54 277.68 T
2 14 Q
(The Interface Repository) 108 277.68 T
1 9 Q
(123) 261.87 277.68 T
1 10 Q
(7.1) 88.71 251.35 T
2 F
(Overview) 108 251.35 T
1 9 Q
(123) 157.4 251.35 T
1 10 Q
(7.2) 88.71 235.35 T
2 F
(Scope of an Interface Repository) 108 235.35 T
1 9 Q
(124) 249.55 235.35 T
1 10 Q
(7.3) 88.71 219.35 T
2 F
(Implementation Dependencies) 108 219.35 T
1 9 Q
(125) 239.85 219.35 T
1 10 Q
(7.4) 88.71 203.35 T
2 F
(Basics of the Interface Repository Interface) 108 203.35 T
1 9 Q
(126) 292.01 203.35 T
0 8 Q
(7.4.1) 108 190.68 T
(Names) 133.2 190.68 T
(126) 166.52 190.68 T
(7.4.2) 108 180.68 T
(T) 133.2 180.68 T
(ypes and T) 137.65 180.68 T
(ypeCodes) 176.76 180.68 T
(126) 220.75 180.68 T
(7.4.3) 108 170.68 T
(Interface Objects) 133.2 170.68 T
(126) 201.63 170.68 T
(7.4.4) 108 160.68 T
(Structure and Navigation of Interface Objects) 133.2 160.68 T
(127) 300.74 160.68 T
1 10 Q
(7.5) 88.71 147.35 T
2 F
(Interface Repository Interfaces) 108 147.35 T
1 9 Q
(129) 241.77 147.35 T
0 8 Q
(7.5.1) 108 134.68 T
(Container and Contained Interfaces) 133.2 134.68 T
(129) 267.41 134.68 T
(7.5.2) 108 124.68 T
(Repository) 133.2 124.68 T
(132) 179.41 124.68 T
(7.5.3) 108 114.68 T
(ModuleDef) 133.2 114.68 T
(133) 179.85 114.68 T
(7.5.4) 108 104.68 T
(InterfaceDef) 133.2 104.68 T
(134) 184.75 104.68 T
(7.5.5) 108 94.68 T
(AttributeDef) 133.2 94.68 T
(135) 183.41 94.68 T
FMENDPAGE
%%EndPage: "vi" 5
%%Page: "v" 5
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 729 558 742.18 R
7 X
V
0 9 Q
0 X
(Contents) 126 736.18 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
72 55.01 558 66.96 R
7 X
V
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
-2.78 (v) 553 60.29 P
72 87.98 558 686.02 R
7 X
V
0 8 Q
0 X
(4.9.2) 126 680.68 T
(Parameter Declarations) 151.2 680.68 T
(73) 243.17 680.68 T
(4.9.3) 126 670.68 T
(Raises Expressions) 151.2 670.68 T
(74) 229.4 670.68 T
(4.9.4) 126 660.68 T
(Context Expressions) 151.2 660.68 T
(74) 232.51 660.68 T
1 10 Q
(4.10) 101.15 647.35 T
2 F
(Attribute Declaration) 126 647.35 T
1 9 Q
(75) 221.21 647.35 T
1 10 Q
(4.11) 101.15 631.35 T
2 F
(Names and Scoping) 126 631.35 T
1 9 Q
(76) 215.94 631.35 T
1 10 Q
(4.12) 101.15 615.35 T
2 F
(Dif) 126 615.35 T
(ferences from C++) 139.14 615.35 T
1 9 Q
(78) 224.8 615.35 T
1 10 Q
(4.13) 101.15 599.35 T
2 F
(Standard Exceptions) 126 599.35 T
1 9 Q
(79) 218.44 599.35 T
72 549.02 558 558.02 C
126 556.07 558 556.07 2 L
0.25 H
2 Z
0 X
0 K
N
72 556.07 117 556.07 2 L
0 Z
N
0 0 612 792 C
1 10 Q
0 X
0 K
(5) 72 562.68 T
2 14 Q
(C Language Stub Mapping) 126 562.68 T
1 9 Q
(81) 291.18 562.68 T
1 10 Q
(5.1) 106.71 536.35 T
2 F
(Requirements for a Language Mapping) 126 536.35 T
1 9 Q
(81) 293.1 536.35 T
0 8 Q
(5.1.1) 126 523.68 T
(Basic Data T) 151.2 523.68 T
(ypes) 196.53 523.68 T
(82) 221.41 523.68 T
(5.1.2) 126 513.68 T
(Constructed Data T) 151.2 513.68 T
(ypes) 220.08 513.68 T
(82) 244.96 513.68 T
(5.1.3) 126 503.68 T
(Constants) 151.2 503.68 T
(82) 195.19 503.68 T
(5.1.4) 126 493.68 T
(Objects) 151.2 493.68 T
(82) 186.3 493.68 T
(5.1.5) 126 483.68 T
(Invocation of Operations) 151.2 483.68 T
(83) 245.86 483.68 T
(5.1.6) 126 473.68 T
(Exceptions) 151.2 473.68 T
(83) 198.3 473.68 T
(5.1.7) 126 463.68 T
(Attributes) 151.2 463.68 T
(84) 192.97 463.68 T
(5.1.8) 126 453.68 T
(ORB Interfaces) 151.2 453.68 T
(84) 213.85 453.68 T
(5.1.9) 126 443.68 T
(Language Stub Mapping) 151.2 443.68 T
(85) 246.32 443.68 T
1 10 Q
(5.2) 106.71 430.35 T
2 F
(Scoped Names) 126 430.35 T
1 9 Q
(85) 195.67 430.35 T
1 10 Q
(5.3) 106.71 414.35 T
2 F
(Mapping for Interfaces) 126 414.35 T
1 9 Q
(86) 228.13 414.35 T
1 10 Q
(5.4) 106.71 398.35 T
2 F
(Inheritance and Operation Names) 126 398.35 T
1 9 Q
(87) 270.6 398.35 T
1 10 Q
(5.5) 106.71 382.35 T
2 F
(Mapping for Attributes) 126 382.35 T
1 9 Q
(88) 228.71 382.35 T
1 10 Q
(5.6) 106.71 366.35 T
2 F
(Mapping for Constants) 126 366.35 T
1 9 Q
(89) 228.16 366.35 T
1 10 Q
(5.7) 106.71 350.35 T
2 F
(Mapping for Basic Data T) 126 350.35 T
(ypes) 230.22 350.35 T
1 9 Q
(89) 258.54 350.35 T
1 10 Q
(5.8) 106.71 334.35 T
2 F
(Mapping for Structure T) 126 334.35 T
(ypes) 223.29 334.35 T
1 9 Q
(90) 251.6 334.35 T
1 10 Q
(5.9) 106.71 318.35 T
2 F
(Mapping for Union T) 126 318.35 T
(ypes) 211.63 318.35 T
1 9 Q
(90) 239.95 318.35 T
1 10 Q
(5.10) 101.15 302.35 T
2 F
(Mapping for Sequence T) 126 302.35 T
(ypes) 224.95 302.35 T
1 9 Q
(91) 253.26 302.35 T
1 10 Q
(5.11) 101.15 286.35 T
2 F
(Mapping for Strings) 126 286.35 T
1 9 Q
(93) 217.06 286.35 T
1 10 Q
(5.12) 101.15 270.35 T
2 F
(Mapping for Arrays) 126 270.35 T
1 9 Q
(94) 215.93 270.35 T
1 10 Q
(5.13) 101.15 254.35 T
2 F
(Mapping for Exception T) 126 254.35 T
(ypes) 227.17 254.35 T
1 9 Q
(94) 255.49 254.35 T
1 10 Q
(5.14) 101.15 238.35 T
2 F
(Implicit Ar) 126 238.35 T
(guments to Operations) 170.52 238.35 T
1 9 Q
(95) 271.01 238.35 T
1 10 Q
(5.15) 101.15 222.35 T
2 F
(Interpretation of Functions with Empty Ar) 126 222.35 T
(gument Lists) 295.44 222.35 T
1 9 Q
(95) 357.35 222.35 T
1 10 Q
(5.16) 101.15 206.35 T
2 F
(Ar) 126 206.35 T
(gument Passing Considerations) 136.36 206.35 T
1 9 Q
(95) 271.85 206.35 T
1 10 Q
(5.17) 101.15 190.35 T
2 F
(Return Result Passing Considerations) 126 190.35 T
1 9 Q
(96) 286.75 190.35 T
1 10 Q
(5.18) 101.15 174.35 T
2 F
(Summary of Ar) 126 174.35 T
(gument/Result Passing) 188.56 174.35 T
1 9 Q
(97) 289.9 174.35 T
1 10 Q
(5.19) 101.15 158.35 T
2 F
(Handling Exceptions) 126 158.35 T
1 9 Q
(99) 220.11 158.35 T
1 10 Q
(5.20) 101.15 142.35 T
2 F
(Method Routine Signatures) 126 142.35 T
1 9 Q
(101) 245.93 142.35 T
1 10 Q
(5.21) 101.15 126.35 T
2 F
(Include Files) 126 126.35 T
1 9 Q
(102) 187.91 126.35 T
1 10 Q
(5.22) 101.15 110.35 T
2 F
(Pseudo-objects) 126 110.35 T
1 9 Q
(102) 196.51 110.35 T
FMENDPAGE
%%EndPage: "v" 4
%%Page: "iv" 4
612 792 0 FMBEGINPAGE
54 750.02 540 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
54 734.98 540 742.18 R
7 X
V
0 9 Q
0 X
(Contents) 108 736.18 T
54 726.98 540 726.98 2 L
7 X
V
0.25 H
0 X
N
54 74.02 540 74.02 2 L
7 X
V
2 Z
0 X
N
54 55.01 540 66.96 R
7 X
V
0 10 Q
0 X
(iv) 54 60.29 T
0 9 Q
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 108 60.29 T
54 87.98 540 686.02 R
7 X
V
0 8 Q
0 X
(3.1.4) 108 680.68 T
(Object References) 133.2 680.68 T
(34) 207.41 680.68 T
(3.1.5) 108 670.68 T
( IDL Interface De\336nition Language) 133.2 670.68 T
(34) 262.53 670.68 T
(3.1.6) 108 660.68 T
( Programming Language Mapping) 133.2 660.68 T
(34) 262.07 660.68 T
(3.1.7) 108 650.68 T
( Client Stubs) 133.2 650.68 T
(35) 186.52 650.68 T
(3.1.8) 108 640.68 T
(Dynamic Invocation Interface) 133.2 640.68 T
(35) 244.29 640.68 T
(3.1.9) 108 630.68 T
( Implementation Skeleton) 133.2 630.68 T
(35) 231.41 630.68 T
(3.1.10) 108 620.68 T
( Object Adapters) 133.2 620.68 T
(36) 200.75 620.68 T
(3.1.1) 108 610.68 T
(1) 125.19 610.68 T
(ORB Interface) 133.2 610.68 T
(36) 191.86 610.68 T
(3.1.12) 108 600.68 T
(Interface Repository) 133.2 600.68 T
(36) 212.74 600.68 T
(3.1.13) 108 590.68 T
(Implementation Repository) 133.2 590.68 T
(37) 236.29 590.68 T
1 10 Q
(3.2) 88.71 577.35 T
2 F
(Some Example ORBs) 108 577.35 T
1 9 Q
(37) 205.73 577.35 T
0 8 Q
(3.2.1) 108 564.68 T
(Client- and Implementation-resident ORB) 133.2 564.68 T
(37) 287.39 564.68 T
(3.2.2) 108 554.68 T
(Server-based ORB) 133.2 554.68 T
(37) 208.73 554.68 T
(3.2.3) 108 544.68 T
(System-based ORB) 133.2 544.68 T
(37) 211.85 544.68 T
(3.2.4) 108 534.68 T
(Library-based ORB) 133.2 534.68 T
(38) 209.62 534.68 T
1 10 Q
(3.3) 88.71 521.35 T
2 F
(The Structure of a Client) 108 521.35 T
1 9 Q
(38) 217.37 521.35 T
1 10 Q
(3.4) 88.71 505.35 T
2 F
(The Structure of an Object Implementation) 108 505.35 T
1 9 Q
(40) 290.37 505.35 T
1 10 Q
(3.5) 88.71 489.35 T
2 F
(The Structure of an Object Adapter) 108 489.35 T
1 9 Q
(41) 259.27 489.35 T
1 10 Q
(3.6) 88.71 473.35 T
2 F
(Some example Object Adapters) 108 473.35 T
1 9 Q
(43) 244.85 473.35 T
0 8 Q
(3.6.1) 108 460.68 T
(Basic Object Adapter) 133.2 460.68 T
(43) 216.3 460.68 T
(3.6.2) 108 450.68 T
(Library Object Adapter) 133.2 450.68 T
(43) 221.18 450.68 T
(3.6.3) 108 440.68 T
(Object-Oriented Database Adapter) 133.2 440.68 T
(43) 264.3 440.68 T
1 10 Q
(3.7) 88.71 427.35 T
2 F
(The Integration of Foreign Object Systems) 108 427.35 T
1 9 Q
(44) 289.27 427.35 T
54 377.02 540 386.02 C
108 384.07 540 384.07 2 L
0.25 H
2 Z
0 X
0 K
N
54 384.07 99 384.07 2 L
0 Z
N
0 0 612 792 C
1 10 Q
0 X
0 K
(4) 54 390.68 T
2 14 Q
(IDL Syntax and Semantics) 108 390.68 T
1 9 Q
(45) 272.4 390.68 T
1 10 Q
(4.1) 88.71 364.35 T
2 F
(Lexical Conventions) 108 364.35 T
1 9 Q
(47) 201 364.35 T
0 8 Q
(4.1.1) 108 351.68 T
(T) 133.2 351.68 T
(okens) 137.2 351.68 T
(50) 166.53 351.68 T
(4.1.2) 108 341.68 T
(Comments) 133.2 341.68 T
(50) 179.85 341.68 T
(4.1.3) 108 331.68 T
(Identi\336ers) 133.2 331.68 T
(50) 175.86 331.68 T
(4.1.4) 108 321.68 T
(Keywords) 133.2 321.68 T
(51) 176.3 321.68 T
(4.1.5) 108 311.68 T
(Literals) 133.2 311.68 T
(52) 166.96 311.68 T
1 10 Q
(4.2) 88.71 298.35 T
2 F
(Preprocessing) 108 298.35 T
1 9 Q
(54) 174.06 298.35 T
1 10 Q
(4.3) 88.71 282.35 T
2 F
(IDL Grammar) 108 282.35 T
1 9 Q
(54) 175.44 282.35 T
1 10 Q
(4.4) 88.71 266.35 T
2 F
(IDL Speci\336cation) 108 266.35 T
1 9 Q
(58) 189.34 266.35 T
0 8 Q
(4.4.1) 108 253.68 T
(Module Declaration) 133.2 253.68 T
(58) 210.07 253.68 T
(4.4.2) 108 243.68 T
(Interface Declaration) 133.2 243.68 T
(59) 214.96 243.68 T
1 10 Q
(4.5) 88.71 230.35 T
2 F
(Inheritance) 108 230.35 T
1 9 Q
(60) 162.95 230.35 T
1 10 Q
(4.6) 88.71 214.35 T
2 F
(Constant Declaration) 108 214.35 T
1 9 Q
(62) 202.66 214.35 T
0 8 Q
(4.6.1) 108 201.68 T
(Syntax) 133.2 201.68 T
(63) 165.64 201.68 T
(4.6.2) 108 191.68 T
(Semantics) 133.2 191.68 T
(64) 178.52 191.68 T
1 10 Q
(4.7) 88.71 178.35 T
2 F
(T) 108 178.35 T
(ype Declaration) 113.41 178.35 T
1 9 Q
(65) 186.96 178.35 T
0 8 Q
(4.7.1) 108 165.68 T
(Basic T) 133.2 165.68 T
(ypes) 159.42 165.68 T
(66) 184.3 165.68 T
(4.7.2) 108 155.68 T
(Constructed T) 133.2 155.68 T
(ypes) 182.97 155.68 T
(68) 207.85 155.68 T
(4.7.3) 108 145.68 T
(T) 133.2 145.68 T
(emplate T) 137.2 145.68 T
(ypes) 172.31 145.68 T
(70) 197.19 145.68 T
(4.7.4) 108 135.68 T
(Complex Declarator) 133.2 135.68 T
(71) 211.84 135.68 T
1 10 Q
(4.8) 88.71 122.35 T
2 F
(Exception Declaration) 108 122.35 T
1 9 Q
(72) 207.65 122.35 T
1 10 Q
(4.9) 88.71 106.35 T
2 F
(Operation Declaration) 108 106.35 T
1 9 Q
(72) 207.09 106.35 T
0 8 Q
(4.9.1) 108 93.68 T
(Operation Attribute) 133.2 93.68 T
(73) 208.3 93.68 T
FMENDPAGE
%%EndPage: "iv" 3
%%Page: "iii" 3
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
126 659.52 288 659.52 2 L
7 X
V
0.25 H
2 Z
0 X
N
72 444.02 558 444.02 2 L
7 X
V
2 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
0.25 H
0 X
N
72 55.01 558 66.96 R
7 X
V
0 9 Q
0 X
(THE COMMON OBJECT REQUEST BROKER: ARCHITECTURE AND SPECIFICATION) 126 60.29 T
0 10 Q
-2.78 (iii) 551.34 60.29 P
72 88.06 558 426.02 R
7 X
V
72 403.02 558 412.02 C
126 410.08 558 410.08 2 L
0.25 H
2 Z
0 X
0 K
N
72 410.08 117 410.08 2 L
0 Z
N
0 0 612 792 C
1 10 Q
0 X
0 K
(1) 72 416.69 T
2 14 Q
(Overview) 126 416.69 T
1 9 Q
(13) 195.16 416.69 T
1 10 Q
(1.1) 106.71 390.36 T
2 F
(Overview) 126 390.36 T
1 9 Q
(13) 175.4 390.36 T
1 10 Q
(1.2) 106.71 374.36 T
2 F
(T) 126 374.36 T
(ypographical Conventions) 131.41 374.36 T
1 9 Q
(15) 246.61 374.36 T
72 324.02 558 333.02 C
126 331.08 558 331.08 2 L
0.25 H
2 Z
0 X
0 K
N
72 331.08 117 331.08 2 L
0 Z
N
0 0 612 792 C
1 10 Q
0 X
0 K
(2) 72 337.69 T
2 14 Q
(The Object Model) 126 337.69 T
1 9 Q
(17) 242.58 337.69 T
1 10 Q
(2.1) 106.71 311.36 T
2 F
(Overview) 126 311.36 T
1 9 Q
(17) 175.4 311.36 T
1 10 Q
(2.2) 106.71 295.36 T
2 F
(Object Semantics) 126 295.36 T
1 9 Q
(18) 206.23 295.36 T
0 8 Q
(2.2.1) 126 282.69 T
(Objects) 151.2 282.69 T
(19) 186.3 282.69 T
(2.2.2) 126 272.69 T
(Requests) 151.2 272.69 T
(19) 192.97 272.69 T
(2.2.3) 126 262.69 T
(Object Creation and Destruction) 151.2 262.69 T
(20) 272.96 262.69 T
(2.2.4) 126 252.69 T
(T) 151.2 252.69 T
(ypes) 155.65 252.69 T
(20) 180.53 252.69 T
(2.2.5) 126 242.69 T
(Interfaces) 151.2 242.69 T
(22) 194.3 242.69 T
(2.2.6) 126 232.69 T
(Operations) 151.2 232.69 T
(22) 198.3 232.69 T
(2.2.7) 126 222.69 T
(Attributes) 151.2 222.69 T
(24) 192.97 222.69 T
1 10 Q
(2.3) 106.71 209.36 T
2 F
(Object Implementation) 126 209.36 T
1 9 Q
(24) 228.43 209.36 T
0 8 Q
(2.3.1) 126 196.69 T
(The Execution Model: Performing Services) 151.2 196.69 T
(24) 310.72 196.69 T
(2.3.2) 126 186.69 T
(The Construction Model) 151.2 186.69 T
(25) 244.07 186.69 T
72 139.02 558 148.02 C
126 146.08 558 146.08 2 L
0.25 H
2 Z
0 X
0 K
N
72 146.08 117 146.08 2 L
0 Z
N
0 0 612 792 C
1 10 Q
0 X
0 K
(3) 72 152.69 T
2 14 Q
(The Common Object Request Broker Architecture) 126 152.69 T
1 9 Q
(27) 422.51 152.69 T
1 10 Q
(3.1) 106.71 126.36 T
2 F
(The Structure of an Object Request Broker) 126 126.36 T
1 9 Q
(28) 307.53 126.36 T
0 8 Q
(3.1.1) 126 113.69 T
( Object Request Broker) 151.2 113.69 T
(32) 242.29 113.69 T
(3.1.2) 126 103.69 T
(Clients) 151.2 103.69 T
(33) 183.63 103.69 T
(3.1.3) 126 93.69 T
(Object implementations) 151.2 93.69 T
(33) 242.73 93.69 T
126 666 477 693 R
7 X
V
4 24 Q
0 X
-0.48 (T) 126 677 S
-0.48 (able of Contents) 136.65 677 S
FMENDPAGE
%%EndPage: "iii" 2
%%Page: "2" 2
612 792 0 FMBEGINPAGE
54 730.15 540 742.18 R
7 X
0 K
V
54 55.01 540 66.96 R
V
54 87.98 540 686.02 R
V
2 10 Q
0 X
(Copyright 1991, 1992 by Digital Equipment Corporation) 54 679.35 T
(Copyright 1989, 1990, 1991, 1992 by Hewlett-Packard Company) 54 668.35 T
(Copyright 1991, 1992 by HyperDesk Corporation) 54 657.35 T
(Copyright 1991, 1992 by NCR Corporation) 54 646.35 T
(Copyright 1991, 1992 by Object Design, Inc.) 54 635.35 T
(Copyright 1991, 1992 by Sun Microsystems, Inc.) 54 624.35 T
(Sun Microsystems, Inc., Hewlett-Packard Company) 54 602.35 T
(, HyperDesk Corporation, NCR Corporation, Digital Equipment) 261.27 602.35 T
(Corporation, and Object Design, Inc. hereby grant royalty-free license to the Object Management Group, Inc. for) 54 591.35 T
(worldwide distribution of this document or any derivative works.) 54 580.35 T
(NOTICE) 270 536.35 T
(The information contained in this document is subject to change without notice.) 54 514.35 T
-0.22 (The material in this document is submitted to the Object Management Group for evaluation. Submission of this document) 54 492.35 P
(does not represent a committment to implement any portion of this speci\336cation in the products of the submitters.) 54 481.35 T
-0.12 (WHILE THE INFORMA) 54 459.35 P
-0.12 (TION IN THIS PUBLICA) 155.35 459.35 P
-0.12 (TION IS BELIEVED T) 260.75 459.35 P
-0.12 (O BE ACCURA) 355.42 459.35 P
-0.12 (TE, DIGIT) 420.7 459.35 P
-0.12 (AL EQUIPMENT) 464.18 459.35 P
(CORPORA) 54 448.35 T
(TION, HEWLETT) 100.1 448.35 T
(-P) 175.22 448.35 T
(ACKARD COMP) 183.19 448.35 T
(ANY) 255.29 448.35 T
(, HYPERDESK CORPORA) 275.65 448.35 T
(TION, NCR CORPORA) 388.1 448.35 T
(TION,) 486.1 448.35 T
(OBJECT DESIGN, INC., AND SUN MICROSYSTEMS, INC. MAKE NO W) 54 437.35 T
(ARRANTY OF ANY KIND WITH) 368.26 437.35 T
(REGARD T) 54 426.35 T
(O THIS MA) 103.51 426.35 T
(TERIAL INCLUDING BUT NOT LIMITED T) 152.93 426.35 T
(O THE IMPLIED W) 343.99 426.35 T
(ARRANTIES OF) 426.98 426.35 T
(MERCHANT) 54 415.35 T
(ABILITY AND FITNESS FOR A P) 109.28 415.35 T
(AR) 254.11 415.35 T
(TICULAR PURPOSE. Digital Equipment Corporation, Hewlett-) 267.39 415.35 T
-0.02 (Packard Company) 54 404.35 P
-0.02 (, HyperDesk Corporation, NCR Corporation, Object Design, Inc, and Sun Microsystems, Inc. shall not) 126.89 404.35 P
(be liable for errors contained herein or for incidental or consequential damages in connection with the furnishing,) 54 393.35 T
(performance or use of this material.) 54 382.35 T
(Hewlett-Packard has patents pending on some of the technologies and designs described in this publication.) 54 360.35 T
(This document contains proprietary information which is protected by copyright. All Rights Reserved. No part of this) 54 338.35 T
(work covered by copyright hereon may be reproduced or used in any form or by any means\321graphic, electronic, or) 54 327.35 T
-0.31 (mechanical, including photocopying, recording, taping, or information storage and retrieval systems\321without permission) 54 316.35 P
(of the copyright owner) 54 305.35 T
(.) 144.77 305.35 T
-0.09 (RESTRICTED RIGHTS LEGEND. Use, duplication, or disclosure by government is subject to restrictions as set forth in) 54 283.35 P
(subdivision \050c\051 \0501\051 \050ii\051 of the Right in T) 54 272.35 T
(echnical Data and Computer Software Clause at DF) 210.98 272.35 T
(ARS 252.227.7013.) 417.59 272.35 T
(Hewlett-Packard is a trademark of Hewlett-Packard Company) 54 170.35 T
(HyperDesk is a trademark of HyperDesk Corporation) 54 148.35 T
(SunSoft is a trademark of Sun Microsystems, Inc. licensed to SunSoft, Inc.) 54 126.35 T
(UNIX is a registered trademark of UNIX Systems Laboratories, Inc.) 54 104.35 T
34 621.02 36 686.02 R
V
34 555.02 36 609.02 R
V
34 434.02 36 444.02 R
V
34 401.02 36 411.02 R
V
FMENDPAGE
%%EndPage: "2" 1
%%Page: "1" 1
612 792 0 FMBEGINPAGE
72 750.02 558 750.02 2 L
7 X
0 K
V
2 H
0 Z
0 X
N
72 378 558 378 2 L
7 X
V
2 Z
0 X
N
72 74.02 558 74.02 2 L
7 X
V
0.25 H
0 X
N
72 55.01 558 66.96 R
7 X
V
72 396 558 693 R
V
2 30 Q
0 X
(The Common Object Request Broker:) 72 673 T
72 596.98 558 627 C
72 596.98 558 627 R
7 X
0 K
V
72 605.98 558 605.98 2 L
V
0.5 H
2 Z
0 X
N
0 0 612 792 C
2 30 Q
0 X
0 K
(Architecture and Speci\336cation) 72 637 T
6 18 Q
(Digital Equipment Corporation) 72 538.98 T
(Hewlett-Packard Company) 72 518.98 T
(HyperDesk Corporation) 72 498.98 T
(NCR Corporation) 72 478.98 T
(Object Design, Inc.) 72 458.98 T
(SunSoft, Inc.) 72 438.98 T
72 90 558 362.02 R
7 X
V
1 10 Q
0 X
(OMG Document Number 91.12.1) 72 355.35 T
(Revision 1.1) 72 331.35 T
(Draft 10 December 1991) 72 271.35 T
52 352.02 54 362.02 R
V
52 268.02 54 338.02 R
V
FMENDPAGE
%%EndPage: "1" 0
%%Trailer
%%BoundingBox: 0 0 612 792
%%Pages: 174 -1
%%DocumentFonts: Helvetica
%%+ Helvetica-Bold
%%+ Times-Roman
%%+ Helvetica-Narrow-Bold
%%+ Times-Italic
%%+ Courier-Bold
%%+ Times-Bold
%%+ Symbol
