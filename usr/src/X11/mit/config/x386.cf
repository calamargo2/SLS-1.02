XCOMM $Header: /home/x_cvs/mit/config/x386.cf,v 1.42 1992/09/26 17:40:01 dawes Exp $
XCOMM platform:  $XConsortium: x386.cf,v 1.7 91/08/16 19:30:10 gildea Exp $

/*****************************************************************************
 *	            Defaults for Site-specfic parameters                     *
 *****************************************************************************/
/*****************************************************************************
 *                        Do not change anything below                       *
 *****************************************************************************/


/*
 * If you want to change any of these, do it in the BeforeVendorCF part
 * of site.def
 */

/* Defaults for SVR3, SVR4 */

#if defined(i386SVR3Architecture) || defined(i386SVR4Architecture)
# ifndef HasGcc
#  define HasGcc		YES
# endif
# ifndef HasGcc2
#  define HasGcc2		YES
# endif
# ifndef GccUsesGas
#  define GccUsesGas		NO
# endif
# ifndef UseGas
#  define UseGas		NO
# endif
# ifndef GnuCpp
#  define GnuCpp		NO
# endif
# ifndef HasSdbm
#  ifdef ISC
#   define HasSdbm		NO
#  else
#   define HasSdbm		YES
#  endif
# endif
# ifndef HasShadowPasswd
#  define HasShadowPasswd	YES
# endif
# ifndef SCOLocalConnSysv4
#  if defined(i386SVR4Architecture)
#   define SCOLocalConnSysv4	YES
#  else
#   define SCOLocalConnSysv4	NO
#  endif
# endif
#endif

/* Defaults for BSD-like systems */

#if defined(i386BsdArchitecture) || defined(i386MachArchitecture)

# ifndef HasGcc
#  define HasGcc		YES
# endif
# ifndef HasGcc2
#  define HasGcc2		NO
# endif
# ifndef GccUsesGas
#  define GccUsesGas		YES
# endif
# ifndef UseGas
#  define UseGas		YES
# endif
# ifndef GnuCpp
#  if defined(i386BsdArchitecture)
#   define GnuCpp		YES
#  else
#   define GnuCpp		NO
#  endif
# endif
# ifndef HasSdbm
#  define HasSdbm		NO
# endif
# ifndef HasShadowPasswd
#  define HasShadowPasswd	NO
# endif
# ifndef SCOLocalConnSysv4
#  define SCOLocalConnSysv4	NO
# endif
#endif

/* Defaults for Linux */

#if defined(LinuxArchitecture)

# ifndef HasGcc
#  define HasGcc		YES
# endif
# ifndef HasGcc2
#  define HasGcc2		YES	/* for GCC 2.0 or later */
# endif
# ifndef GccUsesGas
#  define GccUsesGas		YES
# endif
# ifndef UseGas
#  define UseGas		YES
# endif
# ifndef GnuCpp
#  define GnuCpp		YES
# endif
# ifndef HasSdbm
#  define HasSdbm		NO
# endif
# ifndef HasShadowPasswd
#  define HasShadowPasswd	NO
# endif
# ifndef SCOLocalConnSysv4
#  define SCOLocalConnSysv4	NO
# endif
#endif

/* Defaults which are the same for all systems */

#ifndef HasSockets
# define HasSockets		YES
#endif
#ifndef HasNdbm
# define HasNdbm		YES	/* correct for GNU dbm & SVR4 */
#endif
#ifndef ProjectRoot
# define ProjectRoot		/usr/X386
#endif
#ifndef StripInstalledPrograms
# define StripInstalledPrograms	YES
#endif
#ifndef X386Server
# define X386Server		YES
#endif
#ifndef ExtensionOSDefines
# define ExtensionOSDefines	-DXTESTEXT1
#endif
#ifndef MotifBC
# define MotifBC	       	YES
#endif
#ifndef Target_486
# define Target_486		NO	/* YES if binaries are for 486 */
#endif
#ifndef CompressAllFonts
# define CompressAllFonts	YES
#endif
#ifndef Build75Dpi
# define Build75Dpi		YES
#endif
#ifndef Build100Dpi
# define Build100Dpi		NO
#endif
#ifndef BuildLargeMiscFonts
# define BuildLargeMiscFonts	NO
#endif
#ifndef BuildPex
# define BuildPex		NO
#endif
#ifndef BuildFontServer
# define BuildFontServer	NO
#endif
#ifndef ClientLocalConnSysv4
# define ClientLocalConnSysv4	NO
#endif
#ifndef DebuggableServer
# define DebuggableServer	NO
#endif
#ifndef SpecialMalloc
# define SpecialMalloc		NO
#endif

#ifndef X386MonoServer
# define X386MonoServer		NO
#endif

#ifndef BuildServer
# if !X386Server && !X386MonoServer
#  define BuildServer		NO
# endif
#endif

#ifndef X386Vga256Drivers
# define X386Vga256Drivers	et4000 et3000 pvga1 gvga ati tvga8900
#endif

#ifndef X386Vga2Drivers
# define X386Vga2Drivers	et4000 et3000 pvga1 gvga tvga8900 generic
#endif

#ifndef FontRenderers
# if BuildType1
#  define FontRenderers		Speedo Type1
# else
#  define FontRenderers		Speedo
# endif
#endif

/* You must manually compute BootstrapCFlags for initial build */

#if defined(i386SVR3Architecture) || defined(i386SVR4Architecture)
# define BootstrapCFlags	OSDefines OSRelease
#else
# define BootstrapCFlags	/* nothing */
#endif

#define StandardDefines		OSDefines OSRelease

#if !defined(i386BsdArchitecture)
# define LdCombineFlags		-r
#endif

#if Target_486
# define Gcc2MOption -m486
#else
# define Gcc2MOption -m386
#endif

#if GccUsesGas
# define GccGasOption -DGCCUSESGAS
#else
# define GccGasOption /**/
#endif

#if UseGas
# define AsmDefines -DUSE_GAS
#else
# define AsmDefines /**/
#endif

#if GnuCpp
# define StandardCppDefines -traditional StandardDefines
#else
# define StandardCppDefines StandardDefines
#endif

#if HasGcc2 && !HasGcc
# undef HasGcc
# define HasGcc			YES
#endif

#if SpecialMalloc
# define MallocFlags		-DCAHILL_MALLOC -I/usr/local/debug_include
#else
# define MallocFlags		/**/
#endif

#if DebuggableServer
# if HasGcc
#  define ServerCDebugFlags DebuggableCDebugFlags OptimizedCDebugFlags 
# else
#  define ServerCDebugFlags DebuggableCDebugFlags 
# endif
#endif

#define AssembleObject(flags) $(RM) $@                                  @@\
	$(CPP) AsmDefines $(INCLUDES) flags $*.s > $*.i                 @@\
	$(AS) -o $*.o $*.i                                              @@\
	$(RM) $*.i

#define NormalAsmObjectRule()                                           @@\
.s.o:                                                                   @@\
	AssembleObject($(_NOOP_))

#define ObjectFromSpecialAsmSource(dst,src,flags)                       @@\
dst.s:  src.s                                                           @@\
	$(RM) $@                                                        @@\
	$(LN) $? $@                                                     @@\
                                                                        @@\
dst.o:  dst.s                                                           @@\
	AssembleObject(flags)                                           @@\
                                                                        @@\
depend:: dst.s                                                          @@\
                                                                        @@\
clean::                                                                 @@\
	$(RM) dst.s


/*
 * Rules for building config files from scripts
 */

#ifndef Depend
# if defined(LinuxArchitecture)
#  define Depend emptyrule
# else
#  define Depend depend
# endif
#endif
 
#define ConfigTargetLong(target,dep,script,args,extra)                  @@\
all:: Configure                                                         @@\
                                                                        @@\
Configure:: target.o                                                    @@\
                                                                        @@\
target.c: script dep                                                    @@\
	$(MAKE) $(MFLAGS) Makefile                                      @@\
	$(MAKE) $(MFLAGS) extra Concat(Build,target)                    @@\
                                                                        @@\
Concat(Build,target):                                                   @@\
	$(RM) target.c                                                  @@\
	$(SHELL) script args                                            @@\
                                                                        @@\
clean::                                                                 @@\
	$(RM) target.c

#define ConfigTarget(target,dep,script,args) ConfigTargetLong(target,dep,script,args,Depend)

#define ConfigTargetNoDepend(target,dep,script,args) ConfigTargetLong(target,dep,script,args,)


/*
 * Rules for installing LinkKit parts (target is install.linkkit)
 */

#define InstallLinkKitNonExecFile(file,dest)				@@\
install.linkkit:: file							@@\
	MakeDir($(DESTDIR)dest)						@@\
	$(INSTALL) -c $(INSTDATFLAGS) file $(DESTDIR)dest

#define InstallLinkKitLibrary(libname,dest)				@@\
install.linkkit:: Concat(lib,libname.a)					@@\
	MakeDir($(DESTDIR)dest)						@@\
	$(INSTALL) -c $(INSTLIBFLAGS) Concat(lib,libname.a) $(DESTDIR)dest @@\
	RanLibrary($(RANLIBINSTFLAGS) Concat($(DESTDIR)dest/lib,libname.a))

#define InstallLinkKitNamedNonExec(srcname,dstname,dest)		@@\
install.linkkit:: srcname						@@\
	MakeDir($(DESTDIR)dest)						@@\
	$(INSTALL) -c $(INSTDATFLAGS) srcname $(DESTDIR)dest/dstname

#define InstallLinkKitNamedProg(srcname,dstname,dest)			@@\
install.linkkit:: srcname						@@\
	MakeDir($(DESTDIR)dest)						@@\
	$(INSTALL) -c $(INSTBINFLAGS) srcname $(DESTDIR)dest/dstname

#define InstallLinkKitSubdirs(dirs) \
NamedTargetSubdirs(install.linkkit,dirs,"installing link kit",DESTDIR='$(DESTDIR)',install.linkkit)

#ifndef LinkKitDir
# define LinkKitDir		$(USRLIBDIR)/Server
#endif

#if HasSdbm && !HasNdbm
# undef HasNdbm
# define HasNdbm		YES
#endif

#if HasNdbm
# if HasSdbm
#  define NdbmDefines		-DNDBM -DSDBM
# else
#  define NdbmDefines		-DNDBM
# endif
#endif


#if defined(i386SVR3Architecture)

#define SystemV			YES

#define NeedBerklib		YES

/*
 * V/386 Release 3.2
 */
#ifdef ISC
/* INTERACTIVE UNIX Version 2.2.1 and 3.0 */
# ifdef ISC30
#  define ISCVerDef -DISC30
# else
#  define ISCVerDef -DISC22
# endif
# define OSVendor		"Interactive System Corp."
# define OSDefines		-DISC ISCVerDef
# define LocalLibraries		-lpt
# define PosixLibraries		-lcposix
# define SocketLibraries        -linet
#endif

#ifdef ESIX
#define OSVendor		"ESIX System Inc."
#define OSDefines		-DESIX
#define LocalLibraries		-lpt -lbsd
#define SocketLibraries		-lnet -lnsl_s
#define PosixLibraries		/**/
#endif

#ifdef SCO
#define OSDefines		-DSCO -DBROKEN_FTOL -DNO_PROTOTYPE -D_SVID
#define OSVendor		"Santa Cruz Operation Ltd."
#define LocalLibraries		-lpt
#define SocketLibraries		-lsocket 
#define PosixLibraries		/**/
#endif

#ifdef ATT
#define OSDefines		-DATT
#define OSVendor		"AT&T"
#define LocalLibraries		-lpt
#define SocketLibraries		-lnet -lnsl_s    /* just a guess */
#define PosixLibraries		/**/
#endif

#define OSName			Unix System V/386 Release 3.2
#define OSMajorVersion		3
#define OSMinorVersion		2
#define OSRelease		-DSYSV -DSYSV386

#if HasGcc
# define CcCmd gcc
# if HasGcc2
#  define DefaultCCOptions Gcc2MOption -DNO_ASM -fpcc-struct-return -fwritable-strings
#  define LibraryCCOptions Gcc2MOption -DNO_ASM -fpcc-struct-return
#  define OptimizedCDebugFlags -O2
# else
#  define DefaultCCOptions -DNO_ASM -fpcc-struct-return -fwritable-strings
#  define LibraryCCOptions -DNO_ASM -fpcc-struct-return
#  define OptimizedCDebugFlags -O -fstrength-reduce
# endif
# define ShlibDefines -D__GNUC__ -DGNULIB=/usr/local/lib/gcc-gnulib
#else
# define ShlibDefines /**/
#endif

#if HasSockets
# define ConnectionFlags -DCLIENTS_LOCALCONN -DSERVER_LOCALCONN -DTCPCONN
# define ExtraLibraries SocketLibraries LocalLibraries -lc_s PosixLibraries
# define ServerExtraDefines GccGasOption -DXDMCP MallocFlags
#else
# define NeedInetEmulLib	YES
# define ConnectionFlags -DCLIENTS_LOCALCONN -DSERVER_LOCALCONN
# define ExtraLibraries $(XINETLIB) LocalLibraries -lc_s PosixLibraries
/* This turns off XDMCP in the server if no sockets */
# define ServerExtraDefines GccGasOption MallocFlags
#endif

/* #include <sv3Lib.rules> */  /* not working yet */

/*
 * Man pages need to be formatted when installed, so override the default
 * imake rules.
 */
#define InstallManPageLong(file,destdir,dest)                           @@\
install.man:: file.man                                                  @@\
	$(RM) destdir/dest.ManSuffix					@@\
	cat file.man | neqn | nroff -man >/tmp/file.man  		@@\
	$(INSTALL) -c $(INSTMANFLAGS) /tmp/file.man destdir/dest.ManSuffix @@\
	$(RM) /tmp/file.man

#define InstallMultipleMan(list,dest)                                   @@\
install.man:: list                                                      @@\
	@case '${MFLAGS}' in *[i]*) set +e;; esac; \                    @@\
	for i in list; do \                                             @@\
		(set -x; \						@@\
		$(RM) dest/$$i; \					@@\
		cat $$i | neqn | nroff -man >/tmp/$$i; \  		@@\
		$(INSTALL) -c $(INSTMANFLAGS) /tmp/$$i dest/$$i; \	@@\
		$(RM) /tmp/$$i); \					@@\
	done

/* If you have trouble with make bombing out in Xlib, try uncommenting this. */
/* You will not get dependencies as a result, but better than nothing. */
/* #define DependTarget3(srcs1,srcs2,srcs3) */

#endif /* i386SVR3Architecture */


/*
 * V/386 Release 4.0
 */
#if defined(i386SVR4Architecture)

#define SystemV4		YES

/* No vendor defines required for SVR4 */

#define OSName			Unix System V/386 Release 4.0
#define OSMajorVersion		4
#define OSMinorVersion		0
#define OSRelease		-DSVR4 -DSYSV386
#define OSDefines		/**/
#define OSVendor		(Generic)

#ifndef HasSharedLibraries
#define HasSharedLibraries	YES
#endif

#if HasGcc
# define CcCmd			gcc
# define AnsiCCOptions		-ansi
# if HasGcc2
#  define DefaultCCOptions	Gcc2MOption -fpcc-struct-return -Di386 
#  define OptimizedCDebugFlags	-O2
# else
#  define DefaultCCOptions	-fpcc-struct-return -fstrength-reduce -Di386
#  if HasSharedLibraries
#   define LibraryCcCmd		/bin/cc
#   define LibraryAnsiCCOptions	-Xc
#   define LibraryCCOptions	-Di386 -Dasm=__asm
#  endif
# endif
#else
# define CcCmd			/bin/cc
# define AnsiCCOptions		-Xc
# define DefaultCCOptions	-Di386 -Dasm=__asm
#endif

#define ServerExtraDefines	GccGasOption -DXDMCP MallocFlags

#if SCOLocalConnSysv4
# define Acp			-DSVR4_ACP
#else
# define Acp			/**/
#endif

#if ClientLocalConnSysv4
# define CLocal			-DCLIENTS_LOCALCONN
#else
# define CLocal			/**/
#endif

#define ConnectionFlags	    -DUNIXCONN -DTCPCONN -DSERVER_LOCALCONN Acp CLocal
#define NeedBerklib	    YES
#if UseInstalled
#define ExtraLibraries	    -lsocket -lnsl $(XBSDLIB)
#endif

#include <sv4Lib.rules>

#endif /* i386SVR4Architecture */

#if defined(i386BsdArchitecture)

/*
 * 386BSD
 */

#define i386Bsd			YES

#define OSName			386BSD
#define OSMajorVersion		4
#define OSMinorVersion		3
#define OSRelease		/* nothing */
#define OSDefines		/* nothing */
#define OSVendor		/* nothing */

#define CppCmd			/usr/libexec/cpp

#if HasGcc
# define CcCmd			gcc
# define AnsiCCOptions		/**/
# if HasGcc2
#  define DefaultCCOptions	Gcc2MOption
#  define OptimizedCDebugFlags	-O2
#  define LibraryCCOptions	Gcc2MOption
# else
#  define DefaultCCOptions	/**/
#  define OptimizedCDebugFlags	-O -fstrength-reduce
#  define LibraryCCOptions	/**/
# endif
#endif

#define ServerExtraDefines	GccGasOption -DXDMCP MallocFlags

#define HasVoidSignalReturn	YES
#define AvoidNullMakeCommand	YES
#define HasPutenv		YES
#define UnalignedReferencesAllowed	YES

#if OSMajorVersion >= 4 && OSMinorVersion >= 3
# define SetTtyGroup		YES
#endif

/* These are used by xdm and can be overriden in the xdm config file */

#define DefaultSystemPath	/sbin:/usr/sbin:/bin:/usr/bin:$(BINDIR)
#define DefaultUserPath		:/bin:/usr/bin:/usr/local/bin:$(BINDIR)

/*
 * Rules to install pre-formatted man pages.
 */

#define ManSourcePath		$(MANPATH)/cat

#define InstallManPageLong(file,destdir,dest)                                @@\
install.man:: file.man                                                       @@\
	MakeDir($(DESTDIR)destdir)                                           @@\
	$(RM) $(DESTDIR)destdir/dest.0                                       @@\
	cat file.man | eqn | tbl | nroff -man >/tmp/file.man                 @@\
	$(INSTALL) -c $(INSTMANFLAGS) /tmp/file.man $(DESTDIR)destdir/dest.0 @@\
	$(RM) /tmp/file.man

#define InstallManPageAliases(file,destdir,aliases)                     @@\
install.man::                                                           @@\
	@for i in aliases; do (cd $(DESTDIR)destdir; set -x; \          @@\
        $(RM) $$i.0; \                                                  @@\
	$(LN) file.0 $$i.0); \                                          @@\
	done


#endif /* i386BsdArchitecture */


#if defined(i386MachArchitecture)

/*
 * Mach i386
 */

#define i386Mach		YES

#define OSName			Mach i386
#define OSMajorVersion		2
#define OSMinorVersion		6
#define OSRelease		/* nothing */
#define OSDefines		-DMACH386 -DNOSTDHDRS -DX_NOT_STDC_ENV -DNOT_POSIX
#define OSVendor		(CMU)

#if HasGcc
# define CcCmd			gcc
# define AnsiCCOptions		-traditional
# if HasGcc2
#  define DefaultCCOptions	Gcc2MOption -fwritable-strings 
#  define OptimizedCDebugFlags	-O2
#  define LibraryCCOptions	Gcc2MOption
# else
#  define DefaultCCOptions	-fwritable-strings
#  define OptimizedCDebugFlags	-O -fstrength-reduce
#  define LibraryCCOptions	/* nothing */
# endif
#endif

#define ServerExtraDefines	GccGasOption -DXDMCP MallocFlags

#define SetTtyGroup		YES
#define HasBsearch		NO
#define HasVoidSignalReturn	NO
#define DirFailPrefix		-
#define AvoidNullMakeCommand	YES

#endif /* i386MachArchitecture */

/*
 * linux
 */
#if defined(LinuxArchitecture)

#define OSName			Linux
#define OSVendor		(Usenet)
#define OSMajorVersion		9704	/* 97pl4 but as int */
#define OSMinorVersion		0
#define OSRelease		-Dlinux
#define OSDefines		-D_POSIX_SOURCE -D_BSD_SOURCE -D_GNU_SOURCE

#define SystemV			NO
#define AvoidNullMakeCommand	YES

#ifdef UseInstalled
# define InstallCmd		install
#else
# define InstallCmd		sh $(SCRIPTSRC)/install.sh
#endif
#define LinuxNeedsInstall	YES
#define ConnectionFlags		-DUNIXCONN -DTCPCONN
#define DefaultFontPath		$(FONTDIR)/misc/
#define YaccCmd			bison -y
#define LexCmd			flex

#if HasGcc
# define CcCmd			gcc -fwritable-strings -fomit-frame-pointer
# define CppCmd			/lib/cpp
# define LdCombineFlags		-r
# define DefaultCCOptions	Gcc2MOption -DNO_ASM
# define LibraryCCOptions	Gcc2MOption -DNO_ASM
# define OptimizedCDebugFlags	-O2
# define ServerExtraDefines	GccGasOption -DXDMCP MallocFlags
# define Malloc0ReturnsNull	YES
# define NeedConstPrototoypes	YES
# define NeedFunctionPrototypes	YES
# define NeedNestedPrototypes	YES
# define NeedVarargsPrototypes	YES
# define NeedWidePrototypes	NO
#endif /* HasGcc */

#define HasPutenv		YES
#define UseCCMakeDepend		YES

/*
 * cross compilation for hlu
 */
#ifdef CROSS_COMPILE
#include <hlu.cf>
#endif /* CROSS_COMPILE */

#endif /* LinuxArchitecture */


#if !defined(UseInstalled) || X386LinkKit
#include <X386Conf.tmpl>
#endif

XCOMM operating system:  OSName OSVendor
