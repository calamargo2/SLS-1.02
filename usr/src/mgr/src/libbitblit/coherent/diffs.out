*** bit_blit.c	Sat Dec 26 10:55:14 1992
--- ../linux/bit_blit.c	Sun Nov  1 17:08:24 1992
***************
*** 149,155 ****
        while (height-- > 0)
        {
  #        ifdef NEED_ADJUST
!         Dst=IS_SCREEN(dest) ? adjust(dst,graph_mem) : dst;
          _do_mask(Dst, lmask, func);
          _do_blit(Dst+1, h_cnt_m1-1, func);
          _do_mask(Dst+h_cnt_m1, rmask, func);
--- 149,155 ----
        while (height-- > 0)
        {
  #        ifdef NEED_ADJUST
!         Dst=IS_SCREEN(dest) ? adjust(dst) : dst;
          _do_mask(Dst, lmask, func);
          _do_blit(Dst+1, h_cnt_m1-1, func);
          _do_mask(Dst+h_cnt_m1, rmask, func);
***************
*** 166,172 ****
        while (height-- > 0)
        {
  #        ifdef NEED_ADJUST
!         _do_mask(IS_SCREEN(dest) ? adjust(dst,graph_mem) : dst, lmask, func);
  #        else
          _do_mask(dst, lmask, func);
  #        endif
--- 166,172 ----
        while (height-- > 0)
        {
  #        ifdef NEED_ADJUST
!         _do_mask(IS_SCREEN(dest) ? adjust(dst) : dst, lmask, func);
  #        else
          _do_mask(dst, lmask, func);
  #        endif
***************
*** 205,212 ****
          while (height-- > 0) 
          {
  #          ifdef NEED_ADJUST
!           Dst=(IS_SCREEN(dest) ? adjust(dst,graph_mem) : dst);
!           Src=(IS_SCREEN(source) ? adjust(src,graph_mem) : src);
            _do_2mask(Dst, Src, lmask, func, shift);
            _do_2blit(Dst+1, Src+1, h_cnt_m1-1, func, shift);
            _do_2mask(Dst+h_cnt_m1, Src+h_cnt_m1, rmask, func, shift);
--- 205,212 ----
          while (height-- > 0) 
          {
  #          ifdef NEED_ADJUST
!           Dst=(IS_SCREEN(dest) ? adjust(dst) : dst);
!           Src=(IS_SCREEN(source) ? adjust(src) : src);
            _do_2mask(Dst, Src, lmask, func, shift);
            _do_2blit(Dst+1, Src+1, h_cnt_m1-1, func, shift);
            _do_2mask(Dst+h_cnt_m1, Src+h_cnt_m1, rmask, func, shift);
***************
*** 226,233 ****
          while (height-- > 0) 
          {
  #          ifdef NEED_ADJUST
!           Dst=(IS_SCREEN(dest) ? adjust(dst,graph_mem) : dst);
!           Src=(IS_SCREEN(source) ? adjust(src,graph_mem) : src);
            _do_2mask(Dst, Src, rmask, func, shift);
            _do_2blit(Dst-1, Src-1, h_cnt-2, func, shift);
            _do_2mask(Dst-h_cnt+1, Src-h_cnt+1, lmask, func, shift);
--- 226,233 ----
          while (height-- > 0) 
          {
  #          ifdef NEED_ADJUST
!           Dst=(IS_SCREEN(dest) ? adjust(dst) : dst);
!           Src=(IS_SCREEN(source) ? adjust(src) : src);
            _do_2mask(Dst, Src, rmask, func, shift);
            _do_2blit(Dst-1, Src-1, h_cnt-2, func, shift);
            _do_2mask(Dst-h_cnt+1, Src-h_cnt+1, lmask, func, shift);
***************
*** 252,258 ****
        while (height-- > 0) 
        {
  #        ifdef NEED_ADJUST
!         _do_2mask(IS_SCREEN(dest) ? adjust(dst,graph_mem) : dst, IS_SCREEN(source) ? adjust(src,graph_mem) : src, lmask, func, shift);
  #        else
          _do_2mask(dst, src, lmask, func, shift);
  #        endif
--- 252,258 ----
        while (height-- > 0) 
        {
  #        ifdef NEED_ADJUST
!         _do_2mask(IS_SCREEN(dest) ? adjust(dst) : dst, IS_SCREEN(source) ? adjust(src) : src, lmask, func, shift);
  #        else
          _do_2mask(dst, src, lmask, func, shift);
  #        endif
*** bit_line.c	Sat Dec 26 10:55:15 1992
--- ../linux/bit_line.c	Sun Nov  1 17:13:10 1992
***************
*** 97,103 ****
  
    dst = y0 * (BIT_LINE(dest)) + (x0 >> 3) + (char*)(BIT_DATA(dest));
  #ifdef NEED_ADJUST
!   Dst=(IS_SCREEN(dest) ? adjust(dst,graph_mem) : dst);
  #endif
    bit = (0x80 >> (x0 & 7));
  
--- 97,103 ----
  
    dst = y0 * (BIT_LINE(dest)) + (x0 >> 3) + (char*)(BIT_DATA(dest));
  #ifdef NEED_ADJUST
!   Dst=(IS_SCREEN(dest) ? adjust(dst) : dst);
  #endif
    bit = (0x80 >> (x0 & 7));
  
***************
*** 120,126 ****
  		if (r < 0) {
  			dst += d_incr;
  #ifdef NEED_ADJUST
!                         Dst=(IS_SCREEN(dest) ? adjust(dst,graph_mem) : dst);
  #endif
  			r += rincr;
  		} else
--- 120,126 ----
  		if (r < 0) {
  			dst += d_incr;
  #ifdef NEED_ADJUST
!                         Dst=(IS_SCREEN(dest) ? adjust(dst) : dst);
  #endif
  			r += rincr;
  		} else
***************
*** 134,140 ****
  		_do_mask(Dst, bit, func);
  		dst += d_incr;
  #ifdef NEED_ADJUST
!                 Dst=(IS_SCREEN(dest) ? adjust(dst,graph_mem) : dst);
  #endif
  		if (r < 0) {
  			if ((bit >>= 1) == 0) {
--- 134,140 ----
  		_do_mask(Dst, bit, func);
  		dst += d_incr;
  #ifdef NEED_ADJUST
!                 Dst=(IS_SCREEN(dest) ? adjust(dst) : dst);
  #endif
  		if (r < 0) {
  			if ((bit >>= 1) == 0) {
*** bit_on.c	Sat Dec 26 10:55:15 1992
--- ../linux/bit_on.c	Thu Aug 13 17:16:28 1992
***************
*** 24,30 ****
  		return  0;
  	ip = (char *) BIT_DATA( bp ) + y * BIT_LINE(bp) + (x >> 3);
  #ifdef NEED_ADJUST
! 	return  ((IS_SCREEN(bp) ? *(adjust(ip,graph_mem)) : *ip) & mask) != 0;
  #else
  	return  (*ip & mask) != 0;
  #endif
--- 24,30 ----
  		return  0;
  	ip = (char *) BIT_DATA( bp ) + y * BIT_LINE(bp) + (x >> 3);
  #ifdef NEED_ADJUST
! 	return  ((IS_SCREEN(bp) ? *(adjust(ip)) : *ip) & mask) != 0;
  #else
  	return  (*ip & mask) != 0;
  #endif
*** bit_point.c	Sat Dec 26 10:55:15 1992
--- ../linux/bit_point.c	Sun Nov  1 17:15:34 1992
***************
*** 25,33 ****
  #endif
    dst = (char *) (BIT_DATA(map)) + y * BIT_LINE(map) + (x >> 3);
  #ifdef NEED_ADJUST
!   _do_mask(IS_SCREEN(map) ? adjust(dst,graph_mem) : dst, 0x80 >> (x & 7), OPCODE(func));
    /* untested */
!   if (IS_SCREEN(map)) dst=adjust(dst,graph_mem);
    return ((*dst)&(0x80>>(x&7)));
  #else
    _do_mask(dst, 0x80 >> (x & 7), OPCODE(func));
--- 25,33 ----
  #endif
    dst = (char *) (BIT_DATA(map)) + y * BIT_LINE(map) + (x >> 3);
  #ifdef NEED_ADJUST
!   _do_mask(IS_SCREEN(map) ? adjust(dst) : dst, 0x80 >> (x & 7), OPCODE(func));
    /* untested */
!   if (IS_SCREEN(map)) dst=adjust(dst);
    return ((*dst)&(0x80>>(x&7)));
  #else
    _do_mask(dst, 0x80 >> (x & 7), OPCODE(func));
*** bit_size.c	Sat Dec 26 10:55:15 1992
--- ../linux/bit_size.c	Thu Aug 13 17:16:29 1992
***************
*** 1,7 ****
  #include "screen.h"
  
! int bit_size(wide,high,depth)
! int wide, high, depth;
  {
    return BIT_Size(wide,high,depth);
  }
--- 1,6 ----
  #include "screen.h"
  
! int bit_size(int wide, int high, int depth)
  {
    return BIT_Size(wide,high,depth);
  }
*** vga.c	Tue Dec 29 19:27:53 1992
--- ../linux/vga.c	Tue Oct 20 13:52:09 1992
***************
*** 1,20 ****
- /* modified for Coherent 4.0 by Harry C. Pulley, IV */
- 
  /*{{{}}}*/
  /*{{{  #includes*/
  #include <sys/types.h>
  #include <unistd.h>
  #include <fcntl.h>
  
- #ifndef COHERENT
  #include <linux/mman.h>
  #include <linux/mm.h>
  #include <linux/kd.h>
- #else
- extern int ioperm();
- extern char *mmap();
- #define PAGE_SIZE 4096
- #endif
  
  #include "bitblit.h"
  /*}}}  */
--- 1,12 ----
***************
*** 67,73 ****
  #define SETATT(x,y)	{port_in(IS1_R);port_out(x,ATT_IW),port_out(y,ATT_IW);}
  /*}}}  */
  
- #ifndef COHERENT
  /*{{{  port_out*/
  static void inline port_out(char value, unsigned short port)
  {
--- 59,64 ----
***************
*** 84,90 ****
  	return _v;
  }
  /*}}}  */
- #endif
  
  /*{{{  vga mode data*/
  struct mode_record {
--- 75,80 ----
***************
*** 130,137 ****
      }
    },
    {
!     "1024x768",1024,768,4,
      {
  #include "1024x768.h"
      }
    },
--- 120,133 ----
      }
    },
    {
!     "800x600",800,600,4,
      {
+ #include "800x600.h"
+     }
+   },
+   {
+     "1024x768",1024,768,4,
+     {
  #include "1024x768.h"
      }
    },
***************
*** 146,167 ****
  
  /*{{{  variables*/
  static struct mode_record *cur_mode;
  static char *graph_mem,*text_mem;
! #ifndef COHERENT
! int console_fd, mem_fd;
! #else
! int graphics_fd=NULL;
! #endif
  
  /* Save buffers */
- #ifdef VIDEO7
- char text_regs[60] = {
- #include "80x25.h"
- };
- #else
  static char text_regs[60];
- #endif
- 
  static char text_buf[TEXT_SIZE];   /* saved text mode memory */  
  static char font_buf1[FONT_SIZE];   /* saved font data        */
  static char font_buf2[FONT_SIZE];
--- 142,153 ----
  
  /*{{{  variables*/
  static struct mode_record *cur_mode;
+ static int mem_fd;
  static char *graph_mem,*text_mem;
! int console_fd;
  
  /* Save buffers */
  static char text_regs[60];
  static char text_buf[TEXT_SIZE];   /* saved text mode memory */  
  static char font_buf1[FONT_SIZE];   /* saved font data        */
  static char font_buf2[FONT_SIZE];
***************
*** 184,200 ****
  void screenoff(){  port_in(IS1_R);  port_out(0x00,ATT_IW);}
  /*}}}  */
  /*{{{  setplane*/
! void setplane(plane) int plane;{  SETSEQ(0x02,1<<plane);  SETGRA(0x04,plane);}
  /*}}}  */
  /*{{{  setrplane*/
! void setrplane(plane) int plane;{SETGRA(0x04,plane);}
  /*}}}  */
  /*{{{  setwplane*/
! void setwplane(plane) int plane;{SETSEQ(0x02,1<<plane);}
  /*}}}  */
  /*{{{  set_regs*/
! static int set_regs(regs)
! char regs[];
  {
      int i;
  
--- 170,185 ----
  void screenoff(){  port_in(IS1_R);  port_out(0x00,ATT_IW);}
  /*}}}  */
  /*{{{  setplane*/
! void setplane(int plane){  SETSEQ(0x02,1<<plane);  SETGRA(0x04,plane);}
  /*}}}  */
  /*{{{  setrplane*/
! void setrplane(int plane){SETGRA(0x04,plane);}
  /*}}}  */
  /*{{{  setwplane*/
! void setwplane(int plane){SETSEQ(0x02,1<<plane);}
  /*}}}  */
  /*{{{  set_regs*/
! static int set_regs(char regs[])
  {
      int i;
  
***************
*** 245,260 ****
  }
  /*}}}  */
  /*{{{  BIT_OFFSET*/
! int BIT_OFFSET(w) BITMAP *w;{ return (((BIT_WIDE(w)+BITS)&~BITS)*BIT_HIGH(w)>>3); }
  /*}}}  */
  /*{{{  BIT_SIZE*/
! int BIT_SIZE(m) BITMAP *m;{return BIT_Size(BIT_WIDE(m), BIT_HIGH(m), BIT_DEPTH(m)); }
  /*}}}  */
  /*{{{  BIT_Size*/
! int BIT_Size(wide,high,d) int wide, high, d;{return ((((d*wide+BITS)&~BITS)*high)>>3); }
  /*}}}  */
  /*{{{  BIT_LINE*/
! int BIT_LINE(x) BITMAP *x;{ 
  if (IS_SCREEN(x)) return ((((x)->primary->wide+BITS)&~BITS)>>LOGBITS);
  else return ((((x)->primary->depth*(x)->primary->wide+BITS)&~BITS)>>LOGBITS);
  }
--- 230,245 ----
  }
  /*}}}  */
  /*{{{  BIT_OFFSET*/
! int BIT_OFFSET(BITMAP *w){ return (((BIT_WIDE(w)+BITS)&~BITS)*BIT_HIGH(w)>>3); }
  /*}}}  */
  /*{{{  BIT_SIZE*/
! int BIT_SIZE(BITMAP *m){return BIT_Size(BIT_WIDE(m), BIT_HIGH(m), BIT_DEPTH(m)); }
  /*}}}  */
  /*{{{  BIT_Size*/
! int BIT_Size(int wide,int high,int d){return ((((d*wide+BITS)&~BITS)*high)>>3); }
  /*}}}  */
  /*{{{  BIT_LINE*/
! int BIT_LINE(BITMAP *x){ 
  if (IS_SCREEN(x)) return ((((x)->primary->wide+BITS)&~BITS)>>LOGBITS);
  else return ((((x)->primary->depth*(x)->primary->wide+BITS)&~BITS)>>LOGBITS);
  }
***************
*** 265,276 ****
  {
    int i;
  
- #ifndef COHERENT
    ioctl(console_fd,KDSETMODE,KD_GRAPHICS);
- #endif
- 
    screenoff();
- #ifndef VIDEO7
    for (i = 0; i < CRT_C; i++) {
      port_out(i, CRT_I); 
      text_regs[CRT+i] = port_in(CRT_D); 
--- 250,257 ----
***************
*** 289,295 ****
      text_regs[SEQ+i] = port_in(SEQ_D); 
    }
    text_regs[MIS] = port_in(MIS_R); 
- #endif
    memcpy(text_buf,text_mem,TEXT_SIZE);
    set_regs(cur_mode->reg);
    /* save font data */
--- 270,275 ----
***************
*** 306,312 ****
    SETGRA(0x03,0x00); /* Replace/No Rotate */
    write_mode(0x00);  /* Set write mode/read mode 0 */
    SETGRA(0x08,0xff); /* No bit masking */
!   setmapmask(0x0f);  /* Doesn't really matter */
    screenon();
  }
  /*}}}  */
--- 286,292 ----
    SETGRA(0x03,0x00); /* Replace/No Rotate */
    write_mode(0x00);  /* Set write mode/read mode 0 */
    SETGRA(0x08,0xff); /* No bit masking */
!   setmapmask(0x0f);  /* Doens't really matter */
    screenon();
  }
  /*}}}  */
***************
*** 337,346 ****
    /* restore contents of text mode memory */
    memcpy(text_mem, text_buf, TEXT_SIZE);
    screenon();
- #ifndef COHERENT
    ioctl(console_fd,KDSETMODE,KD_TEXT);
- #endif
-   close(graphics_fd);
  }  
  /*}}}  */
  /*{{{  char *initscreen(name)*/
--- 317,323 ----
***************
*** 349,368 ****
  {
      struct mode_record *p;
    
- #ifndef COHERENT
      console_fd = open("/dev/tty0",O_RDWR);
      if (console_fd == -1) {
        printf("init: can't open /dev/tty0 (console)\n");
        exit(1);
      }
- #else
-     graphics_fd = open("/dev/bm",O_RDWR);
-     if (graphics_fd == -1)
-     {
-       printf("init: can't open /dev/bm (bitmapped device)\n");
-       exit(1);
-     }
- #endif
    		    
      cur_mode = mode_regs;	/* Figure out what mode we want. */
      for (p = mode_regs; p->name; p++) {
--- 326,336 ----
***************
*** 373,409 ****
      }
      /* Set permissions and memory maps */
    
- #ifndef COHERENT
      /* get I/O permissions for VGA registers */
!     if (ioperm(CRT_I, 1)) {
        printf("init: can't get I/O permissions \n");
        exit (-1);
      }
! #else
!     ioperm(CRT_I, 1);
! #endif
! 
!     ioperm(ATT_IW, 1);
!     ioperm(GRA_I,  1);
!     ioperm(SEQ_I,  1);
!     ioperm(PEL_IW, 1);
!     ioperm(CRT_D,  1);
!     ioperm(ATT_R,  1);
!     ioperm(GRA_D,  1);
!     ioperm(SEQ_D,  1);
!     ioperm(MIS_R,  1);
!     ioperm(MIS_W,  1);
!     ioperm(IS1_R,  1);
!     ioperm(PEL_D,  1);
! 
! #ifndef COHERENT
        /* open /dev/mem */
      if ((mem_fd = open("/dev/mem", O_RDWR) ) < 0) {
        printf("init: can't open /dev/mem \n");
        exit (-1);
      }
- #endif
- 
      /* mmap graphics memory */
      if (((cur_mode->width * cur_mode->height)>>3) <= GRAPH_SIZE) {
        if ((graph_mem = malloc(GRAPH_SIZE + (PAGE_SIZE-1))) == NULL) {
--- 341,369 ----
      }
      /* Set permissions and memory maps */
    
      /* get I/O permissions for VGA registers */
!     if (ioperm(CRT_I, 1, 1)) {
        printf("init: can't get I/O permissions \n");
        exit (-1);
      }
!     ioperm(ATT_IW, 1, 1);
!     ioperm(GRA_I,  1, 1);
!     ioperm(SEQ_I,  1, 1);
!     ioperm(PEL_IW, 1, 1);
!     ioperm(CRT_D,  1, 1);
!     ioperm(ATT_R,  1, 1);
!     ioperm(GRA_D,  1, 1);
!     ioperm(SEQ_D,  1, 1);
!     ioperm(MIS_R,  1, 1);
!     ioperm(MIS_W,  1, 1);
!     ioperm(IS1_R,  1, 1);
!     ioperm(PEL_D,  1, 1);
!   
        /* open /dev/mem */
      if ((mem_fd = open("/dev/mem", O_RDWR) ) < 0) {
        printf("init: can't open /dev/mem \n");
        exit (-1);
      }
      /* mmap graphics memory */
      if (((cur_mode->width * cur_mode->height)>>3) <= GRAPH_SIZE) {
        if ((graph_mem = malloc(GRAPH_SIZE + (PAGE_SIZE-1))) == NULL) {
***************
*** 412,437 ****
        }
        if ((unsigned long)graph_mem % PAGE_SIZE)
          graph_mem += PAGE_SIZE - ((unsigned long)graph_mem % PAGE_SIZE);
- 
- #ifndef COHERENT
        graph_mem = (unsigned char *)mmap((caddr_t)graph_mem, 
    				      GRAPH_SIZE,
    				      PROT_READ|PROT_WRITE,
    				      MAP_SHARED|MAP_FIXED,
    				      mem_fd, 
    				      GRAPH_BASE);
- #else
-      graph_mem = (unsigned char *)mmap(graph_mem,GRAPH_BASE,GRAPH_SIZE);
- #endif
- 
        if ((long)graph_mem < 0) {
          printf("init: mmap error \n");
          exit (-1);
        }
    
-       /* Change suggested by Vance Petree */
-       memset(graph_mem,0,GRAPH_SIZE);
- 
        /* mmap text memory */
        if ((text_mem = malloc(TEXT_SIZE + (PAGE_SIZE-1))) == NULL) {
          printf("init: allocation error \n");
--- 372,388 ----
***************
*** 439,456 ****
        }
        if ((unsigned long)text_mem % PAGE_SIZE)
          text_mem += PAGE_SIZE - ((unsigned long)text_mem % PAGE_SIZE);
- 
- #ifndef COHERENT
        text_mem = (unsigned char *)mmap((caddr_t)text_mem, 
    				     TEXT_SIZE,
    				     PROT_READ|PROT_WRITE,
    				     MAP_SHARED|MAP_FIXED,
    				     mem_fd, 
    				     TEXT_BASE);
- #else
-      text_mem = (unsigned char *)mmap(text_mem,TEXT_BASE,TEXT_SIZE);
- #endif
- 
        if ((long)text_mem < 0) {
          printf("init: mmap error \n");
          exit (-1);
--- 390,401 ----
***************
*** 464,489 ****
        }
        if ((unsigned long)graph_mem % PAGE_SIZE) 
          graph_mem += PAGE_SIZE - ((unsigned long)graph_mem % PAGE_SIZE);
- 
- #ifndef COHERENT
        graph_mem = (unsigned char *)mmap((caddr_t)graph_mem, 
    				      GRAPH_SIZE*2,
    				      PROT_READ|PROT_WRITE,
    				      MAP_SHARED|MAP_FIXED,
    				      mem_fd, 
    				      GRAPH_BASE);
- #else
-      graph_mem = (unsigned char *)mmap(graph_mem,GRAPH_BASE,GRAPH_SIZE*2);
- #endif
- 
        if ((long)graph_mem < 0) {
          printf("init: mmap error \n");
          exit (-1);
        }
- 
- /* HCPIV - note to self: why no malloc for text memory? Ask around; I don't 
-    have a Trident so I can't test this anyways. */
- 
        /* Initialize text_memory pointers */
        text_mem = graph_mem + (TEXT_BASE - GRAPH_BASE);
        /* Enable 128K mode for TVGA */
--- 409,424 ----
*** vga.h	Sat Dec 26 10:55:18 1992
--- ../linux/vga.h	Mon Sep 14 12:47:06 1992
***************
*** 12,22 ****
  #define BIT_Size(wide,high,depth) ((((depth*wide+BITS)&~BITS)*high)>>3)
  #define BIT_LINE(x) ((((x)->primary->depth*(x)->primary->wide+BITS)&~BITS)>>LOGBITS)
  
! int screen_width(/* void */);
! int screen_heigth(/* void */);
! int screen_depth(/* void */);
  
! void setplane(/* int plane */);
! void setmapmask(/* int mask */);
! void write_mode(/* int mode */);
  /*{{{}}}*/
--- 12,22 ----
  #define BIT_Size(wide,high,depth) ((((depth*wide+BITS)&~BITS)*high)>>3)
  #define BIT_LINE(x) ((((x)->primary->depth*(x)->primary->wide+BITS)&~BITS)>>LOGBITS)
  
! int screen_width(void);
! int screen_heigth(void);
! int screen_depth(void);
  
! void setplane(int plane);
! void setmapmask(int mask);
! void write_mode(int mode);
  /*{{{}}}*/
*** hgc.c	Sat Dec 26 10:55:16 1992
--- ../linux/hgc.c	Thu Aug 13 17:16:29 1992
***************
*** 1,18 ****
- /* modified for Coherent 4.0 by Harry C. Pulley, IV */
- 
  /*{{{}}}*/
  /*{{{  #includes*/
- 
- #ifndef COHERENT
  #include <sys/mman.h>
  #include <sys/kd.h>
- #else
- extern int ioperm();
- extern char *mmap();
- #define PAGE_SIZE 4096
- #define getpagesize() PAGE_SIZE
- #endif
- 
  #include <unistd.h>
  #include <fcntl.h>
  #include <stdlib.h>
--- 1,7 ----
***************
*** 42,48 ****
  #define GRAPH_SIZE 0x8000
  /*}}}  */
  
- #ifndef COHERENT
  /*{{{  port access*/
  static void inline port_out(char value, unsigned short port)
  {
--- 31,36 ----
***************
*** 58,83 ****
  		:"=a" (_v):"d" ((unsigned short) port));
  	return _v;
  }
- #endif
- 
  /*}}}  */
  /*{{{  variables*/
- #ifndef COHERENT
  int console_fd;
  static int mem_fd;
- #else
- int graphics_fd;
- #endif
  DATA *graph_mem;
  unsigned int VideoSeg=0;
  /*}}}  */
  
  /*{{{  initscreen*/
! DATA *initscreen(name)
! char *name;
  {
    /*{{{  open console*/
- #ifndef COHERENT
    console_fd = open("/dev/console",O_RDWR);
    if (console_fd == -1) {
      write(2,"Can't open /dev/console\n",24);
--- 46,63 ----
  		:"=a" (_v):"d" ((unsigned short) port));
  	return _v;
  }
  /*}}}  */
  /*{{{  variables*/
  int console_fd;
  static int mem_fd;
  DATA *graph_mem;
  unsigned int VideoSeg=0;
  /*}}}  */
  
  /*{{{  initscreen*/
! DATA *initscreen(char *name)
  {
    /*{{{  open console*/
    console_fd = open("/dev/console",O_RDWR);
    if (console_fd == -1) {
      write(2,"Can't open /dev/console\n",24);
***************
*** 89,153 ****
      write(2,"Can't open /dev/mem\n",20);
      return((DATA*)0);
    }
- #else
-   graphics_fd = open("/dev/bm",O_RDWR);
-   if (graphics_fd == -1)
-   {
-     write(2,"Can't open /dev/bm\n",19);
-     return((DATA*)0);
-   }
- #endif
- 
    /*}}}  */
    /*{{{  mmap screen*/
    if ((graph_mem = malloc(GRAPH_SIZE + (getpagesize()-1))) == NULL) {
      write(2,"Can't alloc memory for screen\n",30);
      return((DATA*)0);
    }
- 
    if ((unsigned long)graph_mem % getpagesize()) graph_mem += getpagesize() - ((unsigned long)graph_mem % getpagesize());
- 
- #ifndef COHERENT
    graph_mem = (DATA*)mmap((caddr_t)graph_mem,
      				    GRAPH_SIZE,
      				    PROT_READ|PROT_WRITE,
      				    MAP_SHARED|MAP_FIXED,
      				    mem_fd,
      				    GRAPH_MODE1_BASE);
- #else
-   graph_mem = (DATA*)mmap(graph_mem,GRAPH_MODE0_BASE,GRAPH_SIZE);
- #endif
- 
    if ((long)graph_mem < 0) {
      write(2,"Can't map screen to memory\n",27);
      return((DATA*)0);
    }
    /*}}}  */
- 
-   /* change suggested by Grant Edwards and Vance Petree*/
-   sleep(1);
- 
-   /* change suggested by Vance Petree */
-   memset(graph_mem,0,GRAPH_SIZE);
- 
- #ifndef COHERENT
    /*{{{  get I/O permissions for HGC registers*/
!   if (ioperm(INDEX_REG, 1)) {
      write(2,"Can't get I/O permissions\n",26);
      return((DATA*)0);
    }
! #else
!   ioperm(INDEX_REG, 1);
! #endif
!   ioperm(DATA_REG, 1);
!   ioperm(MODE_REG,  1);
!   ioperm(CONFIG_REG,  1);
    /*}}}  */
    return graph_mem;
  }
  /*}}}  */
  /*{{{  setscreen*/
! void setscreen()
  {
    /*{{{  variables*/
    static char grfval[12]={0x35,0x2d,0x2e,0x7,0x5b,0x02,0x57,0x57,0x2,0x3,0x0,0x0};
--- 69,106 ----
      write(2,"Can't open /dev/mem\n",20);
      return((DATA*)0);
    }
    /*}}}  */
    /*{{{  mmap screen*/
    if ((graph_mem = malloc(GRAPH_SIZE + (getpagesize()-1))) == NULL) {
      write(2,"Can't alloc memory for screen\n",30);
      return((DATA*)0);
    }
    if ((unsigned long)graph_mem % getpagesize()) graph_mem += getpagesize() - ((unsigned long)graph_mem % getpagesize());
    graph_mem = (DATA*)mmap((caddr_t)graph_mem,
      				    GRAPH_SIZE,
      				    PROT_READ|PROT_WRITE,
      				    MAP_SHARED|MAP_FIXED,
      				    mem_fd,
      				    GRAPH_MODE1_BASE);
    if ((long)graph_mem < 0) {
      write(2,"Can't map screen to memory\n",27);
      return((DATA*)0);
    }
    /*}}}  */
    /*{{{  get I/O permissions for HGC registers*/
!   if (ioperm(INDEX_REG, 1, 1)) {
      write(2,"Can't get I/O permissions\n",26);
      return((DATA*)0);
    }
!   ioperm(DATA_REG, 1, 1);
!   ioperm(MODE_REG,  1, 1);
!   ioperm(CONFIG_REG,  1, 1);
    /*}}}  */
    return graph_mem;
  }
  /*}}}  */
  /*{{{  setscreen*/
! void setscreen(void)
  {
    /*{{{  variables*/
    static char grfval[12]={0x35,0x2d,0x2e,0x7,0x5b,0x02,0x57,0x57,0x2,0x3,0x0,0x0};
***************
*** 155,163 ****
    /*}}}  */
  
    /*{{{  block vc*/
- #ifndef COHERENT
    ioctl(console_fd,KDSETMODE,KD_GRAPHICS);
- #endif
    /*}}}  */
    /*{{{  program 6845 for graphics mode*/
    port_out(GRAPH_MODE1,MODE_REG);
--- 108,114 ----
***************
*** 187,194 ****
    port_out(TEXT_CONF,CONFIG_REG);
    port_out(TEXT_MODE|ACTIVE_MODE,MODE_REG);
    /*}}}  */
- #ifndef COHERENT
    ioctl(console_fd,KDSETMODE,KD_TEXT);
- #endif
  }
  /*}}}  */
--- 138,143 ----
*** hgc.h	Sat Dec 26 10:55:16 1992
--- ../linux/hgc.h	Mon Sep 14 12:46:56 1992
***************
*** 16,22 ****
  #define screen_height() 348
  #define screen_depth() 1
  
! DATA *initscreen(/* char* */);
  void setscreen();
  void resetscreen();
  
--- 16,22 ----
  #define screen_height() 348
  #define screen_depth() 1
  
! DATA *initscreen(char*);
  void setscreen();
  void resetscreen();
  
***************
*** 27,35 ****
   * From: Chi-Ting Lam <chiting@u.washington.edu>
   */
  
- #ifdef COHERENT
- extern DATA *adjust();
- #else
  static DATA inline *adjust(p) DATA *p;
  {
    register DATA *p1 asm("eax");
--- 27,32 ----
***************
*** 66,69 ****
  
    return p1;
  }
- #endif
--- 63,65 ----
