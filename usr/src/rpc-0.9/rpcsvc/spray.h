/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _SPRAY_H_RPCGEN
#define _SPRAY_H_RPCGEN

#include <rpc/rpc.h>

/*
 * Sun RPC is a product of Sun Microsystems, Inc. and is provided for
 * unrestricted use provided that this legend is included on all tape
 * media and as a part of the software program in whole or part.  Users
 * may copy or modify Sun RPC without charge, but are not authorized
 * to license or distribute it to anyone else except as part of a product or
 * program developed by the user or with the express written consent of
 * Sun Microsystems, Inc.
 *
 * SUN RPC IS PROVIDED AS IS WITH NO WARRANTIES OF ANY KIND INCLUDING THE
 * WARRANTIES OF DESIGN, MERCHANTIBILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE OR TRADE PRACTICE.
 *
 * Sun RPC is provided with no support and without any obligation on the
 * part of Sun Microsystems, Inc. to assist in its use, correction,
 * modification or enhancement.
 *
 * SUN MICROSYSTEMS, INC. SHALL HAVE NO LIABILITY WITH RESPECT TO THE
 * INFRINGEMENT OF COPYRIGHTS, TRADE SECRETS OR ANY PATENTS BY SUN RPC
 * OR ANY PART THEREOF.
 *
 * In no event will Sun Microsystems, Inc. be liable for any lost revenue
 * or profits or other special, indirect and consequential damages, even if
 * Sun has been advised of the possibility of such damages.
 *
 * Sun Microsystems, Inc.
 * 2550 Garcia Avenue
 * Mountain View, California  94043
 */
/*
 * Copyright (c) 1986, 1990 by Sun Microsystems, Inc.
 */

/* from @(#)spray.x	1.6 91/03/11 TIRPC 1.0 */


#ifndef _rpcsvc_spray_h
#define _rpcsvc_spray_h

#define SPRAYMAX 8845

struct spraytimeval {
	u_int sec;
	u_int usec;
};
typedef struct spraytimeval spraytimeval;
#ifdef __cplusplus 
extern "C" bool_t xdr_spraytimeval(XDR *, spraytimeval*);
#elif __STDC__ 
extern  bool_t xdr_spraytimeval(XDR *, spraytimeval*);
#else /* Old Style C */ 
bool_t xdr_spraytimeval();
#endif /* Old Style C */ 


struct spraycumul {
	u_int counter;
	spraytimeval clock;
};
typedef struct spraycumul spraycumul;
#ifdef __cplusplus 
extern "C" bool_t xdr_spraycumul(XDR *, spraycumul*);
#elif __STDC__ 
extern  bool_t xdr_spraycumul(XDR *, spraycumul*);
#else /* Old Style C */ 
bool_t xdr_spraycumul();
#endif /* Old Style C */ 


typedef struct {
	u_int sprayarr_len;
	char *sprayarr_val;
} sprayarr;
#ifdef __cplusplus 
extern "C" bool_t xdr_sprayarr(XDR *, sprayarr*);
#elif __STDC__ 
extern  bool_t xdr_sprayarr(XDR *, sprayarr*);
#else /* Old Style C */ 
bool_t xdr_sprayarr();
#endif /* Old Style C */ 


#endif /* !_rpcsvc_spray_h */

#define SPRAYPROG ((u_long)100012)
#define SPRAYVERS ((u_long)1)

#ifdef __cplusplus
#define SPRAYPROC_SPRAY ((u_long)1)
extern "C" void * sprayproc_spray_1(sprayarr *, CLIENT *);
extern "C" void * sprayproc_spray_1_svc(sprayarr *, struct svc_req *);
#define SPRAYPROC_GET ((u_long)2)
extern "C" spraycumul * sprayproc_get_1(void *, CLIENT *);
extern "C" spraycumul * sprayproc_get_1_svc(void *, struct svc_req *);
#define SPRAYPROC_CLEAR ((u_long)3)
extern "C" void * sprayproc_clear_1(void *, CLIENT *);
extern "C" void * sprayproc_clear_1_svc(void *, struct svc_req *);

#elif __STDC__
#define SPRAYPROC_SPRAY ((u_long)1)
extern  void * sprayproc_spray_1(sprayarr *, CLIENT *);
extern  void * sprayproc_spray_1_svc(sprayarr *, struct svc_req *);
#define SPRAYPROC_GET ((u_long)2)
extern  spraycumul * sprayproc_get_1(void *, CLIENT *);
extern  spraycumul * sprayproc_get_1_svc(void *, struct svc_req *);
#define SPRAYPROC_CLEAR ((u_long)3)
extern  void * sprayproc_clear_1(void *, CLIENT *);
extern  void * sprayproc_clear_1_svc(void *, struct svc_req *);

#else /* Old Style C */ 
#define SPRAYPROC_SPRAY ((u_long)1)
extern  void * sprayproc_spray_1();
extern  void * sprayproc_spray_1_svc();
#define SPRAYPROC_GET ((u_long)2)
extern  spraycumul * sprayproc_get_1();
extern  spraycumul * sprayproc_get_1_svc();
#define SPRAYPROC_CLEAR ((u_long)3)
extern  void * sprayproc_clear_1();
extern  void * sprayproc_clear_1_svc();
#endif /* Old Style C */ 

#endif /* !_SPRAY_H_RPCGEN */
