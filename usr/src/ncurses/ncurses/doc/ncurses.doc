


NCURSES(3)					     NCURSES(3)


NAME
       ncurses - terminal-independent screen management package

SYNOPSIS
       #include <ncurses.h>

       cc [ flags ] files -lncurses [ libraries ]

DESCRIPTION
       These  routines give the user a method of updating screens
       with reasonable optimization  and  terminal  independence.
       They  keep  an  image  of the current screen, and the user
       sets up an image of a new one.  Then  the  refresh()  call
       tells  the  routines  to make the current screen look like
       the new one.  In order to  initialize  the  routines,  the
       routine	initscr()  must be called before any of the other
       routines that deal with windows and screens are used.  The
       routine endwin() should be called before exiting.

SEE ALSO
       The Curses Reference Manual , Curtis Pavel
       terminfo(5)

AUTHOR
       Pavel Curtis
       Modified for Linux by Zeyd M. Ben-Halim
       zmbenhal@netcom.com

FUNCTIONS
       addch(ch)		     add a character to stdscr
       addstr(str)		   add a string to stdscr
       attroff(at)		   turn off video attributes on stdscr
       attron(at)		    turn on video attributes on stdscr
       attrset(at)		   set video attributes on stdscr
       baudrate()		    return baudrate of current terminal
       beep()			sound audible bell
       border(ls,rs,ts,bs,tl,tr,bl,br) draw a border around stdscr
       box(win,vert,hor)	     draw a box around a window
       can_change_color()	    can we change colors
       cbreak()			set cbreak mode
       clear()			clear stdscr
       clearok(scr,f)		set clear flag for scr
       clrtobot()		    clear to bottom on stdscr
       clrtoeol()		    clear to end of line on stdscr
       color_content(c,r,g,b)	a no-op
       crmode()			set cbreak mode
       delch()			delete a character
       deleteln()		    delete a line
       delwin(win)		   delete win
       doupdate()		    update the physical screen
       echo()			set echo mode
       endwin()			end window modes
       erase()			erase stdscr
       erasechar()		   return erase character of current terminal



								1





NCURSES(3)					     NCURSES(3)


       fixterm()		     set terminal into program mode
       flash()			execute visible bell
       flushinp()		    flush outstanding input on current terminal
       getch()			get a char through stdscr
       getcap(name)		  get terminal capability name
       getstr(str)		   get a string through stdscr
       gettmode()		    no-op
       getyx(win,y,x)		get (y,x) coordinates
       hascolors()		   are colors supported
       hline(ch, n)		  draw a horizontal line in stdscr
       idlok(win,flag)		enable insert/delete lines operations
       inch()			get char at current (y,x) coordinates
       initscr()		     initialize screens
       init_color(color, r,g,b)	a no-op
       init_pair(pair,f,b)	   initialize a color pair
       insch(c)			insert a char
       insertln()		    insert a line
       keypad(win,flag)		enable keypad-sequence mapping
       killchar()		    return kill character of current terminal
       leaveok(win,boolf)	    set leave flag for win
       longname(termbuf,name)	get long name from termbuf
       meta(win,flag)		enable use of the `meta' key
       move(y,x)		     move to (y,x) on stdscr
       mvcur(lasty,lastx,newy,newx)  actually move cursor
       newterm(type,fp)		initialise a new terminal
       newwin(lines,cols,begin_y,begin_x) create a new window
       nl()			  set newline mapping
       nocbreak()		    unset cbreak mode
       nocrmode()		    unset cbreak mode
       nodelay(win,flag)	     make getch() non-blocking
       noecho()			unset echo mode
       nonl()			unset newline mapping
       noraw()			unset raw mode
       overlay(win1,win2)	    overlay win1 on win2
       overwrite(win1,win2)	  overwrite win1 on top of win2
       pair_content(p,f,b)	   find back/foreground colors in pair
       printw(fmt,...)		printf on stdscr
       putp(string)		  tputs() with affcnt=1 and outc=putchar
       raw()			 set raw mode
       refresh()		     make current screen look like stdscr
       resetterm()		   set terminal into normal mode
       resetty()		     reset tty flags to stored value
       savetty()		     store current tty flags
       saveterm()		    save current state of tty
       scanw(fmt,...)		scanf through stdscr
       scroll(win)		   scroll win one line
       scrollok(win,boolf)	   set scroll flag
       setscrreg(top,bottom)	 set up scrolling region on stdscr
       setterm(name)		 set term variables for name
       set_term(new)		 change current terminal
       setupterm(term,fd,errret)     initialise terminal capabilities
       standend()		    end standout mode
       standout()		    start standout mode
       start_color()		 initialize color support



								2





NCURSES(3)					     NCURSES(3)


       subwin(win,lines,cols,begin_y,begin_x) create a subwindow
       touchwin(win)		 change all of win
       tparm(string,p1..p9)	  instantiate a parameterised string
       tputs(string,affcnt,outc)     process a capability string
       traceoff()		    turn off debugging output
       traceon()		     turn on debugging output
       unctrl(ch)		    printable version of ch
       vidattr(newmode)		set terminal's video attributes
       vidputs(newmode,outc)	 set video attributes into a function
       vline(ch,n)		   draw a vertical line win
       waddch(win,ch)		add char to win
       waddstr(win,str)		add string to win
       wattroff(win,at)		turn off video attributes on win
       wattron(win,at)		turn on video attributes on win
       wattrset(win,at)		set video attributes on win
       wborder(win,ls,rs,ts,bs,tl,tr,bl,br) draw a border around win
       wclear(win)		   clear win
       wclrtobot(win)		clear to bottom of win
       wclrtoeol(win)		clear to end of line on win
       wdelch(win,c)		 delete char from win
       wdeleteln(win)		delete line from win
       werase(win)		   erase win
       wgetch(win)		   get a char through win
       wgetstr(win,str)		get a string through win
       whline(win,ch,n)		draw a horizontal line in win
       winch(win)		    get char at current (y,x) in win
       winsch(win,c)		 insert char into win
       winsertln(win)		insert line into win
       wmove(win,y,x)		set current (y,x) co-ordinates on win
       wnoutrefresh(win)	     copy win to virtual screen
       wprintw(win,fmt,...)	  printf on win
       wrefresh(win)		 make screen look like win
       wscanw(win,fmt,...)	   scanf through win
       wsetscrreg(win,top,bottom)    set up scrolling region on win
       wstandend(win)		end standout mode on win
       wstandout(win)		start standout mode on win
       wvline(win,ch,n)		draw a vertical line in win




















								3


