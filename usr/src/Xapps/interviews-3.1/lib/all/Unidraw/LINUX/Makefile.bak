# Makefile generated by imake - do not edit!
# $XConsortium: imake.c,v 1.65 91/07/25 17:50:17 rws Exp $

# Read "InterViews/template" to understand how this Makefile was generated.
# Edit <InterViews/arch.def> to add support for a new platform.
# Edit <InterViews/iv-1.cf> to change platform-specific parameters.
# Edit <InterViews/local.def> to change site-specific parameters.
# Edit <Imakefile> to change actions that make should perform.

# architecture:  Linux

# $Header: /home/x_cvs/mit/config/x386.cf,v 1.59 1993/02/08 22:11:15 dawes Exp $
# platform:  $XConsortium: x386.cf,v 1.7 91/08/16 19:30:10 gildea Exp $

#  --------------------------------------------------------------------
#  X386Conf.tmpl  -- configuration parameters for X386
#  This file is automatically generated -- DO NOT EDIT
#  --------------------------------------------------------------------

         X386SRC = $(SERVERSRC)/ddx/x386
    VGADRIVERSRC = $(X386SRC)/vga256/drivers
   VGA2DRIVERSRC = $(X386SRC)/vga2/drivers
   HGA2DRIVERSRC = $(X386SRC)/hga2/drivers
     RENDERERSRC = $(FONTSRC)/lib/font
 RENDERERCONFOBJ = $(RENDERERSRC)/fontfile/rendererConf.o
RENDERERCONFSUBDIR = $(RENDERERSRC)/fontfile
         VGAOBJS =                    $(VGADRIVERSRC)/et4000/et4000.o                    $(VGADRIVERSRC)/et3000/et3000.o                    $(VGADRIVERSRC)/pvga1/pvga1.o                    $(VGADRIVERSRC)/gvga/gvga.o                    $(VGADRIVERSRC)/ati/ati.o                    $(VGADRIVERSRC)/tvga8900/tvga8900.o

      VGASUBDIRS =                    et4000                    et3000                    pvga1                    gvga                    ati                    tvga8900

        VGA2OBJS =                    $(VGA2DRIVERSRC)/et4000/et4000.o                    $(VGA2DRIVERSRC)/et3000/et3000.o                    $(VGA2DRIVERSRC)/pvga1/pvga1.o                    $(VGA2DRIVERSRC)/gvga/gvga.o                    $(VGA2DRIVERSRC)/tvga8900/tvga8900.o                    $(VGA2DRIVERSRC)/generic/generic.o

     VGA2SUBDIRS =                    et4000                    et3000                    pvga1                    gvga                    tvga8900                    generic

        HGA2OBJS =                    $(HGA2DRIVERSRC)/hga6845/hga6845.o

     HGA2SUBDIRS =                    hga6845

    RENDERERLIBS =                    $(RENDERERSRC)/Speedo/libSpeedo.a                    $(RENDERERSRC)/Type1/libType1.a

 RENDERERSUBDIRS =                    Speedo                    Type1

      VGACONFOBJ = $(X386SRC)/vga256/vga256Conf.o
   VGACONFSUBDIR = $(X386SRC)/vga256
        VGABUILD = -DBUILD_VGA256

    X386CONFOBJS = $(VGACONFOBJ)
 X386CONFSUBDIRS = $(VGACONFSUBDIR)

 X386SCREENFLAGS = $(VGA2BUILD) $(HGA2BUILD) $(VGABUILD)

# operating system:  		Linux 	(Usenet)

              SHELL = /bin/sh

              IMAKE = imake
         IMAKEFLAGS = \
	-T "InterViews/template"\
	-I$(CONFIGSRC) -I$(XCONFIGDIR)\
	$(SPECIAL_IMAKEFLAGS)
 SPECIAL_IMAKEFLAGS = -f $(SRC)/Imakefile -DInObjectCodeDir
             DEPEND = makedepend
     DEPEND_CCFLAGS = $(CCDEFINES) $(CCINCLUDES)
               MAKE = make
           PASSARCH = ARCH="$(ARCH)" SPECIAL_IMAKEFLAGS="$(SPECIAL_IMAKEFLAGS)"
          ARCHORCPU = Linux
               ARCH = $(ARCHORCPU)$(SPECIAL_ARCH)
       SPECIAL_ARCH =

           CCDRIVER = g++
           CCSUFFIX = c
                SRC = ..
              SLASH = /
               SRCS = $(SRC)$(SLASH)*.$(CCSUFFIX)
               OBJS = *.o
               AOUT = a.out

            CCFLAGS = $(APP_CCFLAGS) $(IV_CCFLAGS) $(EXTRA_CCFLAGS)
         IV_CCFLAGS = \
	\
	\
	$(SHARED_CCFLAGS)\
	$(CCDEFINES)\
	$(CCINCLUDES)
      DEBUG_CCFLAGS = -g
   OPTIMIZE_CCFLAGS = -O2
     SHARED_CCFLAGS =
      EXTRA_CCFLAGS = -m486 -DNO_ASM

          CCDEFINES = $(APP_CCDEFINES) $(IV_CCDEFINES) $(EXTRA_CCDEFINES)
       IV_CCDEFINES = $(LANGUAGE_CCDEFINES) $(BACKWARD_CCDEFINES)
 LANGUAGE_CCDEFINES = -D__cplusplus
 BACKWARD_CCDEFINES =
    EXTRA_CCDEFINES = 		-D_POSIX_SOURCE -D_BSD_SOURCE -D_GNU_SOURCE 	-Dlinux

         CCINCLUDES = $(APP_CCINCLUDES) $(IV_CCINCLUDES) $(EXTRA_CCINCLUDES)
      IV_CCINCLUDES = \
	$(BACKWARD_CCINCLUDES)\
	$(TOP_CCINCLUDES)\
	$(X_CCINCLUDES)
BACKWARD_CCINCLUDES =
     TOP_CCINCLUDES = -I$(INCSRC)
       X_CCINCLUDES =
   EXTRA_CCINCLUDES = -I/usr/g++-include

          CCLDFLAGS = $(APP_CCLDFLAGS) $(IV_CCLDFLAGS) $(EXTRA_CCLDFLAGS)
       IV_CCLDFLAGS = \
	\
	\
	$(NONSHARED_CCLDFLAGS)
NONSHARED_CCLDFLAGS =
    EXTRA_CCLDFLAGS =

          CCDEPLIBS = $(APP_CCDEPLIBS) $(IV_CCDEPLIBS) $(EXTRA_CCDEPLIBS)
       IV_CCDEPLIBS = \
	$(DEPLIBUNIDRAW)\
	$(DEPLIBGRAPHIC)\
	$(DEPLIBIV)\
	$(DEPLIBXEXT)\
	$(DEPLIBX11)\
	$(DEPLIBM)
    EXTRA_CCDEPLIBS =

           CCLDLIBS = $(APP_CCLDLIBS) $(IV_CCLDLIBS) $(EXTRA_CCLDLIBS)
        IV_CCLDLIBS = \
	$(LIBDIRPATH)\
	$(LDLIBUNIDRAW)\
	$(LDLIBGRAPHIC)\
	$(LDLIBIV)\
	$(XLIBDIRPATH)\
	$(LDLIBXEXT)\
	$(LDLIBX11)\
	$(LDLIBM)\
	$(ABSLIBDIRPATH)
     EXTRA_CCLDLIBS = -lg++

            INSTALL = 	sh $(SCRIPTSRC)/install.sh
       INSTPGMFLAGS = -s
       INSTBINFLAGS = -m 0755
       INSTUIDFLAGS = -m 4755
       INSTLIBFLAGS = -m 0644
       INSTINCFLAGS = -m 0444
       INSTMANFLAGS = -m 0444
       INSTDATFLAGS = -m 0444
      INSTKMEMFLAGS = -m 4755

                 AR = ar clq
                 AS = as
                 CP = cp
                CPP = 		/lib/cpp $(EXTRA_CCDEFINES)
      PREPROCESSCMD = 	/lib/cpp $(EXTRA_CCDEFINES)
                 LD = ld
                 LN = ln -s
          MKDIRHIER = $(SHELL) $(SCRIPTSRC)/mkdirhier.sh
                 MV = mv
             RANLIB = ranlib
    RANLIBINSTFLAGS =
                 RM = rm -f
             RM_CMD = $(RM) ,* .emacs_* *..c *.BAK *.CKP *.a *.bak *.ln *.o a.out core errs make.log make.out tags TAGS
              TROFF = psroff

                TOP = ../../../../.
        CURRENT_DIR = ./src/lib/Unidraw/LINUX

              IVSRC = $(TOP)/src
             BINSRC = $(IVSRC)/bin
          CONFIGSRC = $(IVSRC)/config
             INCSRC = $(IVSRC)/include
             LIBSRC = $(IVSRC)/lib
             MANSRC = $(IVSRC)/man
          SCRIPTSRC = $(BINSRC)/scripts

             BINDIR = $(TOP)/installed/bin/$(ARCH)
          CONFIGDIR = $(TOP)/installed/config
             INCDIR = $(TOP)/installed/include
             LIBDIR = $(TOP)/installed/lib/$(ARCH)
          LIBALLDIR = $(TOP)/installed/lib/all
             MANDIR = $(TOP)/installed/man

       ABSCONFIGDIR = /interviews/config
          ABSLIBDIR = /interviews/lib/$(ARCH)
       ABSLIBALLDIR = /interviews/lib/all
         XCONFIGDIR = /usr/lib/X11/config
            XINCDIR = /usr/include
            XLIBDIR = /usr/lib
          PSFONTDIR = /usr/lib/ps

all::

Makefile::
	-@if [ -f Makefile ]; then \
	$(RM) Makefile.bak; \
	$(MV) Makefile Makefile.bak; \
	else exit 0; fi
	$(IMAKE) $(IMAKEFLAGS) -DTOPDIR=$(TOP) -DCURDIR=$(CURRENT_DIR)
Makefiles::
depend::
install::

clean::
	@$(RM_CMD) "#"*

# -------------------------------------------------------------------------

#
# source files for building the Unidraw library
#

LIB = Unidraw
VERSION = 3.1

AOUT = lib$(LIB).a

all:: lib$(LIB).a

lib$(LIB).a:
	@echo "building $@"
	$(RM) $@
	$(AR) $@ $(OBJS)
	$(RANLIB) $@

install:: lib$(LIB).a
	-@if [ -d $(LIBDIR) ]; then exit 0; \
	else (set -x; $(MKDIRHIER) $(LIBDIR)); fi
	$(INSTALL) -c $(INSTLIBFLAGS) lib$(LIB).a $(LIBDIR)
	$(RANLIB) $(RANLIBINSTFLAGS) $(LIBDIR)/lib$(LIB).a

depend::
	$(DEPEND) -s "# DO NOT DELETE" -- $(DEPEND_CCFLAGS) -- $(SRCS)

$(AOUT): align.o
align.o: $(SRC)/align.$(CCSUFFIX)
	@$(RM) align.o align..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/align.$(CCSUFFIX)

$(AOUT): brushcmd.o
brushcmd.o: $(SRC)/brushcmd.$(CCSUFFIX)
	@$(RM) brushcmd.o brushcmd..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/brushcmd.$(CCSUFFIX)

$(AOUT): catalog.o
catalog.o: $(SRC)/catalog.$(CCSUFFIX)
	@$(RM) catalog.o catalog..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/catalog.$(CCSUFFIX)

$(AOUT): catcmds.o
catcmds.o: $(SRC)/catcmds.$(CCSUFFIX)
	@$(RM) catcmds.o catcmds..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/catcmds.$(CCSUFFIX)

$(AOUT): cglue.o
cglue.o: $(SRC)/cglue.$(CCSUFFIX)
	@$(RM) cglue.o cglue..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/cglue.$(CCSUFFIX)

$(AOUT): clipboard.o
clipboard.o: $(SRC)/clipboard.$(CCSUFFIX)
	@$(RM) clipboard.o clipboard..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/clipboard.$(CCSUFFIX)

$(AOUT): colorcmd.o
colorcmd.o: $(SRC)/colorcmd.$(CCSUFFIX)
	@$(RM) colorcmd.o colorcmd..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/colorcmd.$(CCSUFFIX)

$(AOUT): command.o
command.o: $(SRC)/command.$(CCSUFFIX)
	@$(RM) command.o command..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/command.$(CCSUFFIX)

$(AOUT): component.o
component.o: $(SRC)/component.$(CCSUFFIX)
	@$(RM) component.o component..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/component.$(CCSUFFIX)

$(AOUT): compview.o
compview.o: $(SRC)/compview.$(CCSUFFIX)
	@$(RM) compview.o compview..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/compview.$(CCSUFFIX)

$(AOUT): connect.o
connect.o: $(SRC)/connect.$(CCSUFFIX)
	@$(RM) connect.o connect..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/connect.$(CCSUFFIX)

$(AOUT): connector.o
connector.o: $(SRC)/connector.$(CCSUFFIX)
	@$(RM) connector.o connector..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/connector.$(CCSUFFIX)

$(AOUT): creator.o
creator.o: $(SRC)/creator.$(CCSUFFIX)
	@$(RM) creator.o creator..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/creator.$(CCSUFFIX)

$(AOUT): csolver.o
csolver.o: $(SRC)/csolver.$(CCSUFFIX)
	@$(RM) csolver.o csolver..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/csolver.$(CCSUFFIX)

$(AOUT): ctrlinfo.o
ctrlinfo.o: $(SRC)/ctrlinfo.$(CCSUFFIX)
	@$(RM) ctrlinfo.o ctrlinfo..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/ctrlinfo.$(CCSUFFIX)

$(AOUT): damage.o
damage.o: $(SRC)/damage.$(CCSUFFIX)
	@$(RM) damage.o damage..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/damage.$(CCSUFFIX)

$(AOUT): data.o
data.o: $(SRC)/data.$(CCSUFFIX)
	@$(RM) data.o data..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/data.$(CCSUFFIX)

$(AOUT): datas.o
datas.o: $(SRC)/datas.$(CCSUFFIX)
	@$(RM) datas.o datas..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/datas.$(CCSUFFIX)

$(AOUT): dialogs.o
dialogs.o: $(SRC)/dialogs.$(CCSUFFIX)
	@$(RM) dialogs.o dialogs..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/dialogs.$(CCSUFFIX)

$(AOUT): edit.o
edit.o: $(SRC)/edit.$(CCSUFFIX)
	@$(RM) edit.o edit..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/edit.$(CCSUFFIX)

$(AOUT): editor.o
editor.o: $(SRC)/editor.$(CCSUFFIX)
	@$(RM) editor.o editor..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/editor.$(CCSUFFIX)

$(AOUT): editorinfo.o
editorinfo.o: $(SRC)/editorinfo.$(CCSUFFIX)
	@$(RM) editorinfo.o editorinfo..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/editorinfo.$(CCSUFFIX)

$(AOUT): ellipse.o
ellipse.o: $(SRC)/ellipse.$(CCSUFFIX)
	@$(RM) ellipse.o ellipse..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/ellipse.$(CCSUFFIX)

$(AOUT): ellipses.o
ellipses.o: $(SRC)/ellipses.$(CCSUFFIX)
	@$(RM) ellipses.o ellipses..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/ellipses.$(CCSUFFIX)

$(AOUT): externview.o
externview.o: $(SRC)/externview.$(CCSUFFIX)
	@$(RM) externview.o externview..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/externview.$(CCSUFFIX)

$(AOUT): font.o
font.o: $(SRC)/font.$(CCSUFFIX)
	@$(RM) font.o font..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/font.$(CCSUFFIX)

$(AOUT): geomobjs.o
geomobjs.o: $(SRC)/geomobjs.$(CCSUFFIX)
	@$(RM) geomobjs.o geomobjs..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/geomobjs.$(CCSUFFIX)

$(AOUT): globals.o
globals.o: $(SRC)/globals.$(CCSUFFIX)
	@$(RM) globals.o globals..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/globals.$(CCSUFFIX)

$(AOUT): graphic.o
graphic.o: $(SRC)/graphic.$(CCSUFFIX)
	@$(RM) graphic.o graphic..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/graphic.$(CCSUFFIX)

$(AOUT): grblock.o
grblock.o: $(SRC)/grblock.$(CCSUFFIX)
	@$(RM) grblock.o grblock..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/grblock.$(CCSUFFIX)

$(AOUT): grcomp.o
grcomp.o: $(SRC)/grcomp.$(CCSUFFIX)
	@$(RM) grcomp.o grcomp..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/grcomp.$(CCSUFFIX)

$(AOUT): grcomptool.o
grcomptool.o: $(SRC)/grcomptool.$(CCSUFFIX)
	@$(RM) grcomptool.o grcomptool..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/grcomptool.$(CCSUFFIX)

$(AOUT): grid.o
grid.o: $(SRC)/grid.$(CCSUFFIX)
	@$(RM) grid.o grid..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/grid.$(CCSUFFIX)

$(AOUT): grview.o
grview.o: $(SRC)/grview.$(CCSUFFIX)
	@$(RM) grview.o grview..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/grview.$(CCSUFFIX)

$(AOUT): gvupdater.o
gvupdater.o: $(SRC)/gvupdater.$(CCSUFFIX)
	@$(RM) gvupdater.o gvupdater..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/gvupdater.$(CCSUFFIX)

$(AOUT): import.o
import.o: $(SRC)/import.$(CCSUFFIX)
	@$(RM) import.o import..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/import.$(CCSUFFIX)

$(AOUT): iterator.o
iterator.o: $(SRC)/iterator.$(CCSUFFIX)
	@$(RM) iterator.o iterator..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/iterator.$(CCSUFFIX)

$(AOUT): keymap.o
keymap.o: $(SRC)/keymap.$(CCSUFFIX)
	@$(RM) keymap.o keymap..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/keymap.$(CCSUFFIX)

$(AOUT): kybd.o
kybd.o: $(SRC)/kybd.$(CCSUFFIX)
	@$(RM) kybd.o kybd..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/kybd.$(CCSUFFIX)

$(AOUT): line.o
line.o: $(SRC)/line.$(CCSUFFIX)
	@$(RM) line.o line..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/line.$(CCSUFFIX)

$(AOUT): lines.o
lines.o: $(SRC)/lines.$(CCSUFFIX)
	@$(RM) lines.o lines..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/lines.$(CCSUFFIX)

$(AOUT): link.o
link.o: $(SRC)/link.$(CCSUFFIX)
	@$(RM) link.o link..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/link.$(CCSUFFIX)

$(AOUT): macro.o
macro.o: $(SRC)/macro.$(CCSUFFIX)
	@$(RM) macro.o macro..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/macro.$(CCSUFFIX)

$(AOUT): magnify.o
magnify.o: $(SRC)/magnify.$(CCSUFFIX)
	@$(RM) magnify.o magnify..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/magnify.$(CCSUFFIX)

$(AOUT): manip.o
manip.o: $(SRC)/manip.$(CCSUFFIX)
	@$(RM) manip.o manip..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/manip.$(CCSUFFIX)

$(AOUT): manips.o
manips.o: $(SRC)/manips.$(CCSUFFIX)
	@$(RM) manips.o manips..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/manips.$(CCSUFFIX)

$(AOUT): move.o
move.o: $(SRC)/move.$(CCSUFFIX)
	@$(RM) move.o move..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/move.$(CCSUFFIX)

$(AOUT): nop.o
nop.o: $(SRC)/nop.$(CCSUFFIX)
	@$(RM) nop.o nop..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/nop.$(CCSUFFIX)

$(AOUT): pad.o
pad.o: $(SRC)/pad.$(CCSUFFIX)
	@$(RM) pad.o pad..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/pad.$(CCSUFFIX)

$(AOUT): patcmd.o
patcmd.o: $(SRC)/patcmd.$(CCSUFFIX)
	@$(RM) patcmd.o patcmd..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/patcmd.$(CCSUFFIX)

$(AOUT): path.o
path.o: $(SRC)/path.$(CCSUFFIX)
	@$(RM) path.o path..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/path.$(CCSUFFIX)

$(AOUT): picture.o
picture.o: $(SRC)/picture.$(CCSUFFIX)
	@$(RM) picture.o picture..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/picture.$(CCSUFFIX)

$(AOUT): pin.o
pin.o: $(SRC)/pin.$(CCSUFFIX)
	@$(RM) pin.o pin..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/pin.$(CCSUFFIX)

$(AOUT): polygon.o
polygon.o: $(SRC)/polygon.$(CCSUFFIX)
	@$(RM) polygon.o polygon..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/polygon.$(CCSUFFIX)

$(AOUT): polygons.o
polygons.o: $(SRC)/polygons.$(CCSUFFIX)
	@$(RM) polygons.o polygons..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/polygons.$(CCSUFFIX)

$(AOUT): pspaint.o
pspaint.o: $(SRC)/pspaint.$(CCSUFFIX)
	@$(RM) pspaint.o pspaint..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/pspaint.$(CCSUFFIX)

$(AOUT): psview.o
psview.o: $(SRC)/psview.$(CCSUFFIX)
	@$(RM) psview.o psview..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/psview.$(CCSUFFIX)

$(AOUT): rastercomp.o
rastercomp.o: $(SRC)/rastercomp.$(CCSUFFIX)
	@$(RM) rastercomp.o rastercomp..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/rastercomp.$(CCSUFFIX)

$(AOUT): rasterrect.o
rasterrect.o: $(SRC)/rasterrect.$(CCSUFFIX)
	@$(RM) rasterrect.o rasterrect..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/rasterrect.$(CCSUFFIX)

$(AOUT): rect.o
rect.o: $(SRC)/rect.$(CCSUFFIX)
	@$(RM) rect.o rect..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/rect.$(CCSUFFIX)

$(AOUT): reshape.o
reshape.o: $(SRC)/reshape.$(CCSUFFIX)
	@$(RM) reshape.o reshape..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/reshape.$(CCSUFFIX)

$(AOUT): rotate.o
rotate.o: $(SRC)/rotate.$(CCSUFFIX)
	@$(RM) rotate.o rotate..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/rotate.$(CCSUFFIX)

$(AOUT): scale.o
scale.o: $(SRC)/scale.$(CCSUFFIX)
	@$(RM) scale.o scale..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/scale.$(CCSUFFIX)

$(AOUT): select.o
select.o: $(SRC)/select.$(CCSUFFIX)
	@$(RM) select.o select..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/select.$(CCSUFFIX)

$(AOUT): selection.o
selection.o: $(SRC)/selection.$(CCSUFFIX)
	@$(RM) selection.o selection..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/selection.$(CCSUFFIX)

$(AOUT): slot.o
slot.o: $(SRC)/slot.$(CCSUFFIX)
	@$(RM) slot.o slot..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/slot.$(CCSUFFIX)

$(AOUT): spline.o
spline.o: $(SRC)/spline.$(CCSUFFIX)
	@$(RM) spline.o spline..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/spline.$(CCSUFFIX)

$(AOUT): splines.o
splines.o: $(SRC)/splines.$(CCSUFFIX)
	@$(RM) splines.o splines..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/splines.$(CCSUFFIX)

$(AOUT): statevar.o
statevar.o: $(SRC)/statevar.$(CCSUFFIX)
	@$(RM) statevar.o statevar..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/statevar.$(CCSUFFIX)

$(AOUT): statevars.o
statevars.o: $(SRC)/statevars.$(CCSUFFIX)
	@$(RM) statevars.o statevars..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/statevars.$(CCSUFFIX)

$(AOUT): stateview.o
stateview.o: $(SRC)/stateview.$(CCSUFFIX)
	@$(RM) stateview.o stateview..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/stateview.$(CCSUFFIX)

$(AOUT): stateviews.o
stateviews.o: $(SRC)/stateviews.$(CCSUFFIX)
	@$(RM) stateviews.o stateviews..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/stateviews.$(CCSUFFIX)

$(AOUT): stencilcomp.o
stencilcomp.o: $(SRC)/stencilcomp.$(CCSUFFIX)
	@$(RM) stencilcomp.o stencilcomp..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/stencilcomp.$(CCSUFFIX)

$(AOUT): stretch.o
stretch.o: $(SRC)/stretch.$(CCSUFFIX)
	@$(RM) stretch.o stretch..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/stretch.$(CCSUFFIX)

$(AOUT): struct.o
struct.o: $(SRC)/struct.$(CCSUFFIX)
	@$(RM) struct.o struct..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/struct.$(CCSUFFIX)

$(AOUT): text.o
text.o: $(SRC)/text.$(CCSUFFIX)
	@$(RM) text.o text..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/text.$(CCSUFFIX)

$(AOUT): tool.o
tool.o: $(SRC)/tool.$(CCSUFFIX)
	@$(RM) tool.o tool..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/tool.$(CCSUFFIX)

$(AOUT): transfn.o
transfn.o: $(SRC)/transfn.$(CCSUFFIX)
	@$(RM) transfn.o transfn..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/transfn.$(CCSUFFIX)

$(AOUT): transfns.o
transfns.o: $(SRC)/transfns.$(CCSUFFIX)
	@$(RM) transfns.o transfns..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/transfns.$(CCSUFFIX)

$(AOUT): transforms.o
transforms.o: $(SRC)/transforms.$(CCSUFFIX)
	@$(RM) transforms.o transforms..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/transforms.$(CCSUFFIX)

$(AOUT): uarray.o
uarray.o: $(SRC)/uarray.$(CCSUFFIX)
	@$(RM) uarray.o uarray..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/uarray.$(CCSUFFIX)

$(AOUT): uctrl.o
uctrl.o: $(SRC)/uctrl.$(CCSUFFIX)
	@$(RM) uctrl.o uctrl..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/uctrl.$(CCSUFFIX)

$(AOUT): uctrls.o
uctrls.o: $(SRC)/uctrls.$(CCSUFFIX)
	@$(RM) uctrls.o uctrls..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/uctrls.$(CCSUFFIX)

$(AOUT): uhash.o
uhash.o: $(SRC)/uhash.$(CCSUFFIX)
	@$(RM) uhash.o uhash..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/uhash.$(CCSUFFIX)

$(AOUT): ulabel.o
ulabel.o: $(SRC)/ulabel.$(CCSUFFIX)
	@$(RM) ulabel.o ulabel..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/ulabel.$(CCSUFFIX)

$(AOUT): ulist.o
ulist.o: $(SRC)/ulist.$(CCSUFFIX)
	@$(RM) ulist.o ulist..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/ulist.$(CCSUFFIX)

$(AOUT): umap.o
umap.o: $(SRC)/umap.$(CCSUFFIX)
	@$(RM) umap.o umap..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/umap.$(CCSUFFIX)

$(AOUT): unidraw.o
unidraw.o: $(SRC)/unidraw.$(CCSUFFIX)
	@$(RM) unidraw.o unidraw..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/unidraw.$(CCSUFFIX)

$(AOUT): upage.o
upage.o: $(SRC)/upage.$(CCSUFFIX)
	@$(RM) upage.o upage..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/upage.$(CCSUFFIX)

$(AOUT): ustencil.o
ustencil.o: $(SRC)/ustencil.$(CCSUFFIX)
	@$(RM) ustencil.o ustencil..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/ustencil.$(CCSUFFIX)

$(AOUT): vertices.o
vertices.o: $(SRC)/vertices.$(CCSUFFIX)
	@$(RM) vertices.o vertices..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/vertices.$(CCSUFFIX)

$(AOUT): verts.o
verts.o: $(SRC)/verts.$(CCSUFFIX)
	@$(RM) verts.o verts..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/verts.$(CCSUFFIX)

$(AOUT): viewcmds.o
viewcmds.o: $(SRC)/viewcmds.$(CCSUFFIX)
	@$(RM) viewcmds.o viewcmds..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/viewcmds.$(CCSUFFIX)

$(AOUT): viewer.o
viewer.o: $(SRC)/viewer.$(CCSUFFIX)
	@$(RM) viewer.o viewer..c
	$(CCDRIVER)  $(CCFLAGS) -c $(SRC)/viewer.$(CCSUFFIX)

