


OPEN(2)                                                   OPEN(2)


NNAAMMEE
       creat, open, mkdir, mknod - create or open a file, special
       file, or directory

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ssyyss//ttyyppeess..hh>>
       ##iinncclluuddee <<uunniissttdd>>
       iinntt ccrreeaatt ((ccoonnsstt cchhaarr **ffiillee__nnaammee,, mmooddee__tt mmooddee));;
       iinntt mmkknnoodd ((ccoonnsstt cchhaarr **ffiillee__nnaammee,, mmooddee__tt mmooddee,, ddeevv__tt ddeevv));;
       iinntt mmkkddiirr ((ccoonnsstt cchhaarr **ffiillee__nnaammee,, mmooddee__tt mmooddee));;
       iinntt ooppeenn ((ccoonnsstt cchhaarr **ffiillee__nnaammee,, iinntt ffllaagg,, ......));;

DDEESSCCRRIIPPTTIIOONN
       ooppeenn(()) opens the file specified by _f_i_l_e___n_a_m_e , with  modes
       set according to the _f_l_a_g parameter.

       The bit fields of _f_l_a_g are :

       OO__RRDDOONNLLYY

       OO__WWRROONNLLYY

       OO__RRDDWWRR

       OO__CCRREEAATT  -  create if it doesn't exist.  Note that if this
       flag is specified, and additional  parameter  _m_o_d_e___t  _m_o_d_e
       must  be passed to open specifying permissions on the cre-
       ated file.  This is modified by uummaasskk in  the  usual  way,
       with   the  permissions  of  the  created  file becoming (
       ~~uummaasskk & _m_o_d_e )

       OO__EEXXCCLL

       OO__NNOOCCTTTTYY - not implemented.

       OO__TTRRUUNNCC

       OO__AAPPPPEENNDD

       OO__NNOONNBBLLOOCCKK

       OO__NNDDEELLAAYY - not implemented.

       ccrreeaatt(()) is a more specific version of ooppeenn(()) which is used
       to  create  _f_i_l_e___n_a_m_e_.  The behavior of ccrreeaatt ( _f_i_l_e___n_a_m_e_,
       _m_o_d_e ) is the same as

       ooppeenn ( _f_i_l_e___n_a_m_e_, O_CREAT | O_WRONLY, O_TRUNC, _m_o_d_e );

       mmkkddiirr(()) is identical to ccrreeaatt(()),, only a directory is  cre-
       ated instead of a normal file.

       mmkknnoodd(())  is  identical  to ccrreeaatt(()),, only _d_e_v specifies the
       device number that is associated  with _f_i_l_e___n_a_m_e



                          March 28, 1992                        1





OPEN(2)                                                   OPEN(2)


EERRRROORRSS
       --EEAACCCCEESSSS is returned if the directory does not  have  exe-
       cute permissions

       --EEIINNVVAALL  is  returned if there are no more filedescriptors
       available in the system or for the process.   These  maxi-
       mums  are  specified in NNRR__OOPPEENN and NNRR__FFIILLEE , both defined
       in _l_i_n_u_x_/_i_n_c_l_u_d_e_/_l_i_n_u_x_/_f_s_._h with defaults  of  20  and  64
       respectively.

       --EEIISSDDIIRR  is  returned  if  you attempt to open a directory
       with access  flags  of  anything  but  O_RDONLY,  or  with
       O_CREATE, or O_TRUNC flags set.

       --EELLOOOOPP is returned if circular links are encountered.

       --EENNOOEENNTT  is returned if a portion of the specified path is
       missing.

       --EEPPEERRMM is returned if the  permissions  for  the  file  or
       directory do not allow the requested action.

FFIILLEESS
       linux/fs/open.c
       linux/fs/namei.c
       /usr/include/linux/sys.h
       /usr/include/unistd.h

SSEEEE AALLSSOO
       close(2), fopen(3), link(2), unlink(2), umask(2)

BBUUGGSS
       OO__NNCCTTTTYY , OO__NNDDEELLAAYY are not yet implemented.

       The  stock  distribution of linux supports a maximum of 20
       open file descriptors per process,  as  specified  in  the
       NNRR__OOPPEENN  macro  in _l_i_n_u_x_/_i_n_c_l_u_d_e_/_l_i_n_u_x_/_f_s_._h This is easily
       expanded to 32, but since  certain  internal  bitmaps  are
       implemented  in  32  bit  integers, further expansion will
       prove difficult, although changing the cclloossee__oonn__eexxeecc field
       of      ttaasskk__ssttrruucctt,,      wwhhiicchh      iiss     ddeeffiinneedd     iinn
       _l_i_n_u_x_/_i_n_c_l_u_d_e_/_l_i_n_u_x_/_s_c_h_e_d_._h and other related fields to be
       long  long instead of long will allow a maximum of 64 file
       descriptors per process.

       The stock persystem limit is 64 open file descriptors,  as
       specified      in      the      NNRR__FFIILLEESS      macro     in
       _l_i_n_u_x_/_i_n_c_l_u_d_e_/_l_i_n_u_x_/_f_s_._h_.  This is  an  artificial  limit,
       and  is easily circumvented by recompiling the kernel with
       a larger value.







                          March 28, 1992                        2


