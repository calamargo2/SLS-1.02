


TIME(2)                                                   TIME(2)


NNAAMMEE
       gettimeofday, time, settimeofday, stime - get / set time

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ssyyss//ttyyppeess..hh>>
       ##iinncclluuddee <<uunniissttdd..hh>>
       ttiimmee__tt ttiimmee ((ttiimmee__tt **tt));;
       iinntt ssttiimmee ((ccoonnsstt ttiimmee__tt **tt));;
       iinntt ggeettttiimmeeooffddaayy ((ssttrruucctt ttiimmeevvaall **ttvv,, ssttrruucctt ttiimmeezzoonnee **ttzz));;
       iinntt sseettttiimmeeooffddaayy ((ccoonnsstt ssttrruucctt ttiimmeevvaall **ttvv,,
                         ccoonnsstt ssttrruucctt ttiimmeezzoonnee **ttzz));;

DDEESSCCRRIIPPTTIIOONN
       ttiimmee(())  sets  the  variable  pointed  to  by _t to the time
       elapsed since the  Epoch  in  seconds,  and  returns  this
       value.

       ssttiimmee(())  sets  system  time  to the value pointed to by _t_,
       returning 0 on success, and a negative number on  failure.
       ssttiimmee(()) may only be executed by the super user.

       ggeettttiimmeeooffddaayy(()) and sseettttiimmeeooffddaayy(()) can set the time as well
       as a timezone.  _t_v is a ttiimmeevvaall struct, as specififed   in
       /usr/include/sys/time.h:
       struct timeval {
                      long tv_sec;        /* seconds */
                      long tv_usec;  /* microseconds */
                      };

       and _t_z is a ttiimmeezzoonnee :
       struct timezone {
                       int  tz_minuteswest;
                       /* minutes west of Greenwich */
                       int  tz_dsttime;
                       /* type of dst correction */
                       };

       With daylight savings times defined as follows :

       DDSSTT__NNOONNEE /* not on dst */
       DDSSTT__UUSSAA    /* USA style dst */
       DDSSTT__AAUUSSTT   /* Australian style dst */
       DDSSTT__WWEETT /* Western European dst */
       DDSSTT__MMEETT /* Middle European dst */
       DDSSTT__EEEETT /* Eastern European dst */
       DDSSTT__CCAANN /* Canada */
       DDSSTT__GGBB     /* Great Britain and Eire */
       DDSSTT__RRUUMM /* Rumania */
       DDSSTT__TTUURR /* Turkey */
       DDSSTT__AAUUSSTTAALLTT     /* Australian style with shift in 1986 */

       And the following macros are defined to operate on this :
       #define FD_SET(fd,fdsetp)     (*(fdsetp) |= (1 << (fd)))
       #define FD_CLR(fd,fdsetp)     (*(fdsetp) &= ~(1 << (fd)))



                          March 28, 1992                        1





TIME(2)                                                   TIME(2)


       #define FD_ISSET(fd,fdsetp)   ((*(fdsetp) >> fd) & 1)
       #define FD_ZERO(fdsetp)       (*(fdsetp) = 0)
       #define   timerisset(tvp)\
                  ((tvp)->tv_sec || (tvp)->tv_usec)
       #define   timercmp(tvp, uvp, cmp)\
                  ((tvp)->tv_sec cmp (uvp)->tv_sec ||\
                  (tvp)->tv_sec == (uvp)->tv_sec &&\
                  (tvp)->tv_usec cmp (uvp)->tv_usec)
          #define timerclear(tvp)
                  ((tvp)->tv_sec = (tvp)->tv_usec = 0)

       Like ssttiimmee(()),, only the super user is permitted to use set-
       time().  If either _t_v or _t_z is null, then it is not set.

EERRRROORRSS
       --EEPPEERRMM is returned if either ssttiimmee(()) or sseettttiimmeeooffddaayy(())  is
       called by someone other than the superuser.

       --EEIINNVVAALL  may  be  returned  if an invalid timezone, etc is
       specified.

FFIILLEESS
       linux/kernel/sys.c
       linux/kernel/sched.c
       /usr/include/linux/sys.h
       /usr/include/unistd.h

BBUUGGSS
       Linux currently is hazy about GMT and local time.   timer-
       cmp does not work for >= or <=.



























                          March 28, 1992                        2


