


FORK(2)                                                   FORK(2)


NNAAMMEE
       fork - create a child process

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<uunniissttdd..hh>>
       iinntt ffoorrkk((vvooiidd));;

DDEESSCCRRIIPPTTIIOONN
       ffoorrkk(()) creates a child process the differs from the parent
       process only in its PID.  On success, the PID of the child
       process  is  returned in the parent's thread of execution,
       and a 0 is  returned in the child's thread  of  execution.
       On  failure, a negative value will be returned in the par-
       ent's context and no child process will be created.

       Under linux, ffoorrkk(()) is implemented  using  copy  on  write
       pages, so the only penalty incured by fork is the time and
       memory required to duplicate the parent's page tables, and
       to create a unique ttaasskk__ssttrruucctt for the child.

EERRRROORRSS
       --EEAAGGAAIINN  is  returned if ffoorrkk(()) cannot allocate sufficient
       memory to copy the parent's page  tables  and  allocate  a
       ttaasskk__ssttrruucctt for the child.

FFIILLEESS
       linux/kernel/fork.c
       /usr/include/linux/sys.h
       /usr/include/unistd.h

SSEEEE AALLSSOO
       exec(2)

BBUUGGSS
       Currently,  the  Linux process table is limited to 64 pro-
       cesses.





















                          March 28, 1992                        1


