


EXECVE(2)                                               EXECVE(2)


NNAAMMEE
       execve - execute program

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<uunniissttdd..hh>>
       iinntt eexxeeccvvee ((ccoonnsstt cchhaarr **ffiilleennaammee,, ccoonnsstt cchhaarr **aarrggvv[[]],,
                    ccoonnsstt cchhaarr **eennvvpp[[]]));;

DDEESSCCRRIIPPTTIIOONN
       eexxeeccvvee(())  executes  the  program  pointed  to by _f_i_l_e_n_a_m_e_.
       _f_i_l_e_n_a_m_e must be either a binary executable,  or  a  shell
       script  starting  with the magic number #!.  eexxeeccvvee(()) does
       not return on success, and the text, data, bss, and  stack
       of the calling process are overwritten by that of the pro-
       gram loaded.  The program  invoked  inherits  the  calling
       process's  PID, and any open file descriptors that are not
       set to close on exec.  Signals pending on the parent  pro-
       cess   are  cleared.   On  error,  a  negative  number  is
       returned.

       If the current program is being ptraced, a SSIIGGTTRRAAPP is sent
       to it after a successful eexxeeccvvee(())..

EERRRROORRSS
       --EEAACCCCEESSSS is returned when the permissions do not allow the
       file to be executed.

       --EENNOOEENNTT is returned when the file does not exist.

       --EENNOOEEXXEECC is returned when a bad magic number is found or a
       shell cannot be found for a #! executable.

       --EENNOOMMEEMM  is  returned when there is insufficient memory to
       eexxeecc(())..

FFIILLEESS
       linux/fs/exec.c
       linux/kernel/sys_call.s
       /usr/include/linux/sys.h
       /usr/include/unistd.h
       /bin/sh, and user specified shells.

SSEEEE AALLSSOO
       execl(3), fork(2)

BBUUGGSS
       suid and sgid processes can  not  be  ppttrraaccee(())''dd  suid  or
       sgid.

       A maximum line length of 127 characters is allowed for the
       first line in a #! executable shell script.  This  may  be
       circumvented  by  changing  the  max size of buf, in which
       case you will become bound by the  1024  byte  size  of  a
       buffer, which is not easily worked around.



                          March 28, 1992                        1





EXECVE(2)                                               EXECVE(2)



























































                          March 28, 1992                        2


