


SIGNAL(2)                                               SIGNAL(2)


NNAAMMEE
       signal, sigaction, sigsuspend, sigpending, sgetmask, sset-
       mask - signal handling functions.

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ssiiggnnaall..hh>>
       ##iinncclluuddee <<uunniissttdd..hh>>
       iinntt ssiiggaaccttiioonn((iinntt ssiiggnnuumm,, ccoonnsstt ssttrruucctt ssiiggaaccttiioonn **nneeww,,
                     ssttrruucctt ssiiggaaccttiioonn **oolldd));;
       vvooiidd ((**ssiiggnnaall((iinntt ssiiggnnuumm,, ((vvooiidd **hhaannddlleerr))((iinntt))))))))((iinntt))
       ssiiggssuussppeenndd((iinntt rreessttaarrtt,, ssiiggsseett__tt oolldd__mmaasskk,, ssiiggsseett__tt sseett));;
       iinntt ssiiggppeennddiinngg((ssiiggsseett__tt **bbuuff));;
       ssiiggsseett__tt ssggeettmmaasskk ((vvooiidd));;
       ssiiggsseett__tt sssseettmmaasskk ((ssiiggsseett__tt mmaasskk));;

DDEESSCCRRIIPPTTIIOONN
       ssggeettmmaasskk(()) and sssseettmmaasskk(()) get and set the mask of  blocked
       signals.   Signals  are  bitmapped  into this mask as 1 <<
       (signum - 1).  Both return the  old  value  of  the  mask.
       Note that SSIIGGKKIILLLL and SSIIGGSSTTOOPP cannot be blocked.

       ssiiggppeennddiinngg(())  fills in _*_b_u_f with which signals are pending
       but blocked. 0 is returned.

       ssiiggssuussppeenndd(()) is used to atomically  swap  out  the  signal
       mask,  while waiting for a signal.  If the _r_e_s_t_a_r_t flag is
       set, then the current mask is replaced with old_mask,  and
       sigsuspend  exists  with a --EEIINNTTRR..  Otherwise, the current
       signal mask is set to set,  a  ppaauussee(())  system  call  per-
       formed, and --EERREESSTTAARRTTNNOOIINNTTRR is returned.

       ssiiggnnaall(())  is  used  to set up a signal handler for _s_i_g_n_u_m_.
       The signal handler is set to _h_a_n_d_l_e_r_, which may be a  user
       specified function or one of these from signal.h:
       SSIIGG__DDFFLL - use the default handler.
       SSIIGG__IIGGNN - ignore signal.

       Note  that  ssiiggnnaall(())  sets up signals to be SA_ONESHOT and
       SA_NOMASK.  This may be changed by a call to  ssiiggaaccttiioonn(())..

       Also note that SIG_KILL and SIG_STOP cannot be changed.

       The address of the handler is returned on success, a nega-
       tive value on error.

       ssiiggaaccttiioonn(()) is similar to a more general version  of  ssiigg--
       nnaall(())..  It can be used to  set the entire ssiiggaaccttiioonn struc-
       ture for a signal.

       If _o_l_d is non null, the old action will be  stored  there.
       The action will then be set to _n_e_w_.






                          March 28, 1992                        1





SIGNAL(2)                                               SIGNAL(2)


       The structure is as defined in /usr/include/signal.h :
       struct sigaction {
                        void (*sa_handler)(int);
                        sigset_t sa_mask;
                        int sa_flags;
                        void (*sa_restorer)(void);
                        };

       0  is  returned on success.  Note that SSIIGGKKIILLLL and SSIIGGSSTTOOPP
       may not have signals set for them.

EERRRROORRSS
       --EEIINNVVAALL is returned when an invalid signum  is  passed  to
       the functions.

FFIILLEESS
       linux/signal.h
       /usr/include/linux/sys.h
       /usr/include/unistd.h

SSEEEE AALLSSOO
       kill(2), raise(3)

BBUUGGSS
       ssiiggnnaall(())  and  the  code  in sched.c, signal.c cannot cor-
       rectly handle a SIG_DFL handler.































                          March 28, 1992                        2


