


WAITPID(2)                                             WAITPID(2)


NNAAMMEE
       waitpid - wait for a given pid

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<uunniissttdd..hh>>
       iinntt wwaaiittppiidd ((ppiidd__tt ppiidd,, uunnssiiggnneedd lloonngg **ssttaatt__aaddddrr,, iinntt ooppttiioonnss));;

DDEESSCCRRIIPPTTIIOONN
       wwaaiittppiidd(()) waits for _p_i_d as specified in _o_p_t_i_o_n_s_.

       Alowable options are:
       WWUUNNTTRRAACCEEDD  - set when we want to be notified of successful
       exit of _p_i_d
       WWNNOOHHAANNGG - set if we don't want to wait around for  a  long
       time.

       wwaaiittppiidd(()) will exit when :
       1.  The waited for process terminates or enters a ZOMBIE state.
       2.  An unblocked signal, or SIGCHLD is caught.
       3.  An error condition occurs.

       _s_t_a_t___a_d_d_r  _i_s  _n_o_n  _N_U_L_L_, _t_h_e_n _u_n_l_e_s_s WWUUNNTTRRAACCEEDD is set and
       the status of _p_i_d is not TTAASSKKSSTTOOPPPPEEDD then _*_s_t_a_t___a_d_d_r  will
       be set to the exit code of _p_i_d_.

       wwaaiittppiidd(()) will return one of the following :
       1.  pid if the process terminates.
       2.  0 if we told it to not hang, and the process hasn't terminated.
       3.  A negative value indicating an error.

EERRRROORRSS
       --EERREESSTTAARRTTSSYYSS  is  returned if WWNNOOHHAANNGG was not set, when an
       unblocked signal or SGICHLD was caught.

       --EECCHHIILLDD is returned if the child process didn't exist,  or
       WUNTRACED was unclear and there was no exit code.

FFIILLEESS
       linux/kernel/signal.c
       /usr/include/linux/sys.h
       /usr/include/unistd.h

SSEEEE AALLSSOO
       wait(3)













                          March 28, 1992                        1


