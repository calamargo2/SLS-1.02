


GETRLIMIT(2)                                         GETRLIMIT(2)


NNAAMMEE
       getrlimit,  getrusage, setrlimit - get/set resource limits
       and usage

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ssyyss//rreessoouurrccee..hh>>
       ##iinncclluuddee <<uunniissttdd..hh>>
       iinntt ggeettrrlliimmiitt ((iinntt rreessoouurrccee,, ssttrruucctt rrlliimmiitt **rrlliimm));;
       iinntt ggeettrruussaaggee ((iinntt wwhhoo,, ssttrruucctt rruussaaggee **uussaaggee));;
       iinntt sseettrrlliimmiitt ((iinntt rreessoouurrccee,, ccoonnsstt ssttrruucctt rrlliimmiitt **rrlliimm));;

DDEESSCCRRIIPPTTIIOONN
       ggeettrrlliimmiitt(()) and sseettrrlliimmiitt(()) get and  set  resource  limits
       respectively.  _r_e_s_o_u_r_c_e _s_h_o_u_l_d _b_e _o_n_e _o_f _:

       RRLLIIMMIITT__CCPPUU      /* CPU time in ms */
       RRLLIIMMIITT__FFSSIIZZEE    /* Maximum filesize */
       RRLLIIMMIITT__DDAATTAA     /* max data size */
       RRLLIIMMIITT__SSTTAACCKK    /* max stack size */
       RRLLIIMMIITT__CCOORREE     /* max core file size */
       RRLLIIMMIITT__RRSSSS      /* max resident set size */

       The following are not yet implemented :

       RRLLIIMMIITT__MMEEMMLLOOCCKK  /* max locked-in-memory address space*/
       RRLLIIMMIITT__NNPPRROOCC    /* max number of processes */
       RRLLIIMMIITT__OOFFIILLEE    /* max number of open files */

       A   resource  may  unlimited  if  you  set  the  limit  to
       RRLLIIMM__IINNFFIINNIITTYY..

       The rrlliimmiitt structure is defined as follows :

       struct rlimit {
                     int  rlim_cur;
                     int  rlim_max;
                     };

       ggeettrruussaaggee(()) returns the current resource usages, for a _w_h_o
       of either RRUUSSAAGGEE__SSEELLFF or RRUUSSAAGGEE__CCHHIILLDDRREENN..

       struct    rusage {
            struct timeval ru_utime; /* user time used */
            struct timeval ru_stime; /* system time used */
            long ru_maxrss;          /* maximum resident set size */
            long ru_ixrss;      /* integral shared memory size */
            long ru_idrss;      /* integral unshared data size */
            long ru_isrss;      /* integral unshared stack size */
            long ru_minflt;          /* page reclaims */
            long ru_majflt;          /* page faults */
            long ru_nswap;      /* swaps */
            long ru_inblock;         /* block input operations */
            long ru_oublock;         /* block output operations */
            long ru_msgsnd;          /* messages sent */



                          March 28, 1992                        1





GETRLIMIT(2)                                         GETRLIMIT(2)


            long ru_msgrcv;          /* messages received */
            long ru_nsignals;        /* signals received */
            long ru_nvcsw;      /* voluntary context switches */
            long ru_nivcsw;          /* involuntary " */
       };

       0 is returned on success, a negative value for error.

EERRRROORRSS
       --EEIINNVVAALL  is returned if ggeettrrlliimmiitt(()),, sseettrrlliimmiitt(()) is called
       with a bad _r_e_s_o_u_r_c_e_, or ggeettrruussaaggee(()) is called with  a  bad
       _w_h_o_.

       --EEPPEERRMM  is returned if a non-superuser tries to call sseettrr--
       lliimmiitt(())

FFIILLEESS
       linux/kernel/sys.c
       /usr/include/linux/sys.h
       /usr/include/unistd.h
       /usr/include/sys/resource.h

SSEEEE AALLSSOO
       ulimit(2)

































                          March 28, 1992                        2


