This is Info file texinfo, produced by Makeinfo-1.43 from the input
file texinfo2.texi.

   This file documents Texinfo, a documentation system that uses a
single source file to produce both on-line information and a printed
manual.

   This is edition 2.14 of the Texinfo documentation,
14 February 1992, for Texinfo version 2.

   Copyright (C) 1988, 1990, 1991, 1992 Free Software Foundation, Inc.

   This is the second edition of the Texinfo documentation,
 and is consistent with version 2 of `texinfo.tex'.

   Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by the Foundation.


File: texinfo,  Node: headings on off,  Prev: end titlepage,  Up: Titlepage & Copyright Page

The `@headings' Command
-----------------------

   The `@headings' command is rarely used.  It specifies what kind of
page headings and footings to print on each page.  Usually, this is
controlled by the `@setnewchapter' command.  You need the `@headings'
command only if the `@setnewchapter' command does not do what you
want, or if you want to turn off pre-defined headings prior to
defining your own.

   There are four ways to use the `@headings' command:

`@headings off'
     Turns off printing of headings.

`@headings single'
     Turns on headings appropriate for single-sided printing.

`@headings double'
`@headings on'
     Turns on headings appropriate for double-sided printing.  The two
     commands, `@headings on' and `@headings double', are synonymous.

   To prevent TeX from generating any page headings, write `@headings
off' on a line of its own immediately after the line containing the
`@end titlepage' command.  The `@headings off' command overrides the
`@end titlepage' command, which would otherwise cause TeX to print
headings.

   You can also specify your own style of heading and footing.  *Note
Page Headings: Headings, for more information.


File: texinfo,  Node: The Top Node,  Next: Software Copying Conditions,  Prev: Titlepage & Copyright Page,  Up: Beginning a File

The Top Node and Master Menu
============================

   The `Top' node is the node from which you enter the file from
outside.

   A `Top' node should contain a brief description of the file and an
extensive, master menu for the whole Info file.  The contents of this
node should appear only in the Info file; none of it should appear in
printed output, so enclose it between `@ifinfo' and `@end ifinfo'
commands.  (TeX does not print either an `@node' line or a menu; they
appear only in Info; strictly speaking, you do not have to enclose
these parts between `@ifinfo' and `@end ifinfo', but it is simplest to
do so.  *Note  Conditionally Visible Text: Conditionals.)

* Menu:

* Title of Top Node::           A Top node needs a title.
* Master Menu Parts::           A master menu has three or more parts.


File: texinfo,  Node: Title of Top Node,  Next: Master Menu Parts,  Prev: The Top Node,  Up: The Top Node

Top Node Title
--------------

   Sometimes, you will want to place an `@top' line containing the
title of the document after the `@node' line, followed by a short
summary.  This helps the reader understand what the Info file is
about.  Also, you should write the version number of the program to
which the Info file applies; or, at least, the edition number.

   For example, the beginning of the Top node of this manual looks like
this:

     ...
     @end titlepage
     
     @ifinfo
     @node Top, Copying, (dir), (dir)
     @top Texinfo
     
     Texinfo is a documentation system...
     
     This is edition...
     ...
     @end ifinfo
     
     @menu
     * Copying::                 Texinfo is freely
                                   redistributable.
     * Overview::                What is Texinfo?
     ...
     @end menu

   In a `Top' node, the `Previous', and `Up' nodes usually refer to
the top level directory of the whole Info system, which is called
`(dir)'.


File: texinfo,  Node: Master Menu Parts,  Prev: Title of Top Node,  Up: The Top Node

Parts of a Master Menu
----------------------

   A "master menu" is a detailed main menu listing all the nodes in a
file.

   A master menu is enclosed in `@menu' and `@end menu' commands and
does not appear in the printed document.

   Generally, a master menu is divided into parts.

   * The first part contains the major nodes in the Texinfo file: the
     nodes for the chapters, chapter-like sections, and the appendices.

   * The second part contains nodes for the indices.

   * The third and subsequent parts contain a listing of the other,
     lower level nodes, often ordered by chapter.  This way, rather
     than go through an intermediary menu, an inquirer can go directly
     to a particular node when searching for specific information. 
     These menu items are not required; add them if you think they are
     a convenience.

   Each section in the menu can be introduced by a descriptive line. 
So long as the line does not begin with an asterisk, it will not be
treated as a menu item.  (*Note Making Menus: menu, for more
information.)

   For example, the master menu for this manual looks like the
following (but has many more entries):

     @menu
     * Copying::             Texinfo is freely
                               redistributable.
     * Overview::            What is Texinfo?
     * Texinfo Mode::        Special features in GNU Emacs.
     ...
     ...
     * Command and Variable Index::
                             An item for each @-command.
     * Concept Index::       An item for each concept.
     
      --- The Detailed Node Listing ---
     
     Overview of Texinfo
     
     * Info Files::          What is an Info file?
     * Printed Manuals::     Characteristics of
                               a printed manual.
     ...
     ...
     
     Using Texinfo Mode
     
     * Info on a Region::    Formatting part of a file
                               for Info.
     ...
     ...
     @end menu


File: texinfo,  Node: Software Copying Conditions,  Next: Sample Permissions,  Prev: The Top Node,  Up: Beginning a File

Software Copying Conditions
===========================

   If the Texinfo file has a section containing the "General Public
License" and the distribution information and a warranty disclaimer
for the software that is documented, this section usually follows the
`Top' node.  The General Public License is very important to Project
GNU software.  It ensures that you and others will continue to have a
right to use and share the software.

   The copying and distribution information and the disclaimer are
followed by an introduction or else by the first chapter of the manual.

   Although an introduction is not a required part of a Texinfo file,
it is very helpful.  Ideally, it should state clearly and concisely
what the file is about and who would be interested in reading it.  In
general, an introduction would follow the licensing and distribution
information, although sometimes people put it earlier in the document. 
Usually, an introduction is put in an `@unnumbered' section.  (*Note
The `@unnumbered' and `@appendix' Commands: unnumbered & appendix.)


File: texinfo,  Node: Sample Permissions,  Prev: Software Copying Conditions,  Up: Beginning a File

Sample Permissions
==================

   Texinfo files should contain sections that tell the readers that
they have the right to copy and distribute the Info file, the printed
manual, and any accompanying software.  Here are samples containing
the standard text of the Free Software Foundation copying permission
notice for an Info file and printed manual.

   *Note Distribution: (emacs)Distrib, for an example of the text that
could be used in the software Distribution, General Public License,
and NO WARRANTY sections of a document.

* Menu:

* Inserting Permissions::       How to put permissions in your document.
* ifinfo Permissions::          Sample `ifinfo' copying permissions.
* Titlepage Permissions::       Sample Titlepage copying permissions.


File: texinfo,  Node: Inserting Permissions,  Next: ifinfo Permissions,  Prev: Sample Permissions,  Up: Sample Permissions

Inserting Permissions
---------------------

   In a Texinfo file, the first `@ifinfo' section usually begins with
a line that says what the file documents.  This is what a person
reading the unprocessed Texinfo file or using the advanced Info
command `g *' sees first.  *note Advanced Info commands: (info)Expert,
for more information. (A reader using the regular Info commands will
usually start reading at the first node and skip this first section,
which is not in a node.)

   In the `@ifinfo' section, the summary sentence should be followed by
a copyright notice and then by the copying permission notice.  One of
the copying permission paragraphs is enclosed in `@ignore' and `@end
ignore' commands.  This paragraph states that the Texinfo file can be
processed through TeX and printed, provided the printed manual carries
the proper copying permission notice.  This paragraph is not made part
of the Info file since it is not relevant to the Info file; but it is
a mandatory part of the Texinfo file since it permits people to
process the Texinfo file in TeX.

   In the printed manual, the Free Software Foundation copying
permission notice follows the copyright notice and publishing
information and is located within the region delineated by the
`@titlepage' and `@end titlepage' commands.  The copying permission
notice is exactly the same as the notice in the `@ifinfo' section
except that the paragraph enclosed in `@ignore' and `@end ignore'
commands is not part of the notice.

   To make it simple to copy the permission notice into each section
of the Texinfo file, the complete permission notices for each section
are reproduced in full below.

   Note that you may have to specify the correct name of a section
mentioned in the permission notice.  For example, in the `GDB Manual',
the name of the section referring to the General Public License is
called the "GDB General Public License", but in the sample shown
below, that section is referred to generically as the "General Public
License".


File: texinfo,  Node: ifinfo Permissions,  Next: Titlepage Permissions,  Prev: Inserting Permissions,  Up: Sample Permissions

`ifinfo' Copying Permissions
----------------------------

   In the `@ifinfo' section of the Texinfo file, the standard Free
Software Foundation permission notices reads as follows:

     This file documents ...
     
     Copyright 1988 Free Software Foundation, Inc.
     
     Permission is granted to make and distribute verbatim
     copies of this manual provided the copyright notice and
     this permission notice are preserved on all copies.
     
     @ignore
     Permission is granted to process this file through TeX
     and print the results, provided the printed document
     carries a copying permission notice identical to this
     one except for the removal of this paragraph (this
     paragraph not being relevant to the printed manual).
     
     @end ignore
     Permission is granted to copy and distribute modified
     versions of this manual under the conditions for
     verbatim copying, provided also that the sections
     entitled ``Distribution'' and ``General Public License''
     are included exactly as in the original, and provided
     that the entire resulting derived work is distributed
     under the terms of a permission notice identical to this
     one.
     
     Permission is granted to copy and distribute
     translations of this manual into another language, under
     the above conditions for modified versions, except that
     the sections entitled ``Distribution'' and ``General
     Public License'' may be included in a translation
     approved by the author instead of in the original
     English.


File: texinfo,  Node: Titlepage Permissions,  Prev: ifinfo Permissions,  Up: Sample Permissions

Titlepage Copying Permissions
-----------------------------

   In the `@titlepage' section of the Texinfo file, the standard Free
Software Foundation copying permission notice follows the copyright
notice and publishing information.  The standard phrasing is:

     Permission is granted to make and distribute verbatim
     copies of this manual provided the copyright notice and
     this permission notice are preserved on all copies.
     
     Permission is granted to copy and distribute modified
     versions of this manual under the conditions for
     verbatim copying, provided also that the sections
     entitled ``Distribution'' and ``General Public License''
     are included exactly as in the original, and provided
     that the entire resulting derived work is distributed
     under the terms of a permission notice identical to this
     one.
     
     Permission is granted to copy and distribute
     translations of this manual into another language, under
     the above conditions for modified versions, except that
     the sections entitled ``Distribution'' and ``General
     Public License'' may be included in a translation
     approved by the author instead of in the original
     English.


File: texinfo,  Node: Ending a File,  Next: Structuring,  Prev: Beginning a File,  Up: Top

Ending a Texinfo File
*********************

   The end of a Texinfo file should include the commands that create
indices and generate detailed and summary tables of contents.  And it
must include the `@bye' command that marks the last line that TeX
processes.

   For example,

     @node    Concept Index,     , Variables Index, Top
     @comment node-name,     next, previous,      up
     @unnumbered Concept Index
     
     @printindex cp
     
     @contents
     @bye

* Menu:

* Printing Indices & Menus::    Printing an index and generating index menus.
* Contents::                    Generating a table of contents.
* File End::                    Ending a file with `@bye'.


File: texinfo,  Node: Printing Indices & Menus,  Next: Contents,  Prev: Ending a File,  Up: Ending a File

Index Menus and Printing an Index
=================================

   To print an index means to include it as part of a manual or Info
file.  This does not happen automatically just because you use
`@cindex' or other index-entry generating commands in the Texinfo
file; those just cause the raw data for the index to be accumulated. 
To generate an index, you must include the `@printindex' command at
the place in the document where you want the index to appear.  Also,
as part of the process of creating a printed manual, you must run a
program called `texindex' (*note Printing Hardcopy::.) to sort the raw
data to produce a sorted index file.  The sorted index file is what
will actually be used to print the index.

   Texinfo offers six different types of predefined index: the concept
index, the function index, etc.  (*Note Predefined Indices::.)  Each
index type has a two-letter name.  You may merge indices, or put them
into separate sections (*Note Combining Indices::.).

   The `@printindex' command takes a two-letter index name, reads the
corresponding sorted index file and formats it appropriately into an
index.

   The `@printindex' command does not generate a chapter heading for
the index.  Consequently, you should precede the `@printindex' command
with a suitable section or chapter command (usually `@unnumbered') to
supply the chapter heading and put the index into the table of
contents.  Precede the `@unnumbered' command with an `@node' line. 
For example,

     @node Variables Index, Concept Index, Function Index, Top
     @comment    node-name,          next,       previous,  up
     @unnumbered Variable Index
     
     @printindex vr
     
     @node     Concept Index,     , Variables Index, Top
     @comment      node-name, next,        previous,  up
     @unnumbered Concept Index
     
     @printindex cp
     
     @summarycontents
     @contents
     @bye

(Readers often prefer that the concept index come last in a book,
since that makes it easiest to find.)


File: texinfo,  Node: Contents,  Next: File End,  Prev: Printing Indices & Menus,  Up: Ending a File

Generating a Table of Contents
==============================

   The `@chapter', `@section', and other structuring commands supply
the information to make up a table of contents, but they do not cause
an actual table to appear in the manual.  To do this, you must use the
`@contents' and `@summarycontents' commands.

`@contents'
     Generate a table of contents in a printed manual, including all
     chapters, sections, subsections, etc., as well as appendices and
     unnumbered chapters.  (Headings generated by the `@heading'
     series of commands do not appear in the table of contents.)  The
     `@contents' command should be written on a line by itself.

`@shortcontents'
`@summarycontents'
     (`@summarycontents' is a synonym for `@shortcontents'; the two
     commands are exactly the same.)

     Generate a short or summary table of contents that lists only the
     chapters (and appendices and unnumbered chapters); sections,
     subsections and subsubsections are omitted.  Write the
     `@shortcontents' command on a line by itself immediately before
     the `@contents' command.  Only a long manual needs a short table
     of contents in addition to the full table of contents.

   The table of contents commands automatically generate a chapter-like
heading at the top of the first table of contents page.  Write tables
of contents commands at the very end of a Texinfo file, just before
the `@bye' command, following any index sections--anything in the
Texinfo file after the table of contents commands will be omitted from
the table of contents.  When you print a manual with a table of
contents, the table of contents will be printed last and numbered with
roman numerals.  You need to place those pages in their proper place,
after the title page, yourself.  (This is the only collating you need
to do for a printed manual.  The table of contents is printed last
because it is generated after the rest of the manual is typeset.)

   Here is an example of where to write table of contents commands:

     INDICES...
     @shortcontents
     @contents
     @bye

   Since an Info file uses menus instead of tables of contents, the
Info formatting commands ignore the `@contents' and `@shortcontents'
commands.


File: texinfo,  Node: File End,  Prev: Contents,  Up: Ending a File

`@bye' File Ending
==================

   An `@bye' command terminates TeX or Info formatting.  None of the
formatting commands see any of the file following `@bye'.  The `@bye'
command should be on a line by itself.

   Optionally, you may follow an `@bye' line with a local variables
list.  *Note Using Local Variables and the Compile Command:
Compile-Command, for more information.


File: texinfo,  Node: Structuring,  Next: Nodes & Menus,  Prev: Ending a File,  Up: Top

Chapter Structuring
*******************

   The chapter structuring commands divide a document into a hierarchy
of chapters, sections, subsections, and subsubsections.  These commands
generate large headings; they also provide information for the table
of contents of a printed manual (*note Generating a Table of Contents:
Contents.).

   The chapter structuring commands do not create an Info node
structure, so normally you should put an `@node' command immediately
before each chapter structuring command (*note Nodes and Menus: Nodes
& Menus.).  The only time you are likely to use the chapter structuring
commands without using the node structuring commands is if you are
writing a document that contains no cross references and will never be
transformed into Info format.

   It is unlikely that you will ever write a Texinfo file that is
intended only as an Info file and not as a printable document.  If you
do, you might still use chapter structuring commands to create a
heading at the top of each node--but you don't have to.

* Menu:

* Tree Structuring::            A manual is like an upside down tree ...
* Structuring Command Types::   How to divide a manual into parts.
* makeinfo top::                `@top'
* chapter::
* unnumbered & appendix::
* majorheading & chapheading::
* section::
* unnumberedsec appendixsec heading::
* subsection::
* unnumberedsubsec appendixsubsec subheading::
* subsubsection::               Commands for the lowest level sections.


File: texinfo,  Node: Tree Structuring,  Next: Structuring Command Types,  Prev: Structuring,  Up: Structuring

Tree Structure of Sections
==========================

   A Texinfo file is usually structured like a book with chapters,
sections, subsections, and the like.  This structure can be visualized
as a tree (or rather as an upside-down tree) with the root at the top
and the levels corresponding to chapters, sections, subsection, and
subsubsections.  In Info format, `Next' and `Previous' pointers of a
node usually lead to other nodes at the same level; an `Up' pointer
usually leads to a node at the level above; and a `Menu' leads to
nodes at a level below.  Cross references can point to nodes at any
level.  *Note Cross References::.

   Here is a diagram that shows a Texinfo file with three chapters,
each of which has two sections.

     top
                                |
              -------------------------------------
             |                  |                  |
          Chapter 1          Chapter 2          Chapter 3
             |                  |                  |
          --------           --------           --------
         |        |         |        |         |        |
      Section  Section   Section  Section   Section  Section
        1.1      1.2       2.1      2.2       3.1      3.2

   In a Texinfo file that has this structure, the beginning of Chapter
2 looks like this:

     @node    Chapter 2,  Chapter 3, Chapter 1, top
     @chapter Chapter 2

   The chapter structuring commands are described in the sections that
follow; the `@node' and `@menu' commands are described in the
following chapter (*note Nodes & Menus::.).


File: texinfo,  Node: Structuring Command Types,  Next: makeinfo top,  Prev: Tree Structuring,  Up: Structuring

Types of Structuring Command
============================

   The chapter structuring commands fall into four groups or series,
each of which contains structuring commands corresponding to the
hierarchical levels of chapters, sections, subsections, and
subsubsections.

   The four groups are the `@chapter' series, the `@unnumbered'
series, the `@appendix' series, and the `@heading' series.

   Each command produces titles that have a different appearance on the
printed page or Info file; only some of the commands produce titles
that are listed in the table of contents of a printed book or manual.

   * The `@chapter' and `@appendix' series of commands produce
     numbered or lettered entries both in the body of a printed work
     and in its table of contents.

   * The `@unnumbered' series of commands produce unnumbered entries
     both in the body of a printed work and in its table of contents. 
     The `@top' command, which has a special use, is a member of this
     series. *Note `@top': makeinfo top.

   * The `@heading' series of commands produce unnumbered headings
     that do not appear in a table of contents.  The heading commands
     never start a new page.

   * The `@majorheading' command produces results similar to using the
     `@chapheading' command but generates a larger vertical whitespace
     before the heading.

   * When an `@setchapternewpage' command says to do so, the
     `@chapter', `@unnumbered', and `@appendix' commands start new
     pages in the printed manual; the `@heading' commands do not.

   Here are the four groups of chapter structuring commands:

     No new pages
     Numbered       Unnumbered       Lettered and numbered  Unnumbered
     In contents    In contents          In contents        Not in contents
     
                    @top                                    @majorheading
     @chapter       @unnumbered          @appendix          @chapheading
     @section       @unnumberedsec       @appendixsec       @heading
     @subsection    @unnumberedsubsec    @appendixsubsec    @subheading
     @subsubsection @unnumberedsubsubsec @appendixsubsubsec @subsubheading


File: texinfo,  Node: makeinfo top,  Next: chapter,  Prev: Structuring Command Types,  Up: Structuring

`@top'
======

   A special sectioning command, `@top', has been created for use with
the `@node Top' line.  The `@top' command tells `makeinfo' that it
marks the `Top' node in the file.  It provides the information that
`makeinfo' needs to insert node pointers automatically.  Write the
`@top' at the beginning of the line immediately following the `@node
Top' line.  Write the title on the remaining part of the same line as
the `@top' command.

   In Info, the `@top' command causes the title to appear on a line by
itself, with a line of asterisks inserted underneath.

   In TeX and `texinfo-format-buffer', the `@top' command is merely a
synonym for `@unnumbered'.  Neither of these formatters require an
`@top' command, and do nothing special with it.  You can use
`@chapter' (or some other sectioning command) after the `@node Top'
line when you are formatting with `texinfo-format-buffer'; you can do
the same when you are using the Texinfo updating commands to create or
update pointers and menus.

   Whatever sectioning command follows an `@node Top' line, whether it
be `@top' or `@chapter', the `@node Top' line and the immediately
following line and any additional text must be enclosed between
`@ifinfo' and `@end ifinfo' commands.  (*Note Conditionals::.)  This
prevents the title and the accompanying text from appearing in printed
output.  Write the `@ifinfo' command before the node line and write
the `@end ifinfo' command after the `@top' or other sectioning command
and after any additional text.  (You can write the `@end ifinfo'
command after the `@end menu' command if you like.)

   You can help readers by writing a summary after the `@top' line. 
The summary should briefly describe the Info file.  You should also
write the version number of the program to which the manual applies in
this section.  This helps the reader keep track of which manual is for
which version of the program.  If the manual changes more frequently
than the program or is independent of it, you should also include an
edition number for the manual.  (The title page should also contain
this information. *Note `@titlepage': titlepage.)


File: texinfo,  Node: chapter,  Next: unnumbered & appendix,  Prev: makeinfo top,  Up: Structuring

`@chapter'
==========

   `@chapter' identifies a chapter in the document.  Write the command
at the beginning of a line and follow it on the same line by the title
of the chapter.

   For example, this chapter in this manual is entitled "Chapter
Structuring"; the `@chapter' line looks like this:

     @chapter Chapter Structuring

   In TeX, the `@chapter' command creates a chapter in the document,
specifying the chapter title.  The chapter is numbered automatically.

   In Info, the `@chapter' command causes the title to appear on a
line by itself, with a line of asterisks inserted underneath.  Thus,
in Info, the above example produces the following output:

     Chapter Structuring
     *******************


File: texinfo,  Node: unnumbered & appendix,  Next: majorheading & chapheading,  Prev: chapter,  Up: Structuring

`@unnumbered', `@appendix'
==========================

   Use the `@unnumbered' command to create a chapter that appears in a
printed manual without chapter numbers of any kind.  Use the
`@appendix' command to create an appendix in a printed manual that is
labelled by letter instead of by number.

   For Info file output, the `@unnumbered' and `@appendix' commands
are equivalent to `@chapter': the title is printed on a line by itself
with a line of asterisks underneath.  (*Note  `@chapter': chapter.)

   To create an appendix or an unnumbered chapter, write an
`@appendix' or `@unnumbered' command at the beginning of a line and
follow it on the same line by the title, as you would if you were
creating a chapter.


File: texinfo,  Node: majorheading & chapheading,  Next: section,  Prev: unnumbered & appendix,  Up: Structuring

`@majorheading', `@chapheading'
===============================

   The `@majorheading' and `@chapheading' commands put chapter-like
headings in the body of a document.

   However, neither command causes TeX to produce a numbered heading
or an entry in the table of contents; and neither command causes TeX
to start a new page in a printed manual.

   In TeX, a `@majorheading' command generates a larger vertical
whitespace before the heading than a `@chapheading' command but is
otherwise the same.

   For Info file output, the `@majorheading' and `@chapheading'
commands are equivalent to `@chapter': the title is printed on a line
by itself with a line of asterisks underneath.  (*Note `@chapter':
chapter.)


File: texinfo,  Node: section,  Next: unnumberedsec appendixsec heading,  Prev: majorheading & chapheading,  Up: Structuring

`@section'
==========

   In a printed manual, an `@section' command identifies a numbered
section within a chapter.  The section title appears in the table of
contents.  In Info, an `@section' command provides a title for a
segment of text, underlined with `='.

   To create a section, write the `@section' command at the beginning
of a line and follow it on the same line by the section title.

   Thus,

     @section This is a section

produces

     This is a section
     =================

in Info.


File: texinfo,  Node: unnumberedsec appendixsec heading,  Next: subsection,  Prev: section,  Up: Structuring

`@unnumberedsec', `@appendixsec', `@heading'
============================================

   The `@unnumberedsec', `@appendixsec', and `@heading' commands are,
respectively, the unnumbered, appendix-like, and heading-like
equivalents of the `@section' command.  (*Note `@section': section.)

`@appendixsec'
`@appendixsection'
     `@appendixsection' is a longer spelling of the `@appendixsec'
     command; it is a synonym for the `@appendixsec' command.

     Conventionally, the `@appendixsec' or `@appendixsection' command
     is used only within appendices.

`@unnumberedsec'
     The `@unnumberedsec' command may be used within an unnumbered
     chapter or within a regular chapter or appendix to provide an
     unnumbered section.

`@heading'
     You may use the `@heading' command anywhere you wish for a
     section-style heading that will not appear in the table of
     contents.


File: texinfo,  Node: subsection,  Next: unnumberedsubsec appendixsubsec subheading,  Prev: unnumberedsec appendixsec heading,  Up: Structuring

The `@subsection' Command
=========================

   Subsections are to sections as sections are to chapters.  (*Note
`@section': section.)  In Info, subsection titles are underlined with
`-'.  For example,

     @subsection This is a subsection

produces

     This is a subsection
     --------------------

   In a printed manual, subsections are listed in the table of contents
and are numbered three levels deep.


File: texinfo,  Node: unnumberedsubsec appendixsubsec subheading,  Next: subsubsection,  Prev: subsection,  Up: Structuring

The `@subsection'-like Commands
===============================

   The `@unnumberedsubsec', `@appendixsubsec', and `@subheading'
commands are, respectively, the unnumbered, appendix-like, and
heading-like equivalents of the `@subsection' command.  (*Note
`@subsection': subsection.)

   In Info, the `@subsection'-like commands generate a title
underlined with hyphens.  In a printed manual, an `@subheading'
command produces a heading like that of a subsection except that it is
not numbered and does not appear in the table of contents.  Similarly,
an `@unnumberedsubsec' command produces an unnumbered heading like
that of a subsection and an `@appendixsubsec' command produces a
subsection-like heading labelled with a letter and numbers


File: texinfo,  Node: subsubsection,  Prev: unnumberedsubsec appendixsubsec subheading,  Up: Structuring

The `subsub' Commands
=====================

   The fourth and lowest level sectioning commands in Texinfo are the
`subsub' commands.  They are:

`@subsubsection'
     Subsubsections are to subsections as subsections are to sections. 
     (*Note `@subsection': subsection.)  In a printed manual,
     subsubsection titles appear in the table of contents and are
     numbered four levels deep.

`@unnumberedsubsubsec'
     Unnumbered subsubsection titles appear in the table of contents
     of a printed manual, but lack numbers.  Otherwise, unnumbered
     subsubsections are the same as subsubsections.  In Info,
     unnumbered subsubsections look exactly like ordinary
     subsubsections.

`@appendixsubsubsec'
     Conventionally, appendix commands are used only for appendices
     and are lettered and numbered appropriately in a printed manual. 
     In Info, appendix subsubsections look exactly like ordinary
     subsubsections.

`@subsubheading'
     The `@subsubheading' command may be used anywhere that you need a
     small heading that will not appear in the table of contents.  In
     Info, subsubheadings look exactly like ordinary subsubsection
     headings.

   In Info,  `subsub' titles are underlined with periods.  For example,

     @subsubsection This is a subsubsection

produces

     This is a subsubsection
     .......................


File: texinfo,  Node: Nodes & Menus,  Next: Cross References,  Prev: Structuring,  Up: Top

Nodes and Menus
***************

   Most Texinfo files are organized hierarchically like books, with
chapters, sections, subsections, and subsubsections.  Such a hierarchy
is tree-like; the chapters are the major limbs from which the sections
branch out.  In a conventional diagram, however, such a hierarchy is
drawn with the "root" at the top and the "leaves" at the bottom--as an
upside-down tree.  The root node is called the `Top' node, and `Up'
pointers carry you closer to the root.

* Menu:

* Node Menu Illustration::      A diagram and sample nodes and menus.
* node::                        The `@node' command in detail.
* Node Names::                  Choosing Node and Pointer Names
* makeinfo Pointer Creation::   Creating Pointers with `makeinfo'
* menu::                        The `@menu' command in detail.
* Other Info Files::            Referring to nodes in other Info files.
* Invocation::                  Describing command invocation.


File: texinfo,  Node: Node Menu Illustration,  Next: node,  Prev: Nodes & Menus,  Up: Nodes & Menus

Node and Menu Illustration
==========================

   Here is a copy of the diagram shown earlier that illustrates a
Texinfo file with three chapters, each of which contains two sections.

     top
                                |
              -------------------------------------
             |                  |                  |
          Chapter 1          Chapter 2          Chapter 3
             |                  |                  |
          --------           --------           --------
         |        |         |        |         |        |
      Section  Section   Section  Section   Section  Section
        1.1      1.2       2.1      2.2       3.1      3.2

   In a Texinfo file that has this organization, you would write the
beginning of the node for Chapter 2 like this:

     @node     Chapter 2,  Chapter 3, Chapter 1, top
     @comment  node-name,  next,      previous,  up

   To go to Sections 2.1 and 2.2 using Info, you need a menu inside
Chapter 2 that says:

         @menu
         * Sect. 2.1::    Description of this section.
         * Sect. 2.2::
         @end menu

You would locate this menu inside Chapter 2, after the beginning of
the chapter and before Section 2.1.

   The node for Sect. 2.1 will look like this:

         @node     Sect. 2.1, Sect. 2.2, Chapter 2, Chapter 2
         @comment  node-name, next,      previous,  up

   Usually, an `@node' command and a chapter structuring command are
used in sequence, along with indexing commands.  (The updating
commands require this sequence.  *Note Updating Requirements::.)  Also,
you may want to follow the `@node' line with a comment line that
reminds you which pointer is which.  For example, the beginning of the
node for the chapter on ending a file looks like this:

     @node    Ending a File, Structuring, Beginning a File, Top
     @comment node-name,     next,        previous,         up
     @chapter Ending a Texinfo File
     @cindex Ending a Texinfo file
     @cindex Texinfo file ending
     @cindex File ending

   The following two sections describe the `@node' and `@menu'
commands in detail.


File: texinfo,  Node: node,  Next: Node Names,  Prev: Node Menu Illustration,  Up: Nodes & Menus

`@node'
=======

   `@node' defines the beginning of a new node in the Info output
file.   (*note info: (info)Top.)  Write the command at the beginning
of a line, followed by four arguments, separated by commas, that make
up the rest of the line.  These arguments are the name of the node,
and the names of the `Next', `Previous', and `Up' pointers, in that
order.  You may insert spaces before each pointer if you wish.  The
spaces are ignored.

   In TeX, `@node' is nearly ignored.  It generates nothing visible. 
Its only function is to identify the name to use for cross references
to the chapter or section which follows the `@node' command and which
makes up the body of the node.  (Cross references, such as the one
following this sentence, are made with `@xref' and its related
commands.  *Note Cross References::.)

   In general, an `@node' line is followed immediately by a
chapter-structuring command such as `@chapter', `@section',
`@subsection', or `@subsubsection'.  (*Note Types of Structuring
Command: Structuring Command Types.)

* Menu:

* Node Names::                  Choosing node and pointer names.
* Writing a Node::              How to write a node line.


File: texinfo,  Node: Node Names,  Next: makeinfo Pointer Creation,  Prev: node,  Up: Nodes & Menus

Choosing Node and Pointer Names
===============================

   The name of the node identifies the node.  The pointers, which
enable you to reach other nodes, consist of the names of those nodes.

   All the node names for a single Info file must be unique. 
Duplications confuse the Info movement commands.  This means, for
example, that if you end each chapter with a summary, you must name
every summary node differently.  You may, however, duplicate section
titles (although this practice may confuse a reader).

   Try to pick node names that are informative but short.  In the Info
file, the file name, node name, and pointer names are all inserted on
one line, which may run into the right edge of the window.  (This does
not cause a problem with Info, but is ugly.)

   By convention, node names are capitalized just as they would be for
section or chapter titles.

     *Caution:* Do not use any of the Texinfo @-commands in a node
     name; these commands confuse Info.

     Do not use commas within a node name; a comma terminates the node
     name.

     Do not use apostrophes within a node name; an apostrophe confuses
     the internals of `texinfo.tex'.

   Pointer names must be the names of nodes defined elsewhere.  It does
not matter whether pointers are before or after the node that refers
to them.

   Normally, a node's `Up' pointer should contain the name of the node
whose menu mentions that node.  The node's `Next' pointer should
contain the name of the node that follows that node and its `Previous'
pointer should contain the name of the node that precedes it in that
menu.  When a node's `Up' node is the same as its `Previous' node,
both node pointers should name the same node.

* Menu:

* Writing a Node::              Writing a Node Line


File: texinfo,  Node: Writing a Node,  Prev: Node Names,  Up: Node Names

Writing a Node Line
-------------------

   The easiest way to write a node line is to write `@node' at the
beginning of a line and then the name of the node.  You can use update
node commands provided by Texinfo mode to insert the names of the
pointers; or you can leave the pointers out of the Texinfo file and
have `makeinfo' insert pointers into the Info file it creates.  (*Note
Texinfo Mode::, and *Note makeinfo Pointer Creation::.)

   Alternatively, you may insert the `Next', `Previous', and `Up'
pointers yourself.  If you do this, you may find it helpful to use the
Texinfo mode keyboard command `C-c C-c n'.  This command inserts
`@node' and a comment line listing the names of the pointers in their
proper order.  The comment line helps you keep track of which
arguments are for which pointers.  This template is especially useful
if you are not familiar with Texinfo.

   If you wish, you can ignore node lines altogether in your first
draft and then use the `texinfo-insert-node-lines' command to create
node lines for you.  However, this practice is not recommended.  It is
better to name the node itself at the same time you write a section so
you can easily make cross references.  A large number of cross
references are an especially important feature of a good Info file.

   After you have inserted a node line, you should immediately write an
@-command for the chapter or section and insert its name.  Next (and
this is important!), put in several index entries.  Usually, you will
find at least two and often as many as four or five ways of referring
to the node in the index.  Use them all.  This will make it much
easier for people to find the node.

   The top node of the file (which must be named `top' or `Top')
should have as its `Up' and `Previous' nodes the name of a node in
another file, where there is a menu that leads to this file.  Specify
the file name in parentheses.  If the file is to be installed directly
in the Info directory file, use `(dir)' as the parent of the `Top'
node; this is short for `(dir)top', and specifies the `Top' node in
the `dir' file, which contains the main menu for Info.  For example,
the `Top' node line of this manual looks like this:

     @node Top, Overview, (dir), (dir)

(You may use the Texinfo updating commands or the `makeinfo' utility
to insert these `Next' and `(dir)' pointers automatically.)

   *Note Installing an Info File::, for more information about
installing an Info file in the `info' directory.


File: texinfo,  Node: makeinfo Pointer Creation,  Next: menu,  Prev: Node Names,  Up: Nodes & Menus

Creating Pointers with `makeinfo'
=================================

   The `makeinfo' program has a feature for automatically creating
node pointers for a hierarchically organized file that lacks them.

   When you take advantage of this feature, you do not have to write
the `Next', `Previous', and `Up' pointers after the name of a node. 
However, you must write a sectioning command, such as `@chapter' or
`@section', on the line immediately following each truncated `@node'
line.  (You cannot write a comment line after a node line; the section
line must follow it immediately.)

   In addition, you must follow the `Top' node line with a line
beginning with `@top' to mark the `Top' node in the file. *Note
`@top': makeinfo top.

   Finally, you must write the name of each node (except for the `Top'
node) in a menu that is one or more hierarchical levels above the
node's hierarchical level.

   This node pointer insertion feature in `makeinfo' is an alternative
to the menu and pointer creation and update commands in Texinfo mode. 
(*Note Updating Nodes and Menus::.)  It is especially helpful to
people who do not use GNU Emacs to for writing Texinfo documents.


File: texinfo,  Node: menu,  Next: Other Info Files,  Prev: makeinfo Pointer Creation,  Up: Nodes & Menus

`@menu'
=======

   The `@menu' command is used to create "menus", which contain
pointers to subordinate nodes.  In Info, you use menus to go to such
nodes.  Menus have no effect in printed manuals and do not appear in
them.

   By convention, a menu is put at the end of a node.  This way, it is
easy for someone using Info to find the menu, using the `M->'
(`end-of-buffer') command.

   *A node that has a menu should not contain much text.* If you have
a lot of text and a menu, move most of the text into a new
subnode--all but a few lines.

* Menu:

* Menu Location::               Put a menu in a short node.
* Menu Item::                   How to write a menu item.
* Menu Example::                A menu example.


File: texinfo,  Node: Menu Location,  Next: Menu Item,  Prev: menu,  Up: menu

Menus Need Short Nodes
----------------------

   A reader can easily see a menu that is close to the beginning of the
node.  The node should be short.  As a practical matter, you should
locate a menu within 20 lines of the beginning of the node. 
Otherwise, a reader with a terminal that displays only a few lines may
miss the menu and its associated text.

   The short text before a menu may look awkward in a printed manual. 
To avoid this, you can write a menu near the beginning of its node and
follow the menu by an `@node' line and an `@heading' line within
`@ifinfo' and `@end ifinfo'.  This way, the menu, node line, and title
appear only in the Info file, not the printed document.

   The preceding two paragraphs follow an Info-only menu, node line,
and heading, and look like this:

     @menu
     * Menu Location::               Put a menu in a short node.
     * Menu Item::                   How to write a menu item.
     * Menu Example::                A menu example.
     @end menu
     
     @node Menu Location
     @ifinfo
     @subheading Menus Need Short Nodes
     @end ifinfo

   See the beginning of the "Cross References" chapter in the Texinfo
source for this document for another example this procedure.


File: texinfo,  Node: Menu Item,  Next: Menu Example,  Prev: Menu Location,  Up: menu

Writing a Menu Item
-------------------

   In a menu, every line that begins with a `* ' is a menu item. 
(Note the space after the asterisk.)  A line that does not start with
a `* ' can appear in the menu but is not a menu item, just a comment.

   A menu item has three parts, only the second of which is required:

  1. The menu item name.

  2. The name of the node.

  3. A description of the item.

   A menu item looks like this:

     * Item name: Node name.      Description.

   Follow the menu item name with a single colon and follow the node
name with tab, comma, period, or newline.

   In Info, a user can select a node with the `m' (`Info-menu')
command.  The menu item name is what the user types after the `m'
command.

   If the menu item name and the node name are the same, you can write
the name immediately after the asterisk and space at the beginning of
the line and follow the name with two colons.

   For example, write

     * Name::

instead of

     * Name: Name.

You should use the node name for the menu item name whenever possible,
since it reduces visual clutter in the menu.

   The third part of a menu entry is a short descriptive phrase or
sentence.  Menu item names and node names are often short; the
description explains to the reader what the node is about.  The
description, which is optional, can spread over two or more lines.  A
useful description complements the node name rather than repeating it.


File: texinfo,  Node: Menu Example,  Prev: Menu Item,  Up: menu

A Menu Example
--------------

   A menu looks like this in Texinfo:

     @menu
     * Menu item name: Node name.    A short description.
     * Node name::                   This form is preferred.
     @end menu

This produces:

     * menu:
     
     * Menu item name: Node name.    A short description.
     * Node name::                   This form is preferred.

   Here is an example as you might see it in a Texinfo file:

     @menu
     Larger Units of Text
     
     * Files::                 All about handling files.
     * Multiples: Buffers.     Multiple buffers; editing
                                 several files at once.
     @end menu

This produces:

     * menu:
     Larger Units of Text
     
     * Files::                 All about handling files.
     * Multiples: Buffers.     Multiple buffers; editing
                                 several files at once.

   In this example, the menu has two entries.  `Files' is both a menu
item name and the name of the node referred to by that item.  In the
other entry, `Multiples' is the item name, and it refers to the node
named `Buffers'.

   Since no file name is specified with either `Files' or `Buffers',
they must be the names of nodes in the same Info file.  (*Note
Referring to Other Info Files: Other Info Files.)

   The line `Larger Units of Text' is a comment.


File: texinfo,  Node: Other Info Files,  Next: Invocation,  Prev: menu,  Up: Nodes & Menus

Referring to Other Info Files
=============================

   You can refer to nodes in other Info files by writing the file name
in parentheses just before the node name.  In this case, you should use
the three-part menu item format, which saves the reader from having to
type the file name.

   If you do not list the node name, but only name the file, then Info
presumes that you are referring to the `Top' node.

   The format looks like this:

     @menu
     * FIRST-ITEM:(FILENAME)NODENAME.           DESCRIPTION
     * SECOND-ITEM:(FILENAME)SECOND-NODE.       DESCRIPTION
     @end menu

   The `dir' top level directory for the Info system has menu entries
that take you directly to the `Top' nodes of each Info document. 
(*Note Installing an Info File::.)

   For example,

     ...
     * Info: (info).         Documentation browsing system.
     * Emacs: (emacs).       The extensible, self-documenting
                             text editor.
     ...

   To refer directly to the `Outlining' and `Rebinding' nodes in the
`Emacs Manual', you would write a menu similar to the following:

     @menu
     * Outlining: (emacs)Outline Mode. The major mode for
                                       editing outlines.
     * Rebinding: (emacs)Rebinding.    How to redefine the
                                       meaning of a key.
     @end menu

