This is Info file texinfo, produced by Makeinfo-1.43 from the input
file texinfo2.texi.

   This file documents Texinfo, a documentation system that uses a
single source file to produce both on-line information and a printed
manual.

   This is edition 2.14 of the Texinfo documentation,
14 February 1992, for Texinfo version 2.

   Copyright (C) 1988, 1990, 1991, 1992 Free Software Foundation, Inc.

   This is the second edition of the Texinfo documentation,
 and is consistent with version 2 of `texinfo.tex'.

   Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by the Foundation.


File: texinfo,  Node: Top,  Next: Copying,  Prev: (dir),  Up: (dir)

Texinfo
*******

   Texinfo is a documentation system that uses a single source file to
produce both on-line information and a printed manual.

   The first part of this master menu lists the major nodes in this
Info document, including the @-command and concept indices.  The rest
of the menu lists all the lower level nodes in the document.

   This is edition 2.14 of the Texinfo documentation,
14 February 1992, for Texinfo version 2.

* Menu:

* Copying::                     Texinfo Copying Conditions
* Overview::                    Overview of Texinfo
* Texinfo Mode::                Using Texinfo Mode
* Beginning a File::            Beginning a Texinfo File
* Ending a File::               Ending a Texinfo File
* Structuring::                 Chapter Structuring
* Nodes & Menus::               Nodes and Menus
* Cross References::            Making Cross References
* Marking Text::                Marking Words and Phrases
* Insertions::                  Special Insertions
* Quotations and Examples::     Quotations and Examples
* Special Glyphs::              Special Glyphs for Examples
* Lists and Tables::            Making Lists and Tables
* Definition Commands::         Definition Commands: `@deffn', etc.
* Footnotes::                   Footnotes
* Indices::                     Creating Indices
* Breaks::                      Making and Preventing Breaks
* Conditionals::                Conditionally Visible Text
* Printing Hardcopy::           Printing Hardcopy
* Creating an Info File::       Creating an Info File
* Installing an Info File::     Installing an Info File
* Command List::                @-Command List
* Include Files::               Include Files
* Headings::                    Page Headings
* Catching Mistakes::           Formatting Mistakes
* Refilling Paragraphs::        Refilling Paragraphs
* Command Syntax::              @-Command Syntax
* New Features::                Second Edition Features
* Command and Variable Index::  Command and Variable Index
* Concept Index::               Concept Index

 -- The Detailed Node Listing --

Overview of Texinfo

* Using Texinfo::               Create an normal printed book
                                  or an Info file.
* Info Files::                  What is an Info file?
* Printed Manuals::             Characteristics of a printed manual
* Formatting Commands::         @-commands are used for formatting.
* Conventions::                 General syntactic conventions in Texinfo
* Comments::                    How to write comments and mark regions that
                                  the formatting commands will ignore.
* Minimum::                     What a Texinfo file must have.
* Six Parts::                   Six parts of a Texinfo file.
* Short Sample::                A short sample Texinfo file.

Printed Manuals

* Obtaining TeX::               How to obtain TeX from
                                  the University of Washington.

Using Texinfo Mode

* Emacs Editing::               Texinfo mode adds to the usual
                                  editing commands.
* Inserting::                   How to insert frequently used commands.
* Showing the Structure::       How to show the structure of a file.
* Updating Nodes and Menus::    How to update or create new nodes and menus.
* Info Formatting::             Formatting for Info.
* Printing::                    How to format and print part or all of a file.
* Texinfo Mode Summary::        Summary of all the Texinfo mode commands.

Updating Nodes and Menus

* Updating Commands::           Five major updating commands.
* Updating Requirements::       How to structure a Texinfo file for
                                  using the updating command.
* Other Updating Commands::     Indenting descriptions, inserting
                                  missing nodes lines, and updating
                                  nodes in sequence.

Beginning a Texinfo File

* Four Parts::                  Four parts begin a Texinfo file.
* Sample Beginning::            Here is a sample beginning for a Texinfo file.
* Header::                      The very beginning of a Texinfo file.
* Info Summary and Permissions::  Summary and copying permissions for Info.
* Titlepage & Copyright Page::  Creating the title and copyright pages.
* The Top Node::                Creating the top node and master menu.
* Software Copying Conditions::  Software Copying Conditions
* Sample Permissions::          Sample Permissions

The Texinfo File Header

* First Line::                  The first line of a Texinfo file.
* Start of Header::             Formatting a region requires this.
* setfilename::                 Tell Info the name of the Info file.
* settitle::                    Create a title for the printed work.
* setchapternewpage::           Start chapters on right-hand pages.
* paragraphindent::             Paragraph Indenting
* End of Header::               Formatting a region requires this.

The Title and Copyright Pages

* titlepage::                   Create a title for the printed document.
* titlefont center sp::         The `@titlefont', `@center',
                                  and `@sp' commands.
* title subtitle author::       The `@title', `@subtitle',
                                  and `@author' commands.
* Copyright & Printed Permissions::  The copyright page and
                                  printed permissions.
* end titlepage::               Turn on headings after the title and
                                  copyright pages.
* headings on off::             Turning headings on and off.

The Top Node and Master Menu

* Title of Top Node::           A Top node needs a title.
* Master Menu Parts::           A master menu has three or more parts.

Sample Permissions

* Inserting Permissions::       How to put permissions in your document.
* ifinfo Permissions::          Sample `ifinfo' copying permissions.
* Titlepage Permissions::       Sample Titlepage copying permissions.

Ending a Texinfo File

* Printing Indices & Menus::    Printing an index and generating index menus.
* Contents::                    Generating a table of contents.
* File End::                    Ending a file with `@bye'.

Chapter Structuring

* Tree Structuring::            A manual is like an upside down tree ...
* Structuring Command Types::   How to divide a manual into parts.
* makeinfo top::                `@top'
* chapter::
* unnumbered & appendix::
* majorheading & chapheading::
* section::
* unnumberedsec appendixsec heading::
* subsection::
* unnumberedsubsec appendixsubsec subheading::
* subsubsection::               Commands for the lowest level sections.

Nodes and Menus

* Node Menu Illustration::      A diagram and sample nodes and menus.
* node::                        The `@node' command in detail.
* Node Names::                  Choosing Node and Pointer Names
* makeinfo Pointer Creation::   Creating Pointers with `makeinfo'
* menu::                        The `@menu' command in detail.
* Other Info Files::            Referring to nodes in other Info files.
* Invocation::                  Describing command invocation.

Nodes and Menus

* Node Names::                  Choosing node and pointer names.
* Writing a Node::              How to write a node line.

Choosing Node and Pointer Names

* Writing a Node::              Writing a Node Line

`@menu'

* Menu Location::               Put a menu in a short node.
* Menu Item::                   How to write a menu item.
* Menu Example::                A menu example.

Making Cross References

* References::                  What cross references are for.
* Cross Reference Commands::    A summary of the different commands.
* Cross Reference Parts::       A cross reference has several parts.
* xref::                        Begin a reference with `See' ...
* Top Node Naming::             Naming a `Top' Node
* ref::                         A reference for the last part of a sentence.
* pxref::                       How to write a parenthetical cross reference.
* inforef::                     How to refer to an Info-only file.

`@xref'

* Reference Syntax::            What a reference looks like and requires.
* One Argument::                `@xref' with one argument.
* Two Arguments::               `@xref' with two arguments.
* Three Arguments::             `@xref' with three arguments.
* Four and Five Arguments::     `@xref' with Four and Five Arguments

Marking Words and Phrases

* Indicating::                  Indicating definitions, files, commands etc.
* Emphasis::                    How to emphasize text.

Indicating Definitions, Commands, etc.

* Useful Highlighting::         Highlighting provides useful information.
* code::                        How to indicate code.
* kbd::                         How to show keyboard input.
* key::                         How to specify keys.
* samp::                        How to show a literal sequence of characters.
* var::                         How to indicate a metasyntactic variable.
* file::                        How to indicate the name of a file.
* dfn::                         How to specify a definition.
* cite::                        How to refer to a book that is not in Info.

Emphasizing Text

* emph & strong::               How to emphasize text in Texinfo.
* Smallcaps::                   How to use the small caps font.
* Fonts::                       Various font commands for printed output.

Special Insertions

* Braces Atsigns Periods::      How to insert braces, `@' and periods.
* dmn::                         How to format a dimension.
* Dots Bullets::                How to insert dots and bullets.
* TeX and copyright::           How to insert the TeX logo
                                  and the copyright symbol.
* minus::                       How to insert a minus sign.

Inserting `@', Braces, and Periods

* Inserting An Atsign::
* Inserting Braces::            Inserting `{' and `}'--@{ and @}
* Controlling Spacing::

Inserting Ellipsis, Dots, and Bullets

* dots::                        Inserting dots ...
* bullet::                      Inserting a bullet.

Inserting TeX and the Copyright Symbol

* tex::                         Insert the TeX logo.
* copyright symbol::            `@copyright'{}

Quotations and Examples

* Block Enclosing Commands::    Use different constructs for
                                  different purposes.
* quotation::                   How to write a quotation.
* example::                     How to write an example in a fixed-width font.
* noindent::                    How to prevent indentation.
* Lisp Example::                How to illustrate Lisp code.
* smallexample & smalllisp::    Forms for the `@smallbook' option.
* display::                     How to write an example in the current font.
* format::                      How to write an example that does not narrow
                                  the margins.
* exdent::                      How to undo the indentation of a line.
* flushleft & flushright::      `@flushleft' and `@flushright'
* cartouche::                   Drawing cartouches around examples.

Special Glyphs for Examples

* Special Glyphs Summary::
* result::                      How to show the result of expression.
* expansion::                   How to indicate an expansion.
* Print Special Glyph::         How to indicate printed output.
* Error Special Glyph::         How to indicate an error message.
* Equivalence::                 How to indicate equivalence.
* Point Special Glyph::         How to indicate the location of point.

Making Lists and Tables

* Introducing Lists::           Formatting is done for you.
* itemize::                     How to construct a simple list.
* enumerate::                   How to construct a numbered list.
* Two-column Tables::           How to construct a two-column table.

Making a Two-column Table

* table::                       How to construct a two column table.
* ftable::                      How to construct a two column table
                                  with automatic indexing.
* itemx::                       How to put more entries in the first column.

Definition Commands: `@deffn', etc.

* Def Cmd Template::            How to structure a description using a
                                  definition command.
* Optional Parameters::         How to handle optional and repeated parameters.
* Def Cmds in Detail::          All the definition commands.
* Def Cmd Conventions::         Conventions for writing definitions.
* Sample Function Definition::

The Definition Commands

* Functions Commands::          Commands for functions and similar entities.
* Variables Commands::          Commands for variables and similar entities.
* Typed Functions::             Commands for functions in typed languages.
* Typed Variables::             Commands for variables in typed languages.
* Abstract Objects::            Commands for object-oriented programming.
* Data Types::                  The definition command for data types.

Creating Indices

* Index Entries::               Choose different words for index entries.
* Predefined Indices::          Use different indices for different kinds
                                  of entry.
* Indexing Commands::           How to make an index entry.
* Combining Indices::           How to combine indices.
* New Indices::                 How to define your own indices.

Making and Preventing Breaks

* Break Commands::              Introducing the break commands.
* Line Breaks::                 How to force lines breaks.
* w::                           How to prevent unwanted line breaks.
* sp::                          How to insert blank lines.
* page::                        How to force the start of a new page.
* group::                       How to prevent unwanted page breaks.
* need::                        Another way to prevent unwanted page breaks.

Conditionally Visible Text

* Conditional Commands::        Specifying text for Info or TeX.
* Using Ordinary TeX Commands::  You can use any and all TeX commands.
* set and clear::               Designating which text to format (for both
                                  Info and TeX).

Printing Hardcopy

* Use TeX::                     Use TeX to format for hardcopy.
* How to Print::                How to print a hardcopy manual with
                                  shell commands.
* Printing from Emacs::         How to print from an Emacs shell.
* Texinfo Mode Printing::       How to format and print in Texinfo mode.
* Compile-Command::             How to print using Emacs's compile command.
* Requirements Summary::        TeX formatting requirements summary.
* Preparing for TeX::           Preparing for Use of TeX
* Overfull Hboxes::             What are and what to do with overfull hboxes.
* smallbook::                   Printing small format books and manuals.

Creating an Info File

* makeinfo advantages::         `makeinfo' is better.
* Running makeinfo::            How to run `makeinfo' from a shell.
* makeinfo options::            Options for `makeinfo'.
* Pointer Validation::          How to check that pointers point somewhere.
* makeinfo in Emacs::           How to run `makeinfo' from Emacs.
* texinfo-format commands::     Two Info formatting commands written
                                  in Emacs Lisp are an alternative
                                  to `makeinfo'.
* Tag and Split Files::         Tag files and split files

Installing an Info File

* Directory file::              The top level menu for all Info files.
* New Info File::               Listing a new info file.
* Other Info Directories::      How to specify Info files that are
                                  located in other directories.

Include Files

* Using Include Files::         How to use the `@include' command.
* texinfo-multiple-files-update::  How to create and update nodes and
                                  menus when using included files.
* Sample Include File::         A sample outer file with included files
                                  within it; and a sample included file.
* Include Files Evolution::     How use of the `@include' command
                                  has changed over time.

Page Headings

* Headings Introduced::         Conventions for using headings.
* Heading Format::              Standard heading formats.
* Heading Choice::              How to specify the type of heading.
* Custom Headings::             How to create your own headings and footings.

Formatting Mistakes

* makeinfo preferred::          `makeinfo' finds errors.
* Debugging with Info::         How to catch errors with Info formatting.
* Debugging with TeX::          How to catch errors with TeX formatting.
* Using texinfo-show-structure::  How to use `texinfo-show-structure'.
* Using occur::                 How to list all lines containing a pattern.
* Running Info-Validate::       How to find badly referenced nodes.

Finding Badly Referenced Nodes

* Using Info-validate::         How to run `Info-validate'.
* Unsplit::                     How to create an unsplit file.
* Tagifying::                   How to tagify a file.
* Splitting::                   How to split a file manually.

Second Edition Features

* New Texinfo Mode Commands::   The updating commands are especially useful.
* New Commands::                Many newly described @-commands.


File: texinfo,  Node: Copying,  Next: Overview,  Prev: Top,  Up: Top

Texinfo Copying Conditions
**************************

   The programs currently being distributed that relate to Texinfo
include portions of GNU Emacs, plus other separate programs (including
`makeinfo', `info', `texindex', and `texinfo.tex').  These programs
are "free"; this means that everyone is free to use them and free to
redistribute them on a free basis.  The Texinfo-related programs are
not in the public domain; they are copyrighted and there are
restrictions on their distribution, but these restrictions are
designed to permit everything that a good cooperating citizen would
want to do.  What is not allowed is to try to prevent others from
further sharing any version of these programs that they might get from
you.

   Specifically, we want to make sure that you have the right to give
away copies of the programs that relate to Texinfo, that you receive
source code or else can get it if you want it, that you can change
these programs or use pieces of them in new free programs, and that
you know you can do these things.

   To make sure that everyone has such rights, we have to forbid you to
deprive anyone else of these rights.  For example, if you distribute
copies of the Texinfo related programs, you must give the recipients
all the rights that you have.  You must make sure that they, too,
receive or can get the source code.  And you must tell them their
rights.

   Also, for our own protection, we must make certain that everyone
finds out that there is no warranty for the programs that relate to
Texinfo.  If these programs are modified by someone else and passed
on, we want their recipients to know that what they have is not what
we distributed, so that any problems introduced by others will not
reflect on our reputation.

   The precise conditions of the licenses for the programs currently
being distributed that relate to Texinfo are found in the General
Public Licenses that accompany them.


File: texinfo,  Node: Overview,  Next: Texinfo Mode,  Prev: Copying,  Up: Top

Overview of Texinfo
*******************

   Texinfo(1) is a documentation system that uses a single source file
to produce both on-line help (and other information) and a printed
manual.  This means that instead of writing two different documents,
one providing on-line information and the other for a printed manual,
you need write only one document.  When the system is revised, you
need revise only one document.  (You can read the on-line help, known
as an "Info file", with the Info documentation-reading program.)

* Menu:

* Using Texinfo::               Create an normal printed book
                                  or an Info file.
* Info Files::                  What is an Info file?
* Printed Manuals::             Characteristics of a printed manual
* Formatting Commands::         @-commands are used for formatting.
* Conventions::                 General syntactic conventions in Texinfo
* Comments::                    How to write comments and mark regions that
                                  the formatting commands will ignore.
* Minimum::                     What a Texinfo file must have.
* Six Parts::                   Six parts of a Texinfo file.
* Short Sample::                A short sample Texinfo file.

   ---------- Footnotes ----------

   (1)  Note that the first syllable of "texinfo" is pronounced like
"speck", not "hex".  This odd pronunciation is derived from TeX, in
which the `X' is actually the Greek letter "chi" rather than the
English letter "ex" (the `T' and `E' are Greek letters also, but they
happen to be pronounced the same way in Greek as in English).


File: texinfo,  Node: Using Texinfo,  Next: Info Files,  Prev: Overview,  Up: Overview

Using Texinfo
=============

   Using Texinfo, you can create a printed document with the normal
features of a book, including chapters, sections, cross references,
and indices.  From the same Texinfo source file, you can create a
menu-driven, on-line Info file with nodes, menus, cross references,
and indices.  You can, if you wish, make the chapters and sections of
the printed document correspond to the nodes of the on-line
information; and you use the same cross references and indices for
both the Info file and the printed document.  The `GNU Emacs Manual'
is a good example of a Texinfo file.

   To make a printed manual, process a Texinfo source file with the
TeX typesetting program.  This creates a DVI file that you can typeset
and print as a book.  (Note that the Texinfo language is completely
different from TeX's usual language, PlainTeX, which Texinfo
replaces.)  If you do not have TeX, but do have `troff' or `nroff',
you can use the `texi2roff' program instead.  To create an Info file,
process a Texinfo source file with the `makeinfo' utility or Emacs's
`texinfo-format-buffer' command; this creates an Info file that you
can install on-line.

   Info works with almost every type of computer terminal; similarly,
TeX and `texi2roff' work with many types of printer.  This power makes
Texinfo a general purpose system, but brings with it a constraint,
which is that a Texinfo file may contain only the customary
"typewriter" characters (letters, numbers, spaces, and punctuation
marks) but no special graphics.

   A Texinfo file is a plain ASCII file containing text and
"@-commands" (words preceded by an `@') that tell the typesetting and
formatting programs what to do.  You may edit a Texinfo file with any
text editor; but it is especially convenient to use GNU Emacs since
that editor has a special mode, called Texinfo mode, that provides
various Texinfo-related features.  (*Note Texinfo Mode::.)

   Before writing a Texinfo source file, you should become familiar
with the Info documentation reading program and learn about nodes,
menus, cross references, and the rest.  (*note info: (info)Top, for
more information.)

   Texinfo creates both on-line help and a printed manual; moreover, it
is freely redistributable.  For these reasons, Texinfo is the format
in which documentation for GNU utilities and libraries should be
written.


File: texinfo,  Node: Info Files,  Next: Printed Manuals,  Prev: Using Texinfo,  Up: Overview

Info files
==========

   An Info file is a file formatted so that the Info documentation
reading program can operate on it.  Info files are divided into pieces
called "nodes", each of which contains the discussion of one topic. 
Each node has a name, and contains both text for the user to read and
pointers to other nodes, which are identified by their names.  The Info
program displays one node at a time, and provides commands with which
the user can move to the other related nodes.

   *note info: (info)Top, for more information about using Info.

   Each node of an Info file may have any number of child nodes that
describe subtopics of the node's topic.  The names of these child
nodes, if any, are listed in a "menu" within the parent node; this
allows you to use certain Info commands to move to one of the child
nodes.  Generally, a Texinfo file is organized like a book.  If a node
is at the logical level of a chapter, its child nodes are at the level
of sections; likewise, the child nodes of sections are at the level of
subsections.

   All the children of any one parent are linked together in a
bidirectional chain of `Next' and `Previous' pointers.  This means
that all the nodes that are at the level of sections within a chapter
are linked together.  Normally the order in this chain is the same as
the order of the children in the parent's menu.  Each child node
records the parent node name, as its `Up' pointer.  The last child has
no `Next' pointer, and the first child has the parent both as its
`Previous' and as its `Up' pointer.(1)

   The book-like structuring of an Info file into nodes that correspond
to chapters, sections, and the like is a matter of convention, not a
requirement.  The `Up', `Previous', and `Next' pointers of a node can
point to any other nodes, and a menu can contain any other nodes. 
Thus, the node structure can be any directed graph.  But it is usually
more comprehensible to follow a structure that corresponds to the
structure of chapters and sections in a printed manual.

   In addition to `Next', `Previous', and `Up' pointers and menus, Info
provides pointers of another kind, called references, that can be
sprinkled throughout the text.  This is usually the best way to
represent links that do not fit a hierarchical structure.

   Usually, you will design a document so that its nodes match the
structure of chapters and sections in the printed manual.  But there
are times when this is not right for the material being discussed. 
Therefore, Texinfo uses separate commands to specify the node
structure of the Info file and the section structure of the printed
manual.

   Generally, you enter an Info file through a node that by convention
is called `Top'.  This node normally contains just a brief summary of
the file's purpose, and a large menu through which the rest of the
file is reached.  From this node, you can either traverse the file
systematically by going from node to node, or you can go to a specific
node listed in the main menu, or you can search the index menus and
then go directly to the node that has the information you want.

   If you want to read through an Info file in sequence, as if it were
a printed manual, you can get the whole file with the advanced Info
command `g* RET'.  (*note Advanced Info commands: ( info)Expert.)

   The `dir' file in the `.../emacs/info' directory serves as the
departure point for the whole Info system.  From it, you can reach the
top nodes of each of the documents in a complete Info system.

   ---------- Footnotes ----------

   (1)  In some documents, the first child has no `Previous' pointer. 
Occasionally, the last child has the node name of the next following
higher level node as its `Next' pointer.


File: texinfo,  Node: Printed Manuals,  Next: Formatting Commands,  Prev: Info Files,  Up: Overview

Printed Manuals
===============

   A Texinfo file can be formatted and typeset as a printed manual.  To
do this, you need to use TeX, a powerful, sophisticated typesetting
program written by Donald Knuth.(1)

   A Texinfo-based printed manual will be similar to any other book; it
will have a title page, copyright page, table of contents, and
preface, as well as chapters, numbered or unnumbered sections and
subsections, page headers, cross references, footnotes, and indices.

   You can use Texinfo to write a book without ever having the
intention of converting it into on-line information.  You can use
Texinfo for writing a printed novel, and even to write a printed memo,
although this latter application is not recommended since electronic
mail is so much easier.

   TeX is a general purpose typesetting program.  Texinfo provides a
file called `texinfo.tex' that contains information (definitions or
"macros") that TeX uses when it typesets a Texinfo file.  (The macros
tell TeX how to convert the Texinfo @-commands to TeX commands, which
TeX can then process to create the typeset document.)  `texinfo.tex'
contains the specifications for printing a document, either with 7
inch by 9.25 inch pages or with 8.5 inch by 11 inch pages.  (This is
178 mm by 235 mm or else 216 mm by 280 mm.)  By changing the
parameters in `texinfo.tex', you can change the size of the printed
document.  In addition, you can change the style in which the printed
document is formatted; for example, you can change the sizes and fonts
used, the amount of indentation for each paragraph, the degree to
which words are hyphenated, and the like.  By changing the
specifications, you can make a book look dignified, old and serious,
or light-hearted, young and cheery.

   TeX is freely distributable.  It is written in a dialect of Pascal
called WEB and can be compiled either in Pascal or (by using a
conversion program that comes with the TeX distribution) in C.  (*Note
TeX Mode: (emacs)TeX Mode, for information about TeX.)

   TeX is very powerful and has a great many features.  Because a
Texinfo file must be able to present information both on a
character-only terminal in Info form and in a typeset book, the
formatting commands that Texinfo supports are necessarily limited.

* Menu:

* Obtaining TeX::               How to obtain TeX from
                                  the University of Washington.

   ---------- Footnotes ----------

   (1)  You can also use the `texi2roff' program if you do not have
TeX; since Texinfo is designed for use with TeX, `texi2roff' is not
described here.  `texi2roff' is part of the standard GNU distribution.


File: texinfo,  Node: Obtaining TeX,  Prev: Printed Manuals,  Up: Printed Manuals

Obtaining TeX
-------------

   TeX is freely redistributable.  You can obtain TeX for Unix systems
from the University of Washington for a distribution fee.

   To order a full distribution, send $200.00 for a 1/2-inch 9-track
1600 bpi (tar or cpio) tape reel, or $210.00 for a 1/4-inch 4-track
QIC-24 (tar or cpio) cartridge, to:

     Northwest Computing Support Center
     DR-10, Thomson Hall 35
     University of Washington
     Seattle, Washington 98195

Please make checks payable to the University of Washington.

   Prepaid orders are preferred but purchase orders are acceptable;
however, purchase orders carry an extra charge of $10.00, to pay for
processing.

   Overseas sites: please add to the base cost $20.00 for shipment via
air parcel post, or $30.00 for shipment via courier.

   Please check with the Northwest Computing Support Center at the
University of Washington for current prices and formats:

     telephone:  (206) 543-6259
     email:      elisabet@max.u.washington.edu


File: texinfo,  Node: Formatting Commands,  Next: Conventions,  Prev: Printed Manuals,  Up: Overview

@-commands
==========

   In a Texinfo file, the commands that tell TeX how to typeset the
printed manual and tell `makeinfo' and `texinfo-format-buffer' how to
create an Info file are preceded by `@'; they are called "@-commands".
 For example, `@node' is the command to indicate a node and `@chapter'
is the command to indicate the start of a chapter.

     *Please note:* All the @-commands, with the exception of the
     `@TeX{}' command, must be written entirely in lower case.

   The Texinfo @-commands are a strictly limited set of constructs. 
The strict limits make it possible for Texinfo files to be understood
both by TeX and by the code that converts them into Info files.  You
can display Info files on any terminal that displays alphabetic and
numeric characters.  Similarly, you can print the output generated by
TeX on a wide variety of printers.

   Depending on what they do or what arguments(1) they take, you need
to write @-commands on lines of their own or as part of sentences:

   * Write a command such as `@page' at the beginning of a line as the
     only text on the line.

   * Write a command such as `@chapter' at the beginning of a line
     followed by the command's arguments, in this case the chapter
     title, on the rest of the line.

   * Write a command such as `@dots{}' wherever you wish (but usually
     within a sentence).

   * Write a command such as `@code{SAMPLE-CODE}' wherever you wish
     (but usually within a sentence) with its argument, SAMPLE-CODE,
     in this example, between the braces.

As you gain experience with Texinfo, you will rapidly learn how to
write the different commands: the different ways to write commands
make it easier to write and read Texinfo files than if all commands
followed exactly the same syntax.

   ---------- Footnotes ----------

   (1)  The word "argument" comes from the way it is used in
mathematics and does not refer to a disputation between two people; it
refers to the information presented to the command.  According to the
`Oxford English Dictionary', the word derives from the Latin for "to
make clear, prove"; thus it came to mean `the evidence offered as
proof', which is to say, `the information offered', which led to its
mathematical meaning.  In its other thread of derivation, the word
came to mean `to assert in a manner against which others may make
counter assertions', which led to the meaning of `argument' as a
disputation.


File: texinfo,  Node: Conventions,  Next: Comments,  Prev: Formatting Commands,  Up: Overview

General Syntactic Conventions
=============================

   All ASCII printing characters except `@', `{' and `}' can appear in
a Texinfo file and stand for themselves.  `@' is the escape character
which introduces commands.  `{' and `}' should be used only to
surround arguments to certain commands.  To put one of these special
characters into the document, put an `@' character in front of it,
like this: `@@', `@{', and `@}'.

   It is customary in TeX to use doubled single-quote characters to
begin and end quotations: ` ` and ' ' (but without a space between the
two single-quote characters).  This convention should be followed in
Texinfo files.  TeX converts doubled single-quote characters to left-
and right-hand doubled quotation marks and Info converts doubled
single-quote characters to ASCII double-quotes: ` ` and ' ' to " .

   Use three hyphens in a row, `---', for a dash--like this.  In TeX,
a single or even a double hyphen produces a printed dash that is
shorter than you want.  Info reduces three hyphens to two for display
on the screen.

   To prevent a paragraph from being indented in the printed manual,
put the command `@noindent' on a line by itself before the paragraph.

   If you mark off a region of the Texinfo file with the `@iftex' and
`@end iftex' commands, that region will appear only in the printed
copy; in that region, you can use certain commands borrowed from
PlainTeX that you cannot use in Info.  Likewise, if you mark off a
region with the `@ifinfo' and `@end ifinfo' commands, that region will
appear only in the Info file; in that region, you can use Info
commands that you cannot use in TeX.  (*Note Conditionals::.)

     *Caution:* Do not use tabs in a Texinfo file!  TeX has trouble
     with tabs: it treats them like single spaces, and that is not
     what they look like.  This is a problem with TeX.  (To avoid
     putting tabs into your file, you can set the `indent-tabs-mode'
     variable in Emacs to `nil' so that Emacs inserts multiple spaces
     when you press the TAB key.  Also, you can run `untabify' to
     convert tabs in a region to multiple spaces.)


File: texinfo,  Node: Comments,  Next: Minimum,  Prev: Conventions,  Up: Overview

Comments
========

   You can write comments in a Texinfo file that will not appear in
either the Info file or the printed manual by using the `@comment'
command (which may be abbreviated to `@c').  Such comments are for the
person who reads the Texinfo file.  All the text on a line that
follows either `@comment' or `@c' is a comment; the rest of the line
does not appear in either the Info file or the printed manual.  (The
`@comment' or `@c' does not have to be at the beginning of the line;
only the text on the line that follows after the `@comment' or `@c'
command does not appear.)

   You can write long stretches of text that will not appear in either
the Info file or the printed manual by using the `@ignore' and `@end
ignore' commands.  Write each of these commands on a line of its own,
starting each command at the beginning of the line.  Text between
these two commands does not appear in the processed output.  You can
use `@ignore' and `@end ignore' for writing comments or for holding
text you may wish to use in another version of your document.  Often,
`@ignore' and `@end ignore' is used to enclose a part of the copying
permissions that applies to the Texinfo source file of a document, but
not to the Info or printed version of the document.


File: texinfo,  Node: Minimum,  Next: Six Parts,  Prev: Comments,  Up: Overview

What a Texinfo File Must Have
=============================

   By convention, the names of Texinfo files end with either of the
three extensions `.texinfo', `.texi', or `.tex'.  The longer extension
is preferred since it describes more clearly to a human reader the
nature of the file.  The shorter extensions are for operating systems
that cannot handle long file names.

   In order to be made into a printed manual and an Info file, a
Texinfo file *must* begin with lines like this:

     \input texinfo
     @setfilename INFO-FILE-NAME
     @settitle NAME-OF-MANUAL

The contents of the file follow this beginning, and then you must end
a Texinfo file with a line like this:

     @bye

The `\input texinfo' line tells TeX to use the `texinfo.tex' file,
which tells TeX how to translate the Texinfo @-commands into TeX
typesetting commands.  The `@setfilename' line provides a name for the
Info file and the `@settitle' line specifies a title for the page
headers (or footers) of the printed manual.

   The `@bye' line at the end of the file on a line of its own tells
TeX that the file is ended and to stop typesetting.

   Usually, you won't use quite such a spare format, but will include
mode setting and start-of-header and end-of-header lines at the
beginning of a Texinfo file, like this:

     \input texinfo   @c -*-texinfo-*-
     @c %**start of header
     @setfilename INFO-FILE-NAME
     @settitle NAME-OF-MANUAL
     @c %**end of header

In the first line, `-*-texinfo-*-' causes Emacs to switch into Texinfo
mode when you edit the file.

   The `@c' lines which surround the `@setfilename' and `@settitle'
lines are optional, but you need them in order to run TeX or Info on
just part of the file.  (*Note Start of Header::, for more
information.)

   Furthermore, you will usually provide a Texinfo file with a title
page, master menu, and the like.  But the minimum, which can be useful
for short documents, is just the three lines at the beginning and the
one line at the end.


File: texinfo,  Node: Six Parts,  Next: Short Sample,  Prev: Minimum,  Up: Overview

Six Parts of a Texinfo File
===========================

   Generally, a Texinfo file contains more than the minimal beginning
and end--it usually contains six parts:

1. Header
     The Header names the file, tells TeX which definitions' file to
     use, and performs other "housekeeping" tasks.

2. Summary Description and Copyright
     The Summary Description and Copyright segment describes the
     document and contains the copyright notice and copying
     permissions for the Info file.  The segment must be enclosed
     between `@ifinfo' and `@end ifinfo' commands so that it appears
     only in the Info file.

3. Title and Copyright
     The Title and Copyright segment contains the title and copyright
     pages and copying permissions for the printed manual.  The
     segment must be enclosed between `@titlepage' and `@end titlepage'
     commands and appears only in the printed manual.

4. Top Node and Master Menu
     The Master Menu contains a complete menu of all the nodes in the
     whole Info file.  It appears only in the Info file, in the Top
     node.

5. Body
     The Body of the document may be structured like a traditional
     book or encyclopedia or it may be free form.

6. End
     The End contains commands for printing indices and generating the
     table of contents, and the `@bye' command on a line of its own.


File: texinfo,  Node: Short Sample,  Prev: Six Parts,  Up: Overview

A Short Sample Texinfo File
===========================

   Here is a complete but very short Texinfo file.  The first three
parts of the file, from `\input texinfo' through to `@end titlepage',
look more intimidating than they are.  Most of the material is
standard boilerplate; when you write a manual, simply insert the names
for your own manual in this segment. (*Note Beginning a File::.)

Part 1: Header
--------------

     \input texinfo   @c -*-texinfo-*-
     @c %**start of header
     @setfilename sample.info
     @settitle Sample Document
     @c %**end of header
     @setchapternewpage odd

Part 2: Summary Description and Copyright
-----------------------------------------

The summary description and copyright segment does not
 appear in the printed document.

     @ifinfo
     This is a short example of a complete Texinfo file.
     
     Copyright @copyright{} 1990 Free Software Foundation, Inc.
     @end ifinfo

Part 3: Titlepage and Copyright
-------------------------------

The titlepage segment does not appear in the Info file.

     @titlepage
     @sp 10
     @comment The title is printed in a large font.
     @center @titlefont{SAMPLE TITLE}
     
     @c The following two commands start the copyright page.
     @page
     @vskip 0pt plus 1filll
     Copyright @copyright{} 1990 Free Software Foundation, Inc.
     @end titlepage

Part 4: Top Node and Master Menu
--------------------------------

The Top node contains the master menu for the Info file.
  Since a printed manual uses a table of contents rather than
 a menu, the master menu appears only in the Info file.

     @node    Top,       First Chapter, (dir),    (dir)
     @comment node-name, next,          previous, up

     @menu
     * First Chapter::    The first chapter is the
                          only chapter in this sample.
     * Concept Index::    This index has two entries.
     @end menu

Part 5:  The Body of the Document
---------------------------------

     @node     First Chapter, Concept Index, Top,      Top
     @comment  node-name,     next,          previous, up
     @chapter First Chapter
     @cindex Sample index entry
     
     This is the contents of the first chapter.
     @cindex Another sample index entry
     
     Here is a numbered list.
     
     @enumerate
     @item
     This is the first item.
     
     @item
     This is the second item.
     @end enumerate
     
     The @code{makeinfo} and @code{texinfo-format-buffer}
     commands transform a Texinfo file such as this into
     an Info file; and @TeX{} typesets it for a printed
     manual.

Part 6: The End of the Document
-------------------------------

     @node    Concept Index,    ,  First Chapter, Top
     @comment node-name,    next,  previous,      up
     @unnumbered Concept Index
     
     @printindex cp
     
     @contents
     @bye

The Results
-----------

   Here is what the contents of the first chapter of the sample look
like:

     This is the contents of the first chapter.

     Here is a numbered list.

       1. This is the first item.

       2. This is the second item.

     The `makeinfo' and `texinfo-format-buffer' commands transform a
     Texinfo file such as this into an Info file; and TeX typesets it
     for a printed manual.


File: texinfo,  Node: Texinfo Mode,  Next: Beginning a File,  Prev: Overview,  Up: Top

Using Texinfo Mode
******************

   In GNU Emacs, Texinfo mode provides commands and features especially
designed for working with Texinfo files:

   * Insert commonly used strings of text.

   * Automatically create node lines.

   * Show the structure of a Texinfo source file.

   * Automatically create or update the `Next',
      `Previous', and `Up' pointers of a node.

   * Automatically create or update menus.

   * Automatically create a master menu.

   * Format a part or all of a file for Info.

   * Typeset and print part or all of a file.

* Menu:

* Emacs Editing::               Texinfo mode adds to the usual
                                  editing commands.
* Inserting::                   How to insert frequently used commands.
* Showing the Structure::       How to show the structure of a file.
* Updating Nodes and Menus::    How to update or create new nodes and menus.
* Info Formatting::             Formatting for Info.
* Printing::                    How to format and print part or all of a file.
* Texinfo Mode Summary::        Summary of all the Texinfo mode commands.


File: texinfo,  Node: Emacs Editing,  Next: Inserting,  Prev: Texinfo Mode,  Up: Texinfo Mode

The Usual Editing Commands
==========================

   The special Texinfo commands are in addition to the usual editing
commands, which are generally the same as the commands of Text mode. 
However, in Texinfo mode the paragraph separation variable and syntax
table are redefined so that Texinfo commands that should be on lines
of their own are not inadvertently included in paragraphs.  Thus, the
`M-q' (`fill-paragraph') command will refill a paragraph but not mix
an indexing command on a line adjacent to it into the paragraph.

   In addition, Texinfo mode sets the `page-delimiter' variable to the
value of `texinfo-chapter-level-regexp'; by default, this is a regular
expression matching the commands for chapters and their equivalents,
such as appendices.  With this value for the page delimiter, you can
jump from chapter title to chapter title with the `C-x ]'
(`forward-page') and `C-x [' (`backward-page') commands and narrow to
a chapter with the `C-x p' (`narrow-to-page') command.  (*Note Pages:
(emacs)Pages, for details about the page commands.)

   You may name a Texinfo file however you wish, but the convention is
to end a Texinfo file name with one of the three extensions
`.texinfo', `.texi', or `.tex'.  A longer extension is preferred,
since it is explicit, but a shorter extension may be necessary for
operating systems that limit the length of file names.  GNU Emacs
automatically enters Texinfo mode when you visit a file with any of
these extensions.  Also, Emacs switches to Texinfo mode for a file
that has `-*-texinfo-*-' in its first line.  If ever you are in
another mode and wish to switch to Texinfo mode, type `M-x
texinfo-mode'.

   Like all other Emacs features, you can customize or enhance Texinfo
mode as you wish.  In particular, the keybindings are very easy to
change.  The keybindings described here are the default or standard
ones.

