This is Info file texinfo, produced by Makeinfo-1.43 from the input
file texinfo2.texi.

   This file documents Texinfo, a documentation system that uses a
single source file to produce both on-line information and a printed
manual.

   This is edition 2.14 of the Texinfo documentation,
14 February 1992, for Texinfo version 2.

   Copyright (C) 1988, 1990, 1991, 1992 Free Software Foundation, Inc.

   This is the second edition of the Texinfo documentation,
 and is consistent with version 2 of `texinfo.tex'.

   Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by the Foundation.


File: texinfo,  Node: Command List,  Next: Include Files,  Prev: Installing an Info File,  Up: Top

@-Command List
**************

   Here is an alphabetical list of the @-commands in Texinfo.

`@*'
     Force a line break. Do not end a paragraph that uses `@*' with an
     `@refill' command.  *Note Line Breaks::.

`@.'
     Stands for a period that really does end a sentence.  *Note
     Controlling Spacing::.

`@:'
     Indicate to TeX that an immediately preceding period, question
     mark, exclamation mark, or colon does not end a sentence.  Prevent
     TeX from inserting extra whitespace as it does at the end of a
     sentence.  The command has no effect on the Info file output. 
     *Note Controlling Spacing::.

`@@'
     Stands for `@'.  *Note Inserting `@': Braces Atsigns Periods.

`@{'
     Stands for a left-hand brace, `{'.  *Note Inserting @ braces and
     periods: Braces Atsigns Periods.

`@}'
     Stands for a right-hand brace, `}'.  *Note Inserting @ braces and
     periods: Braces Atsigns Periods.

`@appendix TITLE'
     Begin an appendix.  The title appears in the table of contents of
     a printed manual.  In Info, the title is underlined with
     asterisks.  *Note The `@unnumbered' and `@appendix' Commands:
     unnumbered & appendix.

`@appendixsec TITLE'
     Begin an appendix section within an appendix.  The section title
     appears in the table of contents of a printed manual.  In Info,
     the title is underlined with equal signs.  *Note Section
     Commands: unnumberedsec appendixsec heading.

`@appendixsubsec TITLE'
     Begin an appendix subsection within an appendix.  The title
     appears in the table of contents of a printed manual.  In Info,
     the title is underlined with hyphens.  *Note Subsection Commands:
     unnumberedsubsec appendixsubsec subheading.

`@appendixsubsubsec TITLE'
     Begin an appendix subsubsection within a subappendix.  The title
     appears in the table of contents of a printed manual.  In Info,
     the title is underlined with periods.  *Note The `subsub'
     Commands: subsubsection.

`@asis'
     Used following `@table' and `@ftable' to print the table's first
     column without highlighting ("as is").  *Note Making a Two-column
     Table: Two-column Tables.

`@author AUTHOR'
     Typeset AUTHOR flushleft and underline it.  *Note The `@title'
     and `@author' Commands: title subtitle author.

`@b{TEXT}'
     Print TEXT in bold font.  No effect in Info.  *Note Fonts::.

`@bullet{}'
     Generate a large round dot, or the closest possible thing to one.
      *Note `@bullet': bullet.

`@bye'
     Terminate TeX processing on the file.  TeX does not see any of
     the contents of the file following the `@bye' command.  *Note
     Ending a File::.

`@c COMMENT'
     Begin a comment in Texinfo.  The rest of the line does not appear
     in either the Info file or the printed manual.  A synonym for
     `@comment'.  *Note General Syntactic Conventions: Conventions.

`@cartouche'
     Highlight an example or quotation by drawing a box with rounded
     corners around it.  Pair with `@end cartouche'.  No effect in
     Info.  *Note Drawing Cartouches Around Examples: cartouche.)

`@center LINE-OF-TEXT'
     Center the line of text following the command.  *Note `@center':
     titlefont center sp.

`@chapheading TITLE'
     Print a chapter-like heading in the text, but not in the table of
     contents of a printed manual.  In Info, the title is underlined
     with asterisks.  *Note `@majorheading' and `@chapheading':
     majorheading & chapheading.

`@chapter TITLE'
     Begin a chapter.  The chapter title appears in the table of
     contents of a printed manual.  In Info, the title is underlined
     with asterisks.  *Note `@chapter': chapter.

`@cindex ENTRY'
     Add ENTRY to the index of concepts.  *Note  Defining the Entries
     of an Index: Index Entries.

`@cite{REFERENCE}'
     Highlight the name of a book or other reference that lacks a
     companion Info file.  *Note `@cite': cite.

`@clear FLAG'
     Unset FLAG, preventing the Texinfo formatting commands from
     formatting text between subsequent pairs of `@ifset FLAG' and
     `@end ifset' commands.  *Note `@set' and `@clear': set and clear.

`@code{SAMPLE-CODE}'
     Highlight text that is an expression, a syntactically complete
     token of a program, or a program name.  *Note `@code': code.

`@comment COMMENT'
     Begin a comment in Texinfo.  The rest of the line does not appear
     in either the Info file or the printed manual.  *Note  General
     Syntactic Conventions: Conventions.

`@contents'
     Print a complete table of contents.  Has no effect in Info, which
     uses menus instead.  *Note Generating a Table of Contents:
     Contents.

`@copyright{}'
     Generate a copyright symbol.  *Note  `@copyright': copyright
     symbol.

`@defcodeindex INDEX-NAME'
     Define a new index and its indexing command.  Print entries in an
     `@code' font.  *Note Defining New Indices: New Indices.

`@defcv CATEGORY CLASS NAME'
     Format a description for a variable associated with a class in
     object-oriented programming.  Takes three arguments: the category
     of thing being defined, the class to which it belongs, and its
     name.  *Note Definition Commands::.

`@deffn CATEGORY NAME ARGUMENTS...'
     Format a description for a function, interactive command, or
     similar entity that may take arguments.  `@deffn' takes as
     arguments the category of entity being described, the name of
     this particular entity, and its arguments, if any.  *Note
     Definition Commands::.

`@defindex INDEX-NAME'
     Define a new index and its indexing command.  Print entries in a
     roman font.  *Note Defining New Indices: New Indices.

`@defivar CLASS INSTANCE-VARIABLE-NAME'
     Format a description for an instance variable in object-oriented
     programming.  The command is equivalent to `@defcv {Instance
     Variable} ...'.  *Note Definition Commands::.

`@defmac MACRO-NAME ARGUMENTS...'
     Format a description for a macro.  The command is equivalent to
     `@deffn Macro ...'.  *Note Definition Commands::.

`@defmethod CLASS METHOD-NAME ARGUMENTS...'
     Format a description for a method in object-oriented programming.
      The command is equivalent to `@defop Method ...'.  Takes as
     arguments the name of the class of the method, the name of the
     method, and its arguments, if any.  *Note Definition Commands::.

`@defop CATEGORY CLASS NAME ARGUMENTS...'
     Format a description for an operation in object-oriented
     programming.  `@defop' takes as arguments the overall name of the
     category of operation, the name of the class of the operation,
     the name of the operation, and its arguments, if any.  *Note
     Definition Commands::.

`@defopt OPTION-NAME'
     Format a description for a user option.  The command is
     equivalent to `@defvr {User Option} ...'.  *Note Definition
     Commands::.

`@defspec SPECIAL-FORM-NAME ARGUMENTS...'
     Format a description for a special form.  The command is
     equivalent to `@deffn {Special Form} ...'.  *Note Definition
     Commands::.

`@deftp CATEGORY NAME-OF-TYPE ATTRIBUTES...'
     Format a description for a data type.  `@deftp' takes as
     arguments the category, the name of the type (which is a word like
     `int' or `float'), and then the names of attributes of objects of
     that type.  *Note Definition Commands::.

`@deftypefn CLASSIFICATION DATA-TYPE NAME ARGUMENTS...'
     Format a description for a function or similar entity that may
     take arguments and that is typed.  `@deftypefn' takes as arguments
     the classification of entity being described, the type, the name
     of the entity, and its arguments, if any.  *Note Definition
     Commands::.

`@deftypefun DATA-TYPE FUNCTION-NAME ARGUMENTS...'
     Format a description for a function in a typed language.  The
     command is equivalent to `@deftypefn Function ...'.  *Note
     Definition Commands::.

`@deftypevr CLASSIFICATION DATA-TYPE NAME'
     Format a description for something like a variable in a typed
     language--an entity that records a value.  Takes as arguments the
     classification of entity being described, the type, and the name
     of the entity.  *Note Definition Commands::.

`@deftypevar DATA-TYPE VARIABLE-NAME'
     Format a description for a variable in a typed language.  The
     command is equivalent to `@deftypevr Variable ...'.  *Note
     Definition Commands::.

`@defun FUNCTION-NAME ARGUMENTS...'
     Format a description for functions.  The command is equivalent to
     `@deffn Function ...'.  *Note Definition Commands::.

`@defvar VARIABLE-NAME'
     Format a description for variables.  The command is equivalent to
     `@defvr Variable ...'.  *Note Definition Commands::.

`@defvr CATEGORY NAME'
     Format a description for any kind of variable.  `@defvr' takes as
     arguments the category of the entity and the name of the entity. 
     *Note Definition Commands::.

`@dfn{TERM}'
     Highlight the introductory or defining use of a term.  *Note
     `@dfn': dfn.

`@display'
     Begin a kind of example.  Indent text, do not fill, do not select
     a new font.  Pair with `@end display'.  *Note  `@display':
     display.

`@dmn{DIMENSION}'
     Format a dimension.  Causes TeX to insert a narrow space before
     DIMENSION.  Has no effect in Info.  Used for writing a number
     followed by an abbreviation of a dimension name, such as `12pt',
     written as `12@dmn{pt}', with no space between the number and the
     `@dmn' command.  *Note  `@dmn': dmn.

`@dots{}'
     Insert an ellipsis: `...'.  *Note `@dots': dots.

`@emph{TEXT}'
     Highlight TEXT.  *Note Emphasizing Text: Emphasis.

`@enumerate'
     Begin a numbered list, using `@item' for each entry.  Pair with
     `@end enumerate'.  *Note  `@enumerate': enumerate.

`@equiv{}'
     Indicate the exact equivalence of two forms to the reader with a
     special glyph: `=='.  *Note Equivalence::.

`@error{}'
     Indicate to the reader with a special glyph that the following
     text is an error message: `error-->'.  *Note Error Special
     Glyph::.

`@evenfooting [LEFT] @| [CENTER] @| [RIGHT]'
     Specify footings for even-numbered (left-hand) pages.  Not
     relevant to Info.  *Note How to Make Your Own Headings: Custom
     Headings.

`@evenheading [LEFT] @| [CENTER] @| [RIGHT]'
     Specify headings for even-numbered (left-hand) pages.  Not
     relevant to Info.  *Note How to Make Your Own Headings: Custom
     Headings.

`@everyfooting [LEFT] @| [CENTER] @| [RIGHT]'
     Specify footings for every page.  Not relevant to Info.  *Note
     How to Make Your Own Headings: Custom Headings.

`@everyheading [LEFT] @| [CENTER] @| [RIGHT]'
     Specify headings for every page.  Not relevant to Info.  *Note
     How to Make Your Own Headings: Custom Headings.

`@example'
     Begin an example.  Indent text, do not fill, select fixed-width
     font.  Pair with `@end example'.  *Note  `@example': example.

`@exdent LINE-OF-TEXT'
     Remove any indentation a line might have.  *Note  Undoing the
     Indentation of a Line: exdent.

`@expansion{}'
     Indicate the result of a macro expansion to the reader with a
     special glyph: `==>'.  *Note expansion::.

`@file{FILENAME}'
     Highlight the name of a file or directory.  *Note  `@file': file.

`@finalout'
     Prevent TeX from printing large black warning rectangles beside
     over-wide lines.  *Note Overfull Hboxes::.

`@findex ENTRY'
     Add ENTRY to the index of functions.  *Note  Defining the Entries
     of an Index: Index Entries.

`@flushleft'
     Left justify every line but leave the right end ragged.  Leave
     font as is.  Pair with `@end flushleft'.  *Note `@flushleft' and
     `@flushright': flushleft & flushright.

`@flushright'
     Right justify every line but leave the left end ragged.  Leave
     font as is.  Pair with `@end flushright'.  *Note `@flushleft' and
     `@flushright': flushleft & flushright.

`@footnote{TEXT-OF-FOOTNOTE}'
     Enter a footnote.  Footnote text is printed at the bottom of the
     page by TeX; Info may format in either `End Node' or `Make Node'
     style.  *Note Footnotes::.

`@footnotestyle STYLE'
     Specify an Info file's footnote style, either `end' for the end
     node style or `separate' for the separate node style.  *Note
     Footnotes::.

`@format'
     Begin a kind of example.  Like `@example' or `@display', but do
     not narrow the margins and do not select the fixed-width font. 
     Pair with `@end format'.  *Note  `@example': example.

`@ftable FORMATTING-COMMAND'
     Begin a two-column table, using `@item' for each entry. 
     Automatically enter each of the items in the first column into the
     index of functions.  Pair with `@end ftable'.  The same as
     `@table', except for indexing.  *Note  `@ftable': ftable.

`@group'
     Hold text together that must appear on one printed page.  Pair
     with `@end group'.  Not relevant to Info.  *Note  `@group': group.

`@heading TITLE'
     Print an unnumbered section-like heading in the text, but not in
     the table of contents of a printed manual.  In Info, the title is
     underlined with equal signs.  *Note Section Commands:
     unnumberedsec appendixsec heading.

`@headings ON-OFF-SINGLE-DOUBLE'
     Turn headings on or off, or specify single-sided or double-sided
     headings for printing.  `@headings on' is synonymous with
     `@headings double'.  *Note The `@headings' Command: headings on
     off.

`@i{TEXT}'
     Print TEXT in italic font.  No effect in Info.  *Note Fonts::.

`@ifclear FLAG ... @end ifclear'
     If FLAG is unset, the Texinfo formatting commands format text
     between `@ifclear FLAG' and the following `@end ifclear' command.
      *Note `@set' and `@clear': set and clear.

`@ifinfo'
     Begin a stretch of text that will be ignored by TeX when it
     typesets the printed manual.  The text appears only in the Info
     file.  Pair with `@end ifinfo'.  *Note Conditionally Visible
     Text: Conditionals.

`@ifset FLAG ... @end ifset'
     If FLAG is set, the Texinfo formatting commands format text
     between `@ifset FLAG' and the following `@end ifset' command. 
     *Note `@set' and `@clear': set and clear.

`@iftex'
     Begin a stretch of text that will not appear in the Info file, but
     will be processed only by TeX.  Pair with `@end iftex'.  *Note
     Conditionally Visible Text: Conditionals.

`@ignore'
     Begin a stretch of text that will not appear in either the Info
     file or the printed output.  Pair with `@end ignore'.  *Note
     Comments and Ignored Text: Comments.

`@include FILENAME'
     Incorporate the contents of the file FILENAME into the Info file
     or printed document.  *Note Include Files::.

`@inforef{NODE-NAME, [ENTRY-NAME], INFO-FILE-NAME}'
     Make a cross reference to an Info file for which there is no
     printed manual.  *Note Cross references using `@inforef': inforef.

`\input MACRO-DEFINITIONS-FILE'
     Use the specified macro definitions file.  This command is used
     only in the first line of a Texinfo file to cause TeX to make use
     of the `texinfo' macro definitions file.  The backslash in
     `\input' is used instead of an `@' because TeX does not properly
     recognize `@' until after it has read the definitions file. 
     *Note The Texinfo File Header: Header.

`@item'
     Indicate the beginning of a marked paragraph for `@itemize' and
     `@enumerate'; indicate the beginning of the text of a first
     column entry for `@table' and `@ftable'.  *Note Lists and
     Tables::.

`@itemize  MARK-GENERATING-CHARACTER-OR-COMMAND'
     Produce a sequence of indented paragraphs, with a mark inside the
     left margin at the beginning of each paragraph.  Pair with `@end
     itemize'.  *Note `@itemize': itemize.

`@itemx'
     Like `@item' but do not generate extra vertical space above the
     item text.  *Note `@itemx': itemx.

`@kbd{KEYBOARD-CHARACTERS}'
     Indicate text that consists of characters of input to be typed by
     users.  *Note `@kbd': kbd.

`@key{KEY-NAME}'
     Highlight KEY-NAME, a conventional name for a key on a keyboard. 
     *Note `@key': key.

`@kindex ENTRY'
     Add ENTRY to the index of keys.  *Note Defining the Entries of an
     Index: Index Entries.

`@lisp'
     Begin an example of Lisp code.  Indent text, do not fill, select
     fixed-width font.  Pair with `@end lisp'.  *Note  `@lisp': Lisp
     Example.

`@majorheading  TITLE'
     Print a chapter-like heading in the text, but not in the table of
     contents of a printed manual.  Generate more vertical whitespace
     before the heading than the `@chapheading' command.  In Info, the
     chapter heading line is underlined with asterisks.  *Note
     `@majorheading' and `@chapheading': majorheading & chapheading.

`@menu'
     Mark the beginning of a menu of nodes in Info.  No effect in a
     printed manual.  Pair with `@end menu'.  *Note  `@menu': menu.

`@minus{}'
     Generate a minus sign.  *Note `@minus': minus.

`@need N'
     Start a new page in a printed manual if fewer than N mils
     (thousandths of an inch) remain on the current page.  *Note 
     `@need': need.

`@node NAME, NEXT, PREVIOUS, UP'
     Define the beginning of a new node in Info, and serve as a
     locator for references for TeX.  *Note `@node': node.

`@noindent'
     Prevent text from being indented as if it were a new paragraph. 
     *Note `@noindent': noindent.

`@oddfooting [LEFT] @| [CENTER] @| [RIGHT]'
     Specify footings for odd-numbered (right-hand) pages.  Not
     relevant to Info.  *Note How to Make Your Own Headings: Custom
     Headings.

`@oddheading [LEFT] @| [CENTER] @| [RIGHT]'
     Specify headings for odd-numbered (right-hand) pages.  Not
     relevant to Info.  *Note How to Make Your Own Headings: Custom
     Headings.

`@page'
     Start a new page in a printed manual.  No effect in Info.  *Note
     `@page': page.

`@paragraphindent INDENT'
     Indent paragraphs by INDENT number of spaces; delete indentation
     if the value of INDENT is 0; and do not change indentation if
     INDENT is `asis'. *Note Paragraph Indenting: paragraphindent.

`@pindex ENTRY'
     Add ENTRY to the index of programs.  *Note Defining the Entries
     of an Index: Index Entries.

`@point{}'
     Indicate the position of point in a buffer to the reader with a
     special glyph: `-!-'.  *Note Indicating Point in a Buffer: Point
     Special Glyph.

`@print{}'
     Indicate printed output to the reader with a special glyph: `-|'.
      *Note Print Special Glyph::.

`@printindex INDEX-NAME'
     Print an alphabetized two-column index in a printed manual or
     generate an alphabetized menu of index entries for Info.  *Note
     Printing Indices & Menus::.

`@pxref{NODE-NAME, [ENTRY], [TOPIC], [INFO-FILE], [MANUAL]}'
     Make a reference that starts with a lower case `see' in a printed
     manual.  Use within parentheses only.  Do not follow command with
     a punctuation mark.  The Info formatting commands automatically
     insert terminating punctuation as needed, which is why you do not
     need to insert punctuation.  Only the first argument is mandatory. 
     *Note `@pxref': pxref.

`@quotation'
     Narrow the margins to indicate text that is quoted from another
     real or imaginary work.  Write command on a line of its own. 
     Pair with `@end quotation'.  *Note  `@quotation': quotation.

`@r{TEXT}'
     Print TEXT in roman font.  No effect in Info.  *Note Fonts::.

`@ref{NODE-NAME, [ENTRY], [TOPIC], [INFO-FILE], [MANUAL]}'
     Make a reference.  In a printed manual, the reference does not
     start with a `See'.  Follow command with a punctuation mark. 
     Only the first argument is mandatory.  *Note `@ref': ref.

`@refill'
     In Info, refill and indent the paragraph after all the other
     processing has been done.  No effect on TeX, which always refills,
     and not needed on an Info file formatted with `makeinfo', which
     also automatically refills.  *Note Refilling Paragraphs::.

`@result{}'
     Indicate the result of an expression to the reader with a special
     glyph: `=>'.  *Note `@result': result.

`@samp{TEXT}'
     Highlight TEXT that is a literal example of a sequence of
     characters.  Used for single characters, for statements and often
     for entire shell commands.  *Note `@code': samp.

`@sc{TEXT}'
     Set TEXT in a printed output in THE SMALL CAPS FONT and set text
     in the Info file in uppercase letters.  *Note Smallcaps::.

`@section TITLE'
     Begin a section within a chapter.  In a printed manual, the
     section title is numbered and appears in the table of contents. 
     In Info, the title is underlined with equal signs.  *Note 
     `@section': section.

`@set FLAG'
     Set FLAG, causing the Texinfo formatting commands to format text
     between subsequent pairs of `@ifset FLAG' and `@end ifset'
     commands.  *Note `@set' and `@clear': set and clear.

`@setchapternewpage ON-OFF-ODD'
     Specify whether chapters start on new pages, and if so, whether on
     odd-numbered (right-hand) new pages.  *Note 
     `@setchapternewpage': setchapternewpage.

`@setfilename INFO-FILE-NAME'
     Provide a name for the Info file.  *Note General Syntactic
     Conventions: Conventions.

`@settitle TITLE'
     Provide a title for page headers in a printed manual.  *Note
     General Syntactic Conventions: Conventions.

`@shortcontents'
     Print a short table of contents.  Not relevant to Info, which uses
     menus rather than tables of contents.  A synonym for
     `@summarycontents'.  *Note Generating a Table of Contents:
     Contents.

`@smallbook'
     Cause TeX to produce a printed manual in a 7 by 9.25 inch format
     rather than the regular 8.5 by 11 inch format.  *Note  Printing
     Small Books: smallbook.  Also, see *Note  `@smallexample' and
     `@smalllisp': smallexample & smalllisp.

`@smallexample'
     Indent text to indicate an example.  Do not fill, select
     fixed-width font.  In `@smallbook' format, print text in a
     smaller font than with `@example'.  Pair with `@end smallexample'. 
     *Note `@smallexample' and `@smalllisp': smallexample & smalllisp.

`@smalllisp'
     Begin an example of Lisp code.  Indent text, do not fill, select
     fixed-width font.  In `@smallbook' format, print text in a
     smaller font.  Pair with `@end smalllisp'.  *Note `@smallexample'
     and `@smalllisp': smallexample & smalllisp.

`@sp N'
     Skip N blank lines.  *Note `@sp': sp.

`@strong TEXT'
     Emphasize TEXT by typesetting it in a *bold* font for the printed
     manual and by surrounding it with asterisks for Info.  *Note
     Emphasizing Text: emph & strong.

`@subheading TITLE'
     Print an unnumbered subsection-like heading in the text, but not
     in the table of contents of a printed manual.  In Info, the title
     is underlined with hyphens.  *Note `@unnumberedsubsec'
     `@appendixsubsec' `@subheading': unnumberedsubsec appendixsubsec
     subheading.

`@subsection TITLE'
     Begin a subsection within a section.  In a printed manual, the
     subsection title is numbered and appears in the table of
     contents.  In Info, the title is underlined with hyphens.  *Note 
     `@subsection': subsection.

`@subsubheading TITLE'
     Print an unnumbered subsubsection-like heading in the text, but
     not in the table of contents of a printed manual.  In Info, the
     title is underlined with periods.  *Note The `subsub' Commands:
     subsubsection.

`@subsubsection TITLE'
     Begin a subsubsection within a subsection.  In a printed manual,
     the subsubsection title is numbered and appears in the table of
     contents.  In Info, the title is underlined with periods.  *Note
     The `subsub' Commands: subsubsection.

`@subtitle TITLE'
     In a printed manual, set a subtitle in a normal sized font flush
     to the right-hand side of the page.  Not relevant to Info, which
     does not have title pages.  *Note `@title' `@subtitle' and
     `@author' Commands: title subtitle author.

`@summarycontents'
     Print a short table of contents.  Not relevant to Info, which uses
     menus rather than tables of contents.  A synonym for
     `@shortcontents'.  *Note Generating a Table of Contents: Contents.

`@syncodeindex FROM-INDEX INTO-INDEX'
     Merge the index named in the first argument into the index named
     in the second argument, printing the entries from the first index
     in `@code' font.  *Note Combining Indices::.

`@synindex FROM-INDEX INTO-INDEX'
     Merge the index named in the first argument into the index named
     in the second argument.  Do not change the font of FROM-INDEX
     entries.  *Note Combining Indices::.

`@t{TEXT}'
     Print TEXT in a fixed-width font.  No effect in Info.  *Note
     Fonts::.

`@table FORMATTING-COMMAND'
     Begin a two column table, using `@item' for each entry.  Write
     each first column entry on the same line as `@item'.  First
     column entries are printed in the font resulting from
     FORMATTING-COMMAND.  *Note Making a Two-column Table: Two-column
     Tables.  Also see *Note `@ftable': ftable, and *Note `@itemx':
     itemx.

`@TeX{}'
     Insert the logo TeX.  *Note Inserting TeX and (C): TeX and
     copyright.

`@tex'
     Enter TeX completely.  Pair with `@end tex'.  *Note Using
     Ordinary TeX Commands: Using Ordinary TeX Commands.

`@thischapter'
     In a heading or footing, stands for the number and name of the
     current chapter, in the format `Chapter 1: First Chapter'.  *Note
     How to Make Your Own Headings: Custom Headings.

`@thischaptername'
     In a heading or footing, stands for the name of the current
     chapter.  *Note How to Make Your Own Headings: Custom Headings.

`@thisfile'
     In a heading or footing, stands for the name of the current
     `@include' file.  Does not insert anything if not within an
     `@include' file.  *Note How to Make Your Own Headings: Custom
     Headings.

`@thispage'
     In a heading or footing, stands for the current page number. 
     *Note How to Make Your Own Headings: Custom Headings.

`@thistitle'
     In a heading or footing, stands for the name of the document, as
     specified by the `@settitle' command.  *Note How to Make Your Own
     Headings: Custom Headings.

`@tindex ENTRY'
     Add ENTRY to the index of data types.  *Note  Defining the
     Entries of an Index: Index Entries.

`@title TITLE'
     In a printed manual, set a title flush to the left-hand side of
     the page in a larger than normal font and underline it with a
     black rule.  Not relevant to Info, which does not have title
     pages.  *Note The `@title' `@subtitle' and `@author' Commands:
     title subtitle author.

`@titlefont{TEXT}'
     In a printed manual, print TEXT in a larger than normal font. 
     Not relevant to Info, which does not have title pages.  *Note The
     `@titlefont' `@center' and `@sp' Commands: titlefont center sp.

`@titlepage'
     Indicate to Texinfo the beginning of the title page.  Write
     command on a line of its own.  Pair with `@end titlepage'. 
     Nothing between `@titlepage' and `@end titlepage' appears in Info. 
     *Note `@titlepage': titlepage.

`@today{}'
     Insert the current date, in `1 Jan 1900' style.  *Note How to
     Make Your Own Headings: Custom Headings.

`@top TITLE'
     In a Texinfo file to be formatted with `makeinfo', identify the
     topmost node line in the file, which must be written on the line
     immediately preceding the `@top' command.  Used for `makeinfo''s
     node pointer insertion feature.  The title is underlined with
     asterisks.  Both the node line and the `@top' line normally
     should be enclosed by `@ifinfo' and `@end ifinfo'.  In TeX and
     `texinfo-format-buffer', the `@top' command is merely a synonym
     for `@unnumbered'.  *Note Creating Pointers with `makeinfo':
     makeinfo Pointer Creation.

`@unnumbered TITLE'
     In a printed manual, begin a chapter that appears without chapter
     numbers of any kind.  The title appears in the table of contents
     of a printed manual.  In Info, the title is underlined with
     asterisks.  *Note `@unnumbered' and `@appendix': unnumbered &
     appendix.

`@unnumberedsec TITLE'
     In a printed manual, begin a section that appears without section
     numbers of any kind.  The title appears in the table of contents
     of a printed manual.  In Info, the title is underlined with equal
     signs.  *Note Section Commands: unnumberedsec appendixsec heading.

`@unnumberedsubsec TITLE'
     In a printed manual, begin an unnumbered subsection within a
     chapter.  The title appears in the table of contents of a printed
     manual.  In Info, the title is underlined with hyphens.  *Note 
     `@unnumberedsubsec' `@appendixsubsec' `@subheading':
     unnumberedsubsec appendixsubsec subheading.

`@unnumberedsubsubsec TITLE'
     In a printed manual, begin an unnumbered subsubsection within a
     chapter.  The title appears in the table of contents of a printed
     manual.  In Info, the title is underlined with periods.  *Note
     The `subsub' Commands: subsubsection.

`@var{METASYNTACTIC-VARIABLE}'
     Highlight a metasyntactic variable, which is something that
     stands for another piece of text.  Thus, in this entry, the word
     METASYNTACTIC-VARIABLE is highlighted with `@var'.  *Note
     Indicating Metasyntactic Variables: var.

`@vindex ENTRY'
     Add ENTRY to the index of variables.  *Note  Defining the Entries
     of an Index: Index Entries.

`@vskip AMOUNT'
     in a printed manual, insert whitespace so as to push text on the
     remainder of the page towards the bottom of the page.  Used in
     formatting the copyright page with the argument `0pt plus
     1filll'.  (Note spelling of `filll'.)  `@vskip' may be used only
     in contexts ignored for Info.  *Note The Copyright Page and
     Printed Permissions: Copyright & Printed Permissions.

`@w{TEXT}'
     Prevent TEXT from being split across two lines.  Do not end a
     paragraph that uses `@w' with an `@refill' command.  In the
     Texinfo file, keep TEXT on one line.  *Note `@w': w.

`@xref{NODE-NAME, [ENTRY], [TOPIC], [INFO-FILE], [MANUAL]}'
     Make a reference that starts with `See' in a printed manual. 
     Follow command with a punctuation mark.  Only the first argument
     is mandatory.  *Note `@xref': xref.


File: texinfo,  Node: Include Files,  Next: Headings,  Prev: Command List,  Up: Top

Include Files
*************

   When TeX or an Info formatting command sees an `@include' command
in a Texinfo file, it processes the contents of the file named by the
command and incorporates them into the DVI or Info file being created.
 Index entries from the included file are incorporated into the
indices of the output file.

* Menu:

* Using Include Files::         How to use the `@include' command.
* texinfo-multiple-files-update::  How to create and update nodes and
                                  menus when using included files.
* Sample Include File::         A sample outer file with included files
                                  within it; and a sample included file.
* Include Files Evolution::     How use of the `@include' command
                                  has changed over time.


File: texinfo,  Node: Using Include Files,  Next: texinfo-multiple-files-update,  Prev: Include Files,  Up: Include Files

How to Use Include Files
========================

   To include another file within a Texinfo file, write the `@include'
command at the beginning of a line and follow it on the same line by
the name of a file to be included.  For example:

     @include chap47.texinfo

   An included file should simply be a segment of text that you expect
to be included as-is into the overall or "outer" Texinfo file; it
should not contain the standard beginning and end parts of a Texinfo
file.  In particular, you should not start an included file with a
line saying `\input texinfo'; if you do, that phrase is inserted into
the output file as is.  Likewise, you should not end an included file
with an `@bye' command; that command will stop TeX processing
immediately.

   In the past, you did need to write an `@setfilename' line at the
beginning of an included file, but no longer; now, it does not matter
whether you write such a line.  If an `@setfilename' line exists in an
included file, it is ignored.

   Conventionally, an included file begins with an `@node' line that
is followed by an `@chapter' line.  Each included file is one chapter.
 This makes it easy to use the regular node and menu creating and
updating commands to create the node pointers and menus within the
included file.  However, the simple Emacs node and menu creating and
updating commands do not work with multiple Texinfo files.  Thus you
cannot use these commands to fill in the `Next', `Previous', and `Up'
pointers of the `@node' line that begins the included file.  Also, you
cannot use the regular commands to create a master menu for the whole
file.  Either you must insert the menus and the `Next', `Previous',
and `Up' pointers by hand, or you must use the
`texinfo-multiple-files-update' command that is designed for
`@include' files.


File: texinfo,  Node: texinfo-multiple-files-update,  Next: Sample Include File,  Prev: Using Include Files,  Up: Include Files

`texinfo-multiple-files-update'
===============================

   The `texinfo-multiple-files-update' command creates or updates
`Next', `Previous', and `Up' pointers of included files as well as
those in the outer or over all Texinfo file, and it creates or updates
a main menu in the outer file.  Depending whether you call it with
optional arguments, it updates only the pointers in the first `@node'
line of the included files or all of them.

`M-x texinfo-multiple-files-update'
     Called without any arguments:

        - Create or update the `Next', `Previous', and `Up' pointers
          of the first `@node' line in each file included in an outer
          or overall Texinfo file.

        - Create or update the `Top' level node pointers of the outer
          or overall file.

        - Create or update a main menu in the outer file.

`C-u M-x texinfo-multiple-files-update'
     Called with a prefix argument (a non-`nil' MAKE-MASTER-MENU
     argument, if called from a program), create and insert a master
     menu in the outer file in addition to creating or updating
     pointers in the first `@node' line in each included file and
     creating or updating the `Top' level node pointers of the outer
     file.  The master menu is made from all the menus in all the
     included files.

`C-u 8 M-x texinfo-multiple-files-update'
     Called with a numeric prefix argument (a non-`nil'
     UPDATE-EVERYTHING argument, if called from a program):

        - Create or update the `Top' level node pointers of the outer
          or overall file.

        - Create or update *all* the `Next', `Previous', and `Up'
          pointers of all the included files.

        - Create or update *all* the menus of all the included files.

        - And then create a master menu in the outer file.  This is
          similar to invoking `texinfo-master-menu' with an argument
          when you are working with just one file.

Note the use of the prefix argument in interactive use: with a regular
prefix argument, just `C-u', the `texinfo-multiple-files-update'
command inserts a master menu; with a numeric prefix argument, such as
`C-u 8', the command updates every pointer and menu in all the files
and then inserts a master menu.


File: texinfo,  Node: Sample Include File,  Next: Include Files Evolution,  Prev: texinfo-multiple-files-update,  Up: Include Files

Sample File with `@include'
===========================

   If you plan to use the `texinfo-multiple-files-update' command, the
outer Texinfo file that lists included files within it should contain
nothing but the beginning and end parts of a Texinfo file, and a
number of `@include' commands listing the included files.  It should
not even include indices, which should be listed in an included file
of their own.

   Moreover, each of the included files must contain exactly one
highest level node (conventionally, an `@chapter' node or equivalent),
and this node must be the first node in the included file. 
Furthermore, each of these highest level nodes in each included file
must be at the same hierarchical level in the file structure. 
Usually, each is an `@chapter', an `@appendix', or an `@unnumbered'
node.  Thus, normally, each included file contains one, and only one,
chapter or equivalent-level node.

   The outer file should *not* contain any nodes besides the single
`Top' node.   The `texinfo-multiple-files-update' command will not
process them.

   Here is an example of an outer Texinfo file with `@include' files
within it before running `texinfo-multiple-files-update', which would
insert a main or master menu:

     \input texinfo @c -*-texinfo-*-
     @setfilename  include-example.info
     @settitle Include Example
     
     @setchapternewpage odd
     @titlepage
     @sp 12
     @center @titlefont{Include Example}
     @sp 2
     @center by Whom Ever
     
     @page
     Copyright @copyright{} 1990 Free Software Foundation, Inc.
     @end titlepage
     
     @node Top, First, (dir), (dir)
     @ifinfo
     @chapter Master Menu
     @end ifinfo
     
     @include foo.texinfo
     @include bar.texinfo
     @include index.texinfo
     
     @summarycontents
     @contents
     
     @bye

   An included file, such as `foo.texinfo', might look like this:

     @node First, Second, , Top
     @chapter First Chapter
     
     Contents of first chapter ...

   The full contents of `index.texinfo' might be as simple as this:

     @unnumbered Concept Index, , Second, Top
     @printindex cp

   The outer Texinfo source file for the `GNU Emacs Lisp Reference
Manual' is named `elisp.texi'.  This outer file contains a master menu
with 417 items in it and a list of 41 `@include' files.


File: texinfo,  Node: Include Files Evolution,  Prev: Sample Include File,  Up: Include Files

Evolution of Include Files
==========================

   When Info was first created, it was customary to create many small
Info files on one subject.  Each Info file was formatted from its own
Texinfo source file.  This custom meant that Emacs did not need to
make a large buffer to hold the whole of a large Info file when
someone wanted information; instead, Emacs allocated just enough
memory for the small Info file that contained the particular
information sought.  This way, Emacs could avoid wasting memory.

   References from one file to another were made by referring to the
file name as well as the node name. (*Note Referring to Other Info
Files: Other Info Files.  Also, see *Note  `@xref' with Four and Five
Arguments: Four and Five Arguments.)

   Include files were designed primarily as a way to create a single,
large printed manual out of several smaller Info files.  In a printed
manual, all the references were within the same document, so TeX could
automatically determine the references' page numbers.  The Info
formatting commands used include files only for creating joint
indices; each of the individual Texinfo files had to be formatted for
Info individually.  (Each, therefore, required its own `@setfilename'
line.)

   However, because large Info files are now split automatically, it is
no longer necessary to keep them small.

   Nowadays, multiple Texinfo files are used mostly for large
documents, such as the `GNU Emacs Lisp Reference Manual', and for
projects in which several different people write different sections of
a document simultaneously.

   In addition, the Info formatting commands have been extended to work
with the `@include' command so as to create a single large Info file
that is split if necessary into smaller files.  This means that you
can write menus and cross references without naming the different
Texinfo files.


File: texinfo,  Node: Headings,  Next: Catching Mistakes,  Prev: Include Files,  Up: Top

Page Headings
*************

   Most printed manuals contain headings along the top of every page
except the title and copyright pages.  Some manuals also contain
footings.  (Headings and footings have no meaning to Info, which is
not paginated.)

* Menu:

* Headings Introduced::         Conventions for using headings.
* Heading Format::              Standard heading formats.
* Heading Choice::              How to specify the type of heading.
* Custom Headings::             How to create your own headings and footings.


File: texinfo,  Node: Headings Introduced,  Next: Heading Format,  Prev: Headings,  Up: Headings

Headings Introduced
===================

   Texinfo provides standard heading formats for manuals that are
printed on one side of each sheet of paper and for manuals that are
printed on both sides of the paper.  Usually, you will use one or
other of these formats, but you can specify your own format, if you
wish.

   In addition, you can specify whether chapters should begin on a new
page, or merely continue the same page as the previous chapter; and if
chapters begin on new pages, you can specify whether they must be
odd-numbered pages.

   By convention, a book is printed on both sides of each sheet of
paper.  When you open a book flat, the right-hand page is
odd-numbered, and chapters begin on right-hand pages--a preceding
left-hand page is left blank if necessary.  Reports, however, are
often printed on just one side of paper, and chapters begin on a fresh
page immediately following the end of the preceding chapter.  In short
or informal reports, chapters often do not begin on a new page at all,
but are separated from the preceding text by a small amount of
whitespace.

   The `@setchapternewpage' command controls whether chapters begin on
new pages, and whether one of the standard heading formats is used. 
In addition, Texinfo has several heading and footing commands that you
can use to generate your own heading and footing formats.

   In Texinfo, headings and footings are single lines at the tops and
bottoms of pages; you cannot create multiline headings or footings. 
Each header or footer line is divided into three parts: a left part, a
middle part, and a right part.  Any part, or a whole line, may be left
blank.  Text for the left part of a header or footer line is set
flushleft; text for the middle part is centered; and, text for the
right part is set flushright.


File: texinfo,  Node: Heading Format,  Next: Heading Choice,  Prev: Headings Introduced,  Up: Headings

Standard Heading Formats
========================

   Texinfo provides two standard heading formats, one for manuals
printed on one side of each sheet of paper, and the other for manuals
printed on both sides of the paper.

   By default, nothing is specified for the footing of a Texinfo file,
so the footings remains blank.

   The standard format for single-sided printing consists of a header
line in which the left-hand part contains the name of the chapter, the
central part is blank, and the right-hand part contains the page
number.

   The single-sided page looks like this:

     _______________________
       |                       |
       | chapter   page number |
       |                       |
       | Start of text ...     |
       |                       |
       |                       |

   The standard format for two-sided printing depends on whether the
page number is even or odd.  By convention, even-numbered pages are on
the left- and odd-numbered pages are on the right.  (TeX will adjust
the widths of the left- and right-hand margins.  Usually, widths are
correct, but during double-sided printing, it is wise to check that
pages will bind properly--sometimes a printer will produce output in
which the even-numbered pages have a larger right-hand margin than the
odd-numbered pages.)

   In the standard double-sided format, the left part of the left-hand
(even-numbered) page contains the page number, the central part is
blank, and the right part contains the title (specified by the
`@settitle' command).  The left part of the right-hand (odd-numbered)
page contains the name of the chapter, the central part is blank, and
the right part contains the page number.

   The two pages, side by side as in an open book, look like this:

     _______________________     _______________________
       |                       |   |                       |
       | page number     title |   | chapter   page number |
       |                       |   |                       |
       | Start of text ...     |   | Start of text ...     |
       |                       |   |                       |
       |                       |   |                       |

The chapter name is preceded by the word `Chapter', the chapter number
and a colon.  This makes it easier to keep track of where you are in
the manual.


File: texinfo,  Node: Heading Choice,  Next: Custom Headings,  Prev: Heading Format,  Up: Headings

Specifying the Type of Heading
==============================

   TeX does not begin to generate page headings for a standard Texinfo
file until it reaches the `@end titlepage' command.  Thus, the title
and copyright pages are not numbered.  The `@end titlepage' command
causes TeX to begin to generate page headings according to a standard
format specified by the `@setchapternewpage' command that precedes the
`@titlepage' section.

   There are four possibilities:

No `@setchapternewpage' command
     Cause TeX to specify the single-sided heading format, with
     chapters on new pages. This is the same as `@setchapternewpage
     on'.

`@setchapternewpage on'
     Specify the single-sided heading format, with chapters on new
     pages.

`@setchapternewpage off'
     Cause TeX to start new chapters on the same page as the last page
     of the preceding chapter, after skipping some vertical
     whitespace.  It also causes TeX to typeset for double-sided
     printing.

`@setchapternewpage odd'
     Specify the double-sided heading format, with chapters on new
     pages.

Texinfo lacks an `@setchapternewpage even' command.

