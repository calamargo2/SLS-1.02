This is Info file texinfo, produced by Makeinfo-1.43 from the input
file texinfo2.texi.

   This file documents Texinfo, a documentation system that uses a
single source file to produce both on-line information and a printed
manual.

   This is edition 2.14 of the Texinfo documentation,
14 February 1992, for Texinfo version 2.

   Copyright (C) 1988, 1990, 1991, 1992 Free Software Foundation, Inc.

   This is the second edition of the Texinfo documentation,
 and is consistent with version 2 of `texinfo.tex'.

   Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by the Foundation.


File: texinfo,  Node: quotation,  Next: example,  Prev: Block Enclosing Commands,  Up: Quotations and Examples

`@quotation'
============

   The text of a quotation is processed normally except that

   * The margins are closer to the center of the page, so the whole of
     the quotation is indented.

   * The first lines of paragraphs are indented no more than the other
     lines.

   * In the printed output, interline spacing and interparagraph
     spacing are reduced.

     This is an example of text written between an `@quotation'
     command and an `@end quotation' command.  A `@quotation' command
     is most often used to indicate text that is excerpted from
     another (real or hypothetical) printed work.

   Write an `@quotation' command as text of a line by itself.  This
line will disappear from the output.  Mark the end of the quotation
with a line beginning with and containing only `@end quotation'.  The
`@end quotation' line will likewise disappear from the output.  Thus,
the input

     @quotation
     This is
     a foo.
     @end quotation

produces

          This is a foo.


File: texinfo,  Node: example,  Next: noindent,  Prev: quotation,  Up: Quotations and Examples

`@example'
==========

   The `@example' command is used to indicate an example that is not
part of the running text, such as computer input or output.

     This is an example of text written between an
     `@example' command and an `@end example'
     command.  The text is indented but not filled.
     
     In the printed manual, the text is typeset in a
     fixed-width font, and extra spaces and blank lines are
     significant.  In the Info file, an analogous result is
     obtained by indenting each line with five extra spaces.

   Write an `@example' command at the beginning of and as the only
text on a line by itself.  This line will disappear from the output. 
Mark the end of the example with a line beginning with and containing
only `@end example'.  The `@end example' will likewise disappear from
the output.  For example:

     @example
     mv foo bar
     @end example

produces

     mv foo bar

   Since the lines containing `@example' and `@end example' will
disappear, you should put a blank line before the `@example' and
another blank line after the `@end example'.  (Remember that blank
lines between the beginning `@example' and the ending `@end example'
will appear in the output.)

     *Caution:* Do not use tabs in lines of an example (or anywhere
     else in Texinfo, for that matter)!  TeX treats tabs like single
     spaces, and that is not what they look like.  This is a problem
     with TeX.  (If necessary, in Emacs, you can use `M-x untabify' to
     convert tabs in a region to multiple spaces.)

   When you use `@example' to describe a C function's calling
conventions, use the ANSI C syntax, like this:

     void dld_init (char *@var{path});

And in the subsequent discussion, refer to the argument values by
writing the same argument names, again highlighted with `@var'.

   Avoid the obsolete style that looks like this:

     #include <dld.h>
     
     dld_init (path)
     char *path;

   Also, it is best to avoid writing `#include' above the declaration
just to indicate that the function is declared in a header file.  The
practice may give the misimpression that the `#include' belongs near
the declaration of the function.  Either state explicitly which header
file holds the declaration or, better yet, name the header file used
for a group of functions at the beginning of the section that
describes the functions.

   Examples are often, logically speaking, "in the middle" of a
paragraph, and the text continues after an example should not be
indented.  The `@noindent' command prevents a piece of text from being
indented as if it were a new paragraph.

   (The `@code' command is used for examples of code that is embedded
within sentences, not set off from preceding and following text. 
*Note `@code': code.)


File: texinfo,  Node: noindent,  Next: Lisp Example,  Prev: example,  Up: Quotations and Examples

`@noindent'
===========

   If you have text following an `@example' or other similar inclusion
that reads as a continuation of the text before the `@example', it is
good to prevent this text from being indented as a new paragraph.  To
accomplish this, write `@noindent' at the beginning of a line by
itself preceding the continuation text.  For example,

     @example
     This is an example
     @end example
     
     @noindent
     This line will not be indented.  As you can see, the
     beginning of the line is fully flush left with the line
     that follows after it.  (This whole example is between
     `@display' and `@end display'.)

produces

          This is an example
     
     
     This line will not be indented.  As you can see, the
     beginning of the line is fully flush left with the line
     that follows after it.  (This whole example is between
     `@display' and `@end display'.)
      To adjust the number of blank lines properly in the Info file
output, remember that the line containing `@noindent' does not
generate a blank line, and neither does the `@end example' line.

   In the Texinfo source file for this documentation, each of the
lines that says `produces' is preceded by a line containing
`@noindent'.

   Do not put braces after an `@noindent' command; they are not
necessary, since `@noindent' is a command used outside of paragraphs
(*note Command Syntax::.).


File: texinfo,  Node: Lisp Example,  Next: smallexample & smalllisp,  Prev: noindent,  Up: Quotations and Examples

`@lisp'
=======

   The `@lisp' command is used for Lisp code.  It is synonymous with
the `@example' command.

     This is an example of text written between an
     `@lisp' command and an `@end lisp' command.

   Use `@lisp' instead of `@example' so as to preserve information
regarding the nature of the example.  This is useful, for example, if
you write a function that evaluates only and all the Lisp code in a
Texinfo file.  Then you can use the Texinfo file as a Lisp library.(1)

   Mark the end of `@lisp' with `@end lisp' on a line by itself.

   ---------- Footnotes ----------

   (1)  It would be straightforward to extend Texinfo to work in a
similar fashion for C, Fortran, or other languages.


File: texinfo,  Node: smallexample & smalllisp,  Next: display,  Prev: Lisp Example,  Up: Quotations and Examples

`@smallexample' and `@smalllisp'
================================

   In addition to the regular `@example' and `@lisp' commands, Texinfo
has two other "example-style" commands.  These are the `@smallexample'
and `@smalllisp' commands.  Both these commands are designed for use
with the `@smallbook' command that causes TeX to produce a printed
manual in a 7 by 9.25 inch format rather than the regular 8.5 by 11
inch format.

   In TeX, the `@smallexample' and `@smalllisp' commands typeset text
in a smaller font for the smaller `@smallbook' format than for the 8.5
by 11 inch format.  Consequently, examples containing long lines fit
in a narrower, `@smallbook' page without needing to be shortened. 
Both commands typeset in the normal font size when you format for the
regular 8.5 by 11 inch size; indeed, in this situation, the
`@smallexample' and `@smalllisp' commands are defined to be the
`@example' and `@lisp' commands.

   In Info, the `@smallexample' and `@smalllisp' commands are
equivalent to the `@example' and `@lisp' commands, and work exactly
the same.

   Mark the end of `@smallexample' or `@smalllisp' with `@end
smallexample' or `@end smalllisp', respectively.

     This is an example of text written between `@smallexample' and
     `@end smallexample'.  In Info and in an 8.5 by 11 inch manual,
     this text appears in its normal size; but in a 7 by 9.25 inch manual,
     this text appears in a smaller font.

   The `@smallexample' and `@smalllisp' commands make it easier to
prepare smaller format manuals without forcing you to edit examples by
hand to fit them onto narrower pages.

   *Note Printing "Small" Books: smallbook, for more information about
the `@smallbook' command.


File: texinfo,  Node: display,  Next: format,  Prev: smallexample & smalllisp,  Up: Quotations and Examples

`@display'
==========

   The `@display' command begins a kind of example.  It is like the
`@example' command except that, in a printed manual, `@display' does
not select the fixed-width font.  In fact, it does not specify the
font at all, so that the text appears in the same font it would have
appeared in without the `@display' command.

     This is an example of text written between an `@display' command
     and an `@end display' command.  The `@display' command
     indents the text, but does not fill it.


File: texinfo,  Node: format,  Next: exdent,  Prev: display,  Up: Quotations and Examples

`@format'
=========

   The `@format' command is similar to `@example' except that, in the
printed manual, `@format' does not select the fixed-width font and
does not narrow the margins.

This is an example of text written between an `@format' command
and an `@end format' command.
The `@format' command does not fill the text.


File: texinfo,  Node: exdent,  Next: flushleft & flushright,  Prev: format,  Up: Quotations and Examples

`@exdent': Undoing a Line's Indentation
=======================================

   The `@exdent' command removes any indentation a line might have. 
The command is written at the beginning of a line and applies only to
the text that follows the command that is on the same line.  Don't use
braces around the text.  In the printed manual, the text on the
`@exdent' line is printed in the roman font.

   `@exdent' is usually used within examples.  Thus,

     @example
     This line follows an @example command.
     @exdent  This line is exdented.
     This line follows the exdented line.
     The @end example comes on the next line.
     @end example

produces

     This line  follows an @example command.
This line is exdented.
     This line follows the exdented line.
     The @end example comes on the next line.

   In practice, the `@exdent' command is rarely used.  Usually, you
un-indent text by ending the example and returning the page to its
normal width.


File: texinfo,  Node: flushleft & flushright,  Next: cartouche,  Prev: exdent,  Up: Quotations and Examples

`@flushleft' and `@flushright'
==============================

   The `@flushleft' and `@flushright' commands line up the left or
right ends of lines on the left and right margins of a page, but do
not fill the text.  The commands are written on lines of their own,
without braces.  The `@flushleft' and `@flushright' commands are ended
by `@end flushleft' and `@end flushright' commands on lines of their
own.

   For example,

     @flushleft
     This text is
     written flushleft.
     @end flushleft

produces

     This text is
     written flushleft.

Flushright produces the type of indentation often used in the return
address of letters.

     @flushright
     Here is an example of text written
     flushright.  The @code{@flushright} command
     right justifies every line but leaves the
     left end ragged.
     @end flushright

produces

                                     Here is an example of text written
                                 flushright.  The `@flushright' command
                              right justifies every line but leaves the
                                                       left end ragged.


File: texinfo,  Node: cartouche,  Prev: flushleft & flushright,  Up: Quotations and Examples

Drawing Cartouches Around Examples
==================================

   In a printed manual, the `@cartouche' command draws a box with
rounded corners around its contents.  You can use this command to
further highlight an example or quotation.  For instance, you could
write a manual in which one type of example is surrounded in a
cartouche to emphasize them.

   The `@cartouche' command affects only the printed manual; it has no
effect in the Info file.

   For example,

     @example
     @cartouche
     % pwd
     /usr/local/lib/emacs/info
     @end cartouche
     @end example

surrounds the two-line example with a box with rounded corners, in the
printed manual.


File: texinfo,  Node: Special Glyphs,  Next: Lists and Tables,  Prev: Quotations and Examples,  Up: Top

Special Glyphs for Examples
***************************

   In Texinfo, code is often illustrated in examples that are delimited
by `@example' and `@end example', or by `@lisp' and `@end lisp'.  In
such examples, you can indicate the results of evaluation or an
expansion using `=>' or `==>'.  Likewise, there are special symbols to
indicate printed output, an error message, equivalence of expressions,
and the location of point.

   The special glyph commands do not have to be used within an
example, but most often they are.  Every special glyph command is
followed by a pair of left- and right-hand braces.

* Menu:

* Special Glyphs Summary::
* result::                      How to show the result of expression.
* expansion::                   How to indicate an expansion.
* Print Special Glyph::         How to indicate printed output.
* Error Special Glyph::         How to indicate an error message.
* Equivalence::                 How to indicate equivalence.
* Point Special Glyph::         How to indicate the location of point.


File: texinfo,  Node: Special Glyphs Summary,  Next: result,  Prev: Special Glyphs,  Up: Special Glyphs

Special Glyphs Summary
======================

   Here are the different special glyph commands:

=>
     `@result{}' points to the result of an expression.

==>
     `@expansion{}' shows the results of a macro expansion.

-|
     `@print{}' indicates printed output.

error-->
     `@error{}' indicates that the following text is an error message.

==
     `@equiv{}' indicates the exact equivalence of two forms.

-!-
     `@point{}' shows the location of point.


File: texinfo,  Node: result,  Next: expansion,  Prev: Special Glyphs Summary,  Up: Special Glyphs

=>: Indicating Evaluation
=========================

   Use the `@result{}' command to indicate the result of evaluating an
expression.

   The `@result{}' command is displayed as `=>' in Info and as a
double stemmed arrow in the printed output.

   Thus, the following,

     (cdr '(1 2 3))
          => (2 3)

may be read as "`(cdr '(1 2 3))' evaluates to (2 3)".


File: texinfo,  Node: expansion,  Next: Print Special Glyph,  Prev: result,  Up: Special Glyphs

==>: Indicating an Expansion
============================

   When an expression is a macro call, it expands into a new
expression.  You can indicate the result of the expansion with the
`@expansion{}' command.

   The `@expansion{}' command is displayed as `==>' in Info and as a
long arrow with a flat base in the printed output.

   For example, the following

     @lisp
     (third '(a b c))
          @expansion{} (car (cdr (cdr '(a b c))))
          @result{} c
     @end lisp

produces

     (third '(a b c))
          ==> (car (cdr (cdr '(a b c))))
          => c

which may be read as:

     `(third '(a b c))' expands to `(car (cdr (cdr '(a b c))))'; the
     result of evaluating the expression is `c'.

(Often, as in this case, an example looks better if the `@expansion{}'
and `@result{}' commands are indented five spaces.)


File: texinfo,  Node: Print Special Glyph,  Next: Error Special Glyph,  Prev: expansion,  Up: Special Glyphs

-|: Indicating Printed Output
=============================

   Sometimes an expression will print output during its execution.  You
can indicate the printed output with the `@print{}' command.

   The `@print{}' command is displayed as `-|' in Info and similarly,
as a horizontal dash butting against a vertical bar, in the printed
output.

   In the following example, the printed text is indicated with `-|',
and the value of the expression follows on the last line.

     (progn (print 'foo) (print 'bar))
          -| foo
          -| bar
          => bar

In a Texinfo source file, this example is written as follows:

     @lisp
     (progn (print 'foo) (print 'bar))
          @print{} foo
          @print{} bar
          @result{} bar
     @end lisp


File: texinfo,  Node: Error Special Glyph,  Next: Equivalence,  Prev: Print Special Glyph,  Up: Special Glyphs

error-->: Indicating an Error Message
=====================================

   A piece of code may cause an error when you evaluate it.  You can
designate the error message with the `@error{}' command.

   The `@error{}' command is displayed as `error-->' in Info and as
the word `error' in a box in the printed output.

   Thus,

     @lisp
     (+ 23 'x)
     @error{} Wrong type argument: integer-or-marker-p, x
     @end lisp

produces

     (+ 23 'x)
     error--> Wrong type argument: integer-or-marker-p, x

This indicates that the following error message is printed when you
evaluate the expression:

     Wrong type argument: integer-or-marker-p, x

   Note that `error-->' itself is not part of the error message.


File: texinfo,  Node: Equivalence,  Next: Point Special Glyph,  Prev: Error Special Glyph,  Up: Special Glyphs

==: Indicating Equivalence
==========================

   Sometimes two expressions produce identical results.  You can
indicate the exact equivalence of two forms with the `@equiv{}'
command.

   The `@equiv{}' command is displayed as `==' in Info and as a three
parallel horizontal lines in the printed output.

   Thus,

     @lisp
     (make-sparse-keymap) @equiv{} (list 'keymap)
     @end lisp

produces

     (make-sparse-keymap) == (list 'keymap)

This indicates that evaluating `(make-sparse-keymap)' produces
identical results to evaluating `(list 'keymap)'.


File: texinfo,  Node: Point Special Glyph,  Prev: Equivalence,  Up: Special Glyphs

Indicating Point in a Buffer
============================

   Sometimes you need to show an example of text in an Emacs buffer. 
In such examples, the convention is to include the entire contents of
the buffer in question between two lines of dashes containing the
buffer name.

   You can use the `@point{}' command to show the location of point in
the text in the buffer.  (The symbol for point, of course, is not part
of the text in the buffer; it indicates the place *between* two
characters where point is located.)

   The `@point{}' command is displayed as `-!-' in Info and as a small
five pointed star in the printed output.

   The following example shows the contents of buffer `foo' before and
after evaluating a Lisp command to insert the word `changed'.

     ---------- Buffer: foo ----------
     This is the -!-contents of foo.
     ---------- Buffer: foo ----------

     (insert "changed ")
          => nil
     ---------- Buffer: foo ----------
     This is the changed -!-contents of foo.
     ---------- Buffer: foo ----------

   In a Texinfo source file, the example is written like this:

     @example
     ---------- Buffer: foo ----------
     This is the @point{}contents of foo.
     ---------- Buffer: foo ----------
     
     (insert "changed ")
          @result{} nil
     ---------- Buffer: foo ----------
     This is the changed @point{}contents of foo.
     ---------- Buffer: foo ----------
     @end example


File: texinfo,  Node: Lists and Tables,  Next: Definition Commands,  Prev: Special Glyphs,  Up: Top

Making Lists and Tables
***********************

   Texinfo has several ways of making lists and two-column tables. 
Lists can be bulleted or numbered, while two-column tables can
highlight the items in the first column.

* Menu:

* Introducing Lists::           Formatting is done for you.
* itemize::                     How to construct a simple list.
* enumerate::                   How to construct a numbered list.
* Two-column Tables::           How to construct a two-column table.


File: texinfo,  Node: Introducing Lists,  Next: itemize,  Prev: Lists and Tables,  Up: Lists and Tables

Introducing Lists
=================

   Texinfo automatically indents the text in lists or tables, and
numbers an enumerated list.  This last feature is useful if you modify
the list, since you do not have to renumber it yourself.

   Numbered lists and tables begin with the appropriate @-command at
the beginning of a line, and end with the corresponding `@end' command
on a line by itself.  The table and itemized-list commands also
require that you write formatting information on the same line as the
beginning @-command.

   Begin an enumerated list, for example, with an `@enumerate' command
and end the list with an `@end enumerate' command.  Begin an itemized
list with an `@itemize' command, followed on the same line by a
formatting command such as `@bullet', and end the list with an `@end
itemize' command.

   Precede each element of a list with an `@item' command.

   Here is an itemized list of the different kinds of table and lists:

   * Itemized lists with and without bullets.

   * Enumerated lists, using numbers or letters.

   * Two-column tables with highlighting.

   Here is an enumerated list with the same items:

  1. Itemized lists with and without bullets.

  2. Enumerated lists, using numbers or letters.

  3. Two-column tables with highlighting.

   And here is a two-column table with the same items and their
@-commands:

`@itemize'
     Itemized lists with and without bullets.

`@enumerate'
     Enumerated lists, using numbers or letters.

`@table'
`@ftable'
     Two-column tables with highlighting.


File: texinfo,  Node: itemize,  Next: enumerate,  Prev: Introducing Lists,  Up: Lists and Tables

Making an Itemized List
=======================

   The `@itemize' command is used to produce sequences of indented
paragraphs, with marks inside the left margin at the beginning of
paragraphs for which a mark is desired.

   Begin an itemized list by writing `@itemize' at the beginning of a
line.  Follow the command, on the same line, with a character or a
Texinfo command that generates a mark.  Usually, you will write
`@bullet' after `@itemize', but you can use `@minus', or any character
or any special symbol that results in a single character in the Info
file.  (When you write `@bullet' or `@minus' after an `@itemize'
command, you may omit the `{}'.)

   Write the text of the indented paragraphs themselves after the
`@itemize', up to another line that says `@end itemize'.

   Before each paragraph for which a mark in the margin is desired,
place a line that says just `@item'.  Don't put any other text on this
line.

   Usually, you should put a blank line before an `@item'.  This puts
a blank line in the Info file. (TeX inserts the proper interline
whitespace in either case.)  Except when the entries are very brief,
these blank lines make the list look better.

   Here is an example of the use of `@itemize', followed by the output
it produces.  Note that `@bullet' produces a `*' in Info and a round
dot in TeX.

     @itemize @bullet
     @item
     Some text for foo.
     
     @item
     Some text
     for bar.
     @end itemize

This produces:

        * Some text for foo.

        * Some text for bar.

   Itemized lists may be embedded within other itemized lists.  Here
is a list marked with dashes embedded in a list marked with bullets:

     @itemize @bullet
     @item
     First item.
     
     @itemize @minus
     @item
     Inner item.
     
     @item
     Second inner item.
     @end itemize
     
     @item
     Second outer item.
     @end itemize

This produces:

        * First item.

             - Inner item.

             - Second inner item.

        * Second outer item.


File: texinfo,  Node: enumerate,  Next: Two-column Tables,  Prev: itemize,  Up: Lists and Tables

Making a Numbered List
======================

   `@enumerate' is like `@itemize' except that the marks in the left
margin contain successive integers or letters.  (*Note `@itemize':
itemize.)

   Write the `@enumerate' command at the beginning of a line.  The
command does not require an argument, but accepts either a number or a
letter as an option.  Without an argument, `@enumerate' starts the list
with the number 1.  With a numeric argument, such as 3, the command
starts the list with that number.  With an upper or lower case letter,
such as `a' or `A', the command starts the list with that letter.

   Write the text of the enumerated list in the same way you write an
itemized list: put `@item' on a line of its own before the start of
each paragraph that you want enumerated.  Do not write any other text
on the line beginning with `@item'.

   You should put a blank line between entries in the list.  This
generally makes it easier to read the Info file.

   Here is an example of `@enumerate' without an argument:

     @enumerate
     @item
     Underlying causes.
     
     @item
     Proximate causes.
     @end enumerate

This produces:

  1. Underlying causes.

  2. Proximate causes.

   Here is an example with an argument of `3':

     @enumerate 3
     @item
     Predisposing causes.
     
     @item
     Precipitating causes.
     
     @item
     Perpetuating causes.
     @end enumerate

This produces:

  3. Predisposing causes.

  4. Precipitating causes.

  5. Perpetuating causes.

   Here is a brief summary of the alternatives.  The summary is
constructed using `@enumerate' with an argument of `a'.

  a. `@enumerate'

        Without an argument, produce a numbered list, starting with
     the number 1.

  b. `@enumerate POSITIVE-INTEGER'

        With a (positive) numeric argument, start a numbered list with
     that number.  You can use this to continue a list that you
     interrupted with other text.

  c. `@enumerate UPPER-CASE-LETTER'

        With an upper case letter, start a list in which each item is
     marked by a letter, beginning with that upper case letter.

  d. `@enumerate LOWER-CASE-LETTER'

        With a lower case letter, start a list in which each item is
     marked by a letter, beginning with that lower case letter.

   You can nest enumerated lists, as in an outline.


File: texinfo,  Node: Two-column Tables,  Prev: enumerate,  Up: Lists and Tables

Making a Two-column Table
=========================

   `@table' is similar to `@itemize', but the command allows you to
specify a name or heading line for each item.  (*Note `@itemize':
itemize.)  The `@table' command is used to produce two-column tables,
and is especially useful for glossaries and explanatory exhibits.

* Menu:

* table::                       How to construct a two column table.
* ftable::                      How to construct a two column table
                                  with automatic indexing.
* itemx::                       How to put more entries in the first column.


File: texinfo,  Node: table,  Next: ftable,  Prev: Two-column Tables,  Up: Two-column Tables

Using the `@table' Command
--------------------------

   Use the `@table' command to produce two-column tables.

   Write the `@table' command at the beginning of a line and follow it
on the same line by an argument that is a Texinfo command such as
`@code', `@samp', `@var', or `@kbd'.  Also, you may use the `@asis'
command.  Although these commands are usually followed by arguments in
braces, in this case you use the command name without an argument
because `@item' will supply the argument.  This command will be
applied to the text that goes into the first column of each item and
determines how it will be highlighted.  For example, `@samp' will
cause the text in the first column to be highlighted with an `@samp'
command.

   `@asis' is a command that does nothing; if you write this command
after `@table', TeX and the Info formatting commands output the first
column entries without added highlighting, (`as is').

   (The `@table' command may work with other commands besides those
listed here.  You can experiment.  However, you can only use commands
that normally take arguments in braces.)

   Begin each table entry with an `@item' command at the beginning of
a line.  Write the first column text on the same line as the `@item'
command.  Write the second column text on the line following the
`@item' line and on subsequent lines.  (You don't have to type
anything for an empty second column entry.)  You may write as many
lines of supporting text as you wish, even several paragraphs.  But
only text on the same line as the `@item' will be placed in the first
column.

   Normally, you should put a blank line before an `@item' line.  This
puts a blank like in the Info file.  Except when the entries are very
brief, a blank line looks better.

   The following table, for example, highlights the text in the first
column with an `@samp' command:

     @table @samp
     @item foo
     This is the text for
     @samp{foo}.
     
     @item bar
     Text for @samp{bar}.
     @end table

This produces:

`foo'
     This is the text for `foo'.

`bar'
     Text for `bar'.

   If you want to list two or more named items with a single block of
text, use the `@itemx' command.  (*Note  `@itemx': itemx.)


File: texinfo,  Node: ftable,  Next: itemx,  Prev: table,  Up: Two-column Tables

`@ftable'
---------

   The `@ftable' command is the same as the `@table' command except
that it automatically enters each of the items in the first column of
the table into the index of functions, which makes it easier to create
indices.  Only the items on the same line as the `@item' commands are
indexed, and they are indexed in exactly the form that they appear on
that line.  *Note Creating Indices: Indices, for more information
about indices.

   Begin a two column table using `@ftable' by writing `@ftable' at
the beginning of a line, followed on the same line by an argument that
is a Texinfo command such as `@code', exactly as you would for an
`@table' command; and end the table with an `@end ftable' command on a
line by itself.


File: texinfo,  Node: itemx,  Prev: ftable,  Up: Two-column Tables

`@itemx'
--------

   Use the `@itemx' command inside a table when you have two or more
first column entries for the same item, each of which should appear on
a line of its own.  Use `@itemx' for all but the first entry.  The
`@itemx' command works exactly like `@item' except that it does not
generate extra vertical space above the first column text.  For
example,

     @table @code
     @item upcase
     @itemx downcase
     These two functions accept a character or a string as
     argument, and return the corresponding upper case (lower
     case) character or string.@refill
     @end table

produces

`upcase'
`downcase'
     These two functions accept a character or a string as argument,
     and return the corresponding upper case (lower case) character or
     string.

(Note also that this example illustrates multi-line supporting text in
a two-column table.)


File: texinfo,  Node: Definition Commands,  Next: Footnotes,  Prev: Lists and Tables,  Up: Top

Definition Commands: `@deffn', etc.
***********************************

   The `@deffn' command and the other "definition commands" enable you
to describe functions, variables, macros, commands, user options,
special forms and other such artifacts in a uniform format.

   In the Info file, a definition causes the category
entity--`Function', `Variable', or whatever--to appear at the
beginning of the first line of the definition, followed by the
entity's name and arguments.  In the printed manual, the command
causes TeX to print the entity's name and its arguments on the left
margin and print the category next to the right margin.  In both
output formats, the body of the definition is indented.  Also, the
name of the entity is entered into the appropriate index: `@deffn'
enters the name into the index of functions, `@defvr' enters it into
the index of variables, and so on.

   A manual need not and should not contain more than one definition
for a given name.  An appendix containing a summary should use
`@table' rather than the definition commands.

* Menu:

* Def Cmd Template::            How to structure a description using a
                                  definition command.
* Optional Parameters::         How to handle optional and repeated parameters.
* Def Cmds in Detail::          All the definition commands.
* Def Cmd Conventions::         Conventions for writing definitions.
* Sample Function Definition::


File: texinfo,  Node: Def Cmd Template,  Next: Optional Parameters,  Prev: Definition Commands,  Up: Definition Commands

The Template for a Definition
=============================

   The `@deffn' command is used for definitions of entities that
resemble functions.  To write a definition using the `@deffn' command,
write the `@deffn' command at the beginning of a line and follow it on
the same line by the category of the entity, the name of the entity
itself, and its arguments (if any).  Then write the body of the
definition on succeeding lines.  (You may embed examples in the body.)
 Finally, end the definition with an `@end deffn' command written on a
line of its own.  (The other definition commands follow the same
format.)

   The template for a definition looks like this:

     @deffn CATEGORY NAME ARGUMENTS...
     BODY-OF-DEFINITION
     @end deffn

For example,

     @deffn Command forward-word count
     This command moves point forward @var{count} words
     (or backward if @var{count} is negative). ...
     @end deffn

produces

      -- Command: forward-word COUNT
          This function moves point forward COUNT words (or backward
          if COUNT is negative). ...

   Capitalize the category name like a title.  If the name of the
category contains spaces, as in the phrase `Interactive Command',
write braces around it.  For example,

     @deffn {Interactive Command} isearch-forward
     ...
     @end deffn

Otherwise, the second word will be mistaken for the name of the entity.

   Some of the definition commands are more general than others.  The
`@deffn' command, for example, is the general definition command for
functions and the like--for entities that may take arguments.  When
you use this command, you specify the category to which the entity
belongs.  The `@deffn' command possesses three predefined, specialized
variations, `@defun', `@defmac', and `@defspec', that specify the
category for you: "Function", "Macro", and "Special Form"
respectively.  The `@defvr' command also is accompanied by several
predefined, specialized variations for describing particular kinds of
variables.

   The template for a specialized definition, such as `@defun', is
similar to the template for a generalized definition, except that you
don't have to specify the category:

     @defun NAME ARGUMENTS...
     BODY-OF-DEFINITION
     @end defun

Thus,

     @defun buffer-end flag
     This function returns @code{(point-min)} if @var{flag}
     is less than 1, @code{(point-max)} otherwise.
     ...
     @end defun

produces

      -- Function: buffer-end FLAG
          This function returns `(point-min)' if FLAG is less than 1,
          `(point-max)' otherwise.  ...

*Note Sample Function Definition: Sample Function Definition, for a
more detailed example of a function definition, including the use of
`@example' inside the definition.

   The other specialized commands work like `@defun'.


File: texinfo,  Node: Optional Parameters,  Next: Def Cmds in Detail,  Prev: Def Cmd Template,  Up: Definition Commands

Optional and Repeated Parameters
================================

   Some entities take optional or repeated parameters, which may be
specified by a distinctive special glyph that uses square brackets and
ellipses.  For example, a special form often breaks its argument list
into separate arguments in more complicated ways than a
straightforward function.

   An argument enclosed within square brackets is optional.  Thus,
[OPTIONAL-ARG] means that OPTIONAL-ARG is optional.  An argument
followed by an ellipsis is optional and may be repeated more than
once.  Thus, REPEATED-ARGS... stands for zero or more arguments. 
Parentheses are used when several arguments are grouped into
additional levels of list structure in Lisp.

   Here is the `@defspec' line of an example of an imaginary special
form:

      -- Special Form: foobar (VAR [FROM TO [INC]]) BODY...

In this example, the arguments FROM and TO are optional, but must both
be present or both absent.  If they are present, INC may optionally be
specified as well.  These arguments are grouped with the argument VAR
into a list, to distinguish them from BODY, which includes all
remaining elements of the form.

   In a Texinfo source file, this `@defspec' line is written like this
(except it would not be split over two lines, as it is in this
example).

     @defspec foobar (@var{var} [@var{from} @var{to}
          [@var{inc}]]) @var{body}@dots{}

The function is listed in the Command and Variable Index under
`foobar'.


File: texinfo,  Node: Def Cmds in Detail,  Next: Def Cmd Conventions,  Prev: Optional Parameters,  Up: Definition Commands

The Definition Commands
=======================

   Texinfo provides more than a dozen definition commands, all of which
are described in this section.

   The definition commands automatically enter the name of the entity
in the appropriate index: for example, `@deffn', `@defun', and
`@defmac' enter function names in the index of functions; `@defvr' and
`@defvar' enter variable names in the index of variables.

   Although the examples that follow mostly illustrate Lisp, the
commands can be used for other programming languages.

* Menu:

* Functions Commands::          Commands for functions and similar entities.
* Variables Commands::          Commands for variables and similar entities.
* Typed Functions::             Commands for functions in typed languages.
* Typed Variables::             Commands for variables in typed languages.
* Abstract Objects::            Commands for object-oriented programming.
* Data Types::                  The definition command for data types.


File: texinfo,  Node: Functions Commands,  Next: Variables Commands,  Prev: Def Cmds in Detail,  Up: Def Cmds in Detail

Functions and Similar Entities
------------------------------

   This section describes the commands for describing functions and
similar entities.

`@deffn CATEGORY NAME ARGUMENTS...'
     The `@deffn' command is the general definition command for
     functions, interactive commands, and similar entities that may
     take arguments.  You must choose a term to describe the category
     of entity being defined; for example, "Function" could be used if
     the entity is a function.  The `@deffn' command is written at the
     beginning of a line and is followed on the same line by the
     category of entity being described, the name of this particular
     entity, and its arguments, if any.  Terminate the definition with
     `@end deffn' on a line of its own.

     For example,

          @deffn Command forward-char nchars
          Move point forward @var{nchars} characters.
          @end deffn

     shows a rather terse definition for a "command" named
     `forward-char' with one argument, NCHARS.

     `@deffn' prints argument names such as NCHARS in italics or upper
     case, as if `@var' had been used, because we think of these names
     as metasyntactic variables--they stand for the actual argument
     values.  Within the text of the description, write an argument
     name explicitly with `@var' to refer to the value of the
     argument.  In the example above, we used `@var{nchars}' in this
     way.

     The template for `@deffn' is:

          @deffn CATEGORY NAME ARGUMENTS...
          BODY-OF-DEFINITION
          @end deffn

`@defun NAME ARGUMENTS...'
     The `@defun' command is the definition command for functions. 
     `@defun' is equivalent to `@deffn Function ...'.

     For example,

          @defun set symbol new-value
          Change the value of the symbol @var{symbol} to @var{new-value}.
          @end defun

     shows a rather terse definition for a function `set' whose
     arguments are SYMBOL and NEW-VALUE.  The argument names on the
     `@defun' line automatically appear in italics or upper case as if
     they were enclosed in `@var'.  Terminate the definition with
     `@end defun' on a line of its own.

     The template is:

          @defun FUNCTION-NAME ARGUMENTS...
          BODY-OF-DEFINITION
          @end defun

     `@defun' creates an entry in the index of functions.

`@defmac NAME ARGUMENTS...'
     The `@defmac' command is the definition command for macros. 
     `@defmac' is equivalent to `@deffn Macro ...' and works like
     `@defun'.

`@defspec NAME ARGUMENTS...'
     The `@defspec' command is the definition command for special
     forms.  (In Lisp, a special form is an entity much like a
     function.) `@defspec' is equivalent to `@deffn {Special Form}
     ...' and works like `@defun'.


File: texinfo,  Node: Variables Commands,  Next: Typed Functions,  Prev: Functions Commands,  Up: Def Cmds in Detail

Variables and Similar Entities
------------------------------

   Here are the commands for defining variables and similar entities:

`@defvr CATEGORY NAME'
     The `@defvr' command is a general definition command for
     something like a variable--an entity that records a value.  You
     must choose a term to describe the category of entity being
     defined; for example, "Variable" could be used if the entity is a
     variable.  Write the `@defvr' command at the beginning of a line
     and followed it on the same line by the category of the entity
     and the name of the entity.

     Capitalize the category name like a title.  If the name of the
     category contains spaces, as in the name `User Option', write
     braces around it.  Otherwise, the second word will be mistaken
     for the name of the entity.  For example,

          @defvr {User Option} fill-column
          This buffer-local variable specifies
          the maximum width of filled lines.
          ...
          @end defvr

     Terminate the definition with `@end defvr' on a line of its own.

     The template is:

          @defvr CATEGORY NAME
          BODY-OF-DEFINITION
          @end defvr

     `@defvr' creates an entry in the index of variables for NAME.

`@defvar NAME'
     The `@defvar' command is the definition command for variables. 
     `@defvar' is equivalent to `@defvr Variable ...'.

     For example,

          @defvar kill-ring
          ...
          @end defvar

     The template is:

          @defvar NAME
          BODY-OF-DEFINITION
          @end defvar

     `@defvar' creates an entry in the index of variables for NAME.

`@defopt NAME'
     The `@defopt' command is the definition command for user options.
      `@defopt' is equivalent to `@defvr {User Option} ...' and works
     like `@defvar'.


File: texinfo,  Node: Typed Functions,  Next: Typed Variables,  Prev: Variables Commands,  Up: Def Cmds in Detail

Functions in Typed Languages
----------------------------

   The `@deftypefn' command and its variations are for describing
functions in C or any other language in which you must declare types
of variables and functions.

`@deftypefn CATEGORY DATA-TYPE NAME ARGUMENTS...'
     The `@deftypefn' command is the general definition command for
     functions and similar entities that may take arguments and that
     are typed.  The `@deftypefn' command is written at the beginning
     of a line and is followed on the same line by the category of
     entity being described, the type of the returned value, the name
     of this particular entity, and its arguments, if any.

     For example,

          @deftypefn {Library Function} int foobar (int @var{foo},
               float @var{bar})
          ...
          @end deftypefn

     (where the text before the "...", shown above as two lines, would
     actually be a single line in a real Texinfo file) produces the
     following in Info:

          -- Library Function: int foobar (int FOO, float BAR)
          ...

     This means that `foobar' is a "library function" that returns an
     `int', and its arguments are FOO (an `int') and BAR (a `float').

     The argument names that you write in `@deftypefn' are not subject
     to an implicit `@var'--since the actual names of the arguments in
     `@deftypefn' are typically scattered among data type names and
     keywords, Texinfo can't find them without help.  Instead, you
     must write `@var' explicitly around the argument names.  In the
     example above, the argument names are `foo' and `bar'.

     The template for `@deftypefn' is:

          @deftypefn CATEGORY DATA-TYPE NAME ARGUMENTS ...
          BODY-OF-DESCRIPTION
          @end deftypefn

     Note that if the CATEGORY or DATA TYPE is more than one word then
     it must be enclosed in braces to make it a single argument.

     If you are describing a procedure in a language that has packages,
     such as Ada, you might consider using `@deftypefn' in a manner
     somewhat contrary to the convention described in the preceding
     paragraphs.

     For example:

          @deftypefn stacks private push (@var{s}:in out stack;
               @var{n}:in integer)
          ...
          @end deftypefn

     (The `@deftypefn' arguments are shown split into two lines, but
     would be a single line in a real Texinfo file.)

     In this instance, the procedure is classified as belonging to the
     package `stacks' rather than classified as a `procedure' and its
     data type is described as `private'.  (The name of the procedure
     is `push', and its arguments are S and N.)

     `@deftypefn' creates an entry in the index of functions for NAME.

`@deftypefun DATA-TYPE NAME ARGUMENTS...'
     The `@deftypefun' command is the specialized definition command
     for functions in typed languages.  The command is equivalent to
     `@deftypefn Function ...'.

          @deftypefun int foobar (int @var{foo}, float @var{bar})
          ...
          @end deftypefun

     produces the following in Info:

          -- Function: int foobar (int FOO, float BAR)
          ...

     The template is:

          @deftypefun TYPE NAME ARGUMENTS...
          BODY-OF-DESCRIPTION
          @end deftypefun

     `@deftypefun' creates an entry in the index of functions for NAME.


File: texinfo,  Node: Typed Variables,  Next: Abstract Objects,  Prev: Typed Functions,  Up: Def Cmds in Detail

Variables in Typed Languages
----------------------------

   Variables in typed languages are handled in a manner similar to
functions in typed languages.  *Note Typed Functions::.  The general
definition command `@deftypevr' corresponds to `@deftypefn' and the
specialized definition command `@deftypevar' corresponds to
`@deftypefun'.

`@deftypevr CATEGORY DATA-TYPE NAME'
     The `@deftypevr' command is the general definition command for
     something like a variable in a typed language--an entity that
     records a value.  You must choose a term to describe the category
     of the entity being defined; for example, "Variable" could be
     used if the entity is a variable.

     The `@deftypevr' command is written at the beginning of a line
     and is followed on the same line by the category of the entity
     being described, the data type, and the name of this particular
     entity.

     For example:

          @deftypevr {Global Flag} int enable
          ...
          @end deftypevr

     produces the following in Info:

          -- Global Flag: int enable
          ...

     The template is:

          @deftypevr CATEGORY DATA-TYPE NAME
          BODY-OF-DESCRIPTION
          @end deftypevr

     `@deftypevr' creates an entry in the index of variables for NAME.

`@deftypevar DATA-TYPE NAME'
     The `@deftypevar' command is the specialized definition command
     for variables in typed languages.  `@deftypevar' is equivalent to
     `@deftypevr Variable ...'.

     For example,

          @deftypevar int foobar
          ...
          @end deftypevar

     produces the following in Info:

          -- Variable: int foobar
          ...

     The template is:

          @deftypevar DATA-TYPE NAME
          BODY-OF-DESCRIPTION
          @end deftypevar

     `@deftypevar' creates an entry in the index of variables for NAME.

